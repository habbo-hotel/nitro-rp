{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/@pixi+extensions@6.5.10/node_modules/node_modules/tslib/tslib.es6.js", "../../../../node_modules/.pnpm/@pixi+extensions@6.5.10/node_modules/@pixi/extensions/src/index.ts", "../../../../node_modules/.pnpm/@pixi+ticker@6.5.10_@pixi+extensions@6.5.10_@pixi+settings@6.5.10/node_modules/@pixi/ticker/src/settings.ts", "../../../../node_modules/.pnpm/@pixi+ticker@6.5.10_@pixi+extensions@6.5.10_@pixi+settings@6.5.10/node_modules/@pixi/ticker/src/const.ts", "../../../../node_modules/.pnpm/@pixi+ticker@6.5.10_@pixi+extensions@6.5.10_@pixi+settings@6.5.10/node_modules/@pixi/ticker/src/TickerListener.ts", "../../../../node_modules/.pnpm/@pixi+ticker@6.5.10_@pixi+extensions@6.5.10_@pixi+settings@6.5.10/node_modules/@pixi/ticker/src/Ticker.ts", "../../../../node_modules/.pnpm/@pixi+ticker@6.5.10_@pixi+extensions@6.5.10_@pixi+settings@6.5.10/node_modules/@pixi/ticker/src/TickerPlugin.ts"],
  "sourcesContent": ["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n", "/**\n * Collection of valid extension types.\n * @memberof PIXI\n * @property {string} Application - Application plugins\n * @property {string} RendererPlugin - Plugins for Renderer\n * @property {string} CanvasRendererPlugin - Plugins for CanvasRenderer\n * @property {string} Loader - Plugins to use with Loader\n * @property {string} LoadParser - Parsers for Assets loader.\n * @property {string} ResolveParser - Parsers for Assets resolvers.\n * @property {string} CacheParser - Parsers for Assets cache.\n */\nenum ExtensionType\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    Application = 'application',\n    RendererPlugin = 'renderer-webgl-plugin',\n    CanvasRendererPlugin = 'renderer-canvas-plugin',\n    Loader = 'loader',\n    LoadParser = 'load-parser',\n    ResolveParser = 'resolve-parser',\n    CacheParser = 'cache-parser',\n    DetectionParser = 'detection-parser',\n}\n\ninterface ExtensionMetadataDetails\n{\n    type: ExtensionType | ExtensionType[];\n    name?: string;\n}\n\ntype ExtensionMetadata = ExtensionType | ExtensionMetadataDetails;\n\n/**\n * Format when registering an extension. Generally, the extension\n * should have these values as `extension` static property,\n * but you can override name or type by providing an object.\n * @memberof PIXI\n */\ninterface ExtensionFormatLoose\n{\n    /** The extension type, can be multiple types */\n    type: ExtensionType | ExtensionType[];\n    /** Optional. Some plugins provide an API name/property, such as Renderer plugins */\n    name?: string;\n    /** Reference to the plugin object/class */\n    ref: any;\n}\n\n/**\n * Strict extension format that is used internally for registrations.\n * @memberof PIXI\n */\ninterface ExtensionFormat extends ExtensionFormatLoose\n{\n    /** The extension type, always expressed as multiple, even if a single */\n    type: ExtensionType[];\n}\n\ntype ExtensionHandler = (extension: ExtensionFormat) => void;\n\n/**\n * Convert input into extension format data.\n * @ignore\n */\nconst normalizeExtension = (ext: ExtensionFormatLoose | any): ExtensionFormat =>\n{\n    // Class/Object submission, use extension object\n    if (typeof ext === 'function' || (typeof ext === 'object' && ext.extension))\n    {\n        // #if _DEBUG\n        if (!ext.extension)\n        {\n            throw new Error('Extension class must have an extension object');\n        }\n        // #endif\n        const metadata: ExtensionMetadataDetails = (typeof ext.extension !== 'object')\n            ? { type: ext.extension }\n            : ext.extension;\n\n        ext = { ...metadata, ref: ext };\n    }\n    if (typeof ext === 'object')\n    {\n        ext = { ...ext };\n    }\n    else\n    {\n        throw new Error('Invalid extension type');\n    }\n\n    if (typeof ext.type === 'string')\n    {\n        ext.type = [ext.type];\n    }\n\n    return ext;\n};\n\n/**\n * Global registration of all PixiJS extensions. One-stop-shop for extensibility.\n * @memberof PIXI\n * @namespace extensions\n */\nconst extensions = {\n\n    /** @ignore */\n    _addHandlers: null as Record<ExtensionType, ExtensionHandler>,\n\n    /** @ignore */\n    _removeHandlers: null as Record<ExtensionType, ExtensionHandler>,\n\n    /** @ignore */\n    _queue: {} as Record<ExtensionType, ExtensionFormat[]>,\n\n    /**\n     * Remove extensions from PixiJS.\n     * @param extensions - Extensions to be removed.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    remove(...extensions: Array<ExtensionFormatLoose | any>)\n    {\n        extensions.map(normalizeExtension).forEach((ext) =>\n        {\n            ext.type.forEach((type) => this._removeHandlers[type]?.(ext));\n        });\n\n        return this;\n    },\n\n    /**\n     * Register new extensions with PixiJS.\n     * @param extensions - The spread of extensions to add to PixiJS.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    add(...extensions: Array<ExtensionFormatLoose | any>)\n    {\n        // Handle any extensions either passed as class w/ data or as data\n        extensions.map(normalizeExtension).forEach((ext) =>\n        {\n            ext.type.forEach((type) =>\n            {\n                const handlers = this._addHandlers;\n                const queue = this._queue;\n\n                if (!handlers[type])\n                {\n                    queue[type] = queue[type] || [];\n                    queue[type].push(ext);\n                }\n                else\n                {\n                    handlers[type](ext);\n                }\n            });\n        });\n\n        return this;\n    },\n\n    /**\n     * Internal method to handle extensions by name.\n     * @param type - The extension type.\n     * @param onAdd  - Function for handling when extensions are added/registered passes {@link PIXI.ExtensionFormat}.\n     * @param onRemove  - Function for handling when extensions are removed/unregistered passes {@link PIXI.ExtensionFormat}.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    handle(type: ExtensionType, onAdd: ExtensionHandler, onRemove: ExtensionHandler)\n    {\n        const addHandlers = this._addHandlers = this._addHandlers || {} as Record<ExtensionType, ExtensionHandler>;\n        const removeHandlers = this._removeHandlers = this._removeHandlers || {} as Record<ExtensionType, ExtensionHandler>;\n\n        // #if _DEBUG\n        if (addHandlers[type] || removeHandlers[type])\n        {\n            throw new Error(`Extension type ${type} already has a handler`);\n        }\n        // #endif\n\n        addHandlers[type] = onAdd;\n        removeHandlers[type] = onRemove;\n\n        // Process the queue\n        const queue = this._queue;\n\n        // Process any plugins that have been registered before the handler\n        if (queue[type])\n        {\n            queue[type].forEach((ext) => onAdd(ext));\n            delete queue[type];\n        }\n\n        return this;\n    },\n\n    /**\n     * Handle a type, but using a map by `name` property.\n     * @param type - Type of extension to handle.\n     * @param map - The object map of named extensions.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    handleByMap(type: ExtensionType, map: Record<string, any>)\n    {\n        return this.handle(type,\n            (extension) =>\n            {\n                map[extension.name] = extension.ref;\n            },\n            (extension) =>\n            {\n                delete map[extension.name];\n            }\n        );\n    },\n\n    /**\n     * Handle a type, but using a list of extensions.\n     * @param type - Type of extension to handle.\n     * @param list - The list of extensions.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    handleByList(type: ExtensionType, list: any[])\n    {\n        return this.handle(\n            type,\n            (extension) =>\n            {\n                if (list.includes(extension.ref))\n                {\n                    return;\n                }\n\n                list.push(extension.ref);\n                // TODO: remove me later, only added for @pixi/loaders\n                if (type === ExtensionType.Loader)\n                {\n                    extension.ref.add?.();\n                }\n            },\n            (extension) =>\n            {\n                const index = list.indexOf(extension.ref);\n\n                if (index !== -1)\n                {\n                    list.splice(index, 1);\n                }\n            }\n        );\n    },\n};\n\nexport {\n    extensions,\n    ExtensionType,\n};\nexport type {\n    ExtensionHandler,\n    ExtensionMetadata,\n    ExtensionFormatLoose,\n    ExtensionFormat,\n};\n", "import { settings } from '@pixi/settings';\n\n/**\n * Target frames per millisecond.\n * @static\n * @name TARGET_FPMS\n * @memberof PIXI.settings\n * @type {number}\n * @default 0.06\n */\nsettings.TARGET_FPMS = 0.06;\n\nexport { settings };\n", "/**\n * Represents the update priorities used by internal PIXI classes when registered with\n * the {@link PIXI.Ticker} object. Higher priority items are updated first and lower\n * priority items, such as render, should go later.\n * @static\n * @constant\n * @name UPDATE_PRIORITY\n * @memberof PIXI\n * @enum {number}\n * @property {number} [INTERACTION=50] Highest priority, used for {@link PIXI.InteractionManager}\n * @property {number} [HIGH=25] High priority updating, {@link PIXI.VideoBaseTexture} and {@link PIXI.AnimatedSprite}\n * @property {number} [NORMAL=0] Default priority for ticker events, see {@link PIXI.Ticker#add}.\n * @property {number} [LOW=-25] Low priority used for {@link PIXI.Application} rendering.\n * @property {number} [UTILITY=-50] Lowest priority used for {@link PIXI.BasePrepare} utility.\n */\nexport enum UPDATE_PRIORITY\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    INTERACTION = 50,\n    HIGH = 25,\n    NORMAL = 0,\n    LOW = -25,\n    UTILITY = -50,\n}\n", "import type { TickerCallback } from './Ticker';\n\n/**\n * Internal class for handling the priority sorting of ticker handlers.\n * @private\n * @class\n * @memberof PIXI\n */\nexport class TickerListener<T = any>\n{\n    /** The current priority. */\n    public priority: number;\n    /** The next item in chain. */\n    public next: TickerListener = null;\n    /** The previous item in chain. */\n    public previous: TickerListener = null;\n\n    /** The handler function to execute. */\n    private fn: TickerCallback<T>;\n    /** The calling to execute. */\n    private context: T;\n    /** If this should only execute once. */\n    private once: boolean;\n    /** `true` if this listener has been destroyed already. */\n    private _destroyed = false;\n\n    /**\n     * Constructor\n     * @private\n     * @param fn - The listener function to be added for one update\n     * @param context - The listener context\n     * @param priority - The priority for emitting\n     * @param once - If the handler should fire once\n     */\n    constructor(fn: TickerCallback<T>, context: T = null, priority = 0, once = false)\n    {\n        this.fn = fn;\n        this.context = context;\n        this.priority = priority;\n        this.once = once;\n    }\n\n    /**\n     * Simple compare function to figure out if a function and context match.\n     * @private\n     * @param fn - The listener function to be added for one update\n     * @param context - The listener context\n     * @returns `true` if the listener match the arguments\n     */\n    match(fn: TickerCallback<T>, context: any = null): boolean\n    {\n        return this.fn === fn && this.context === context;\n    }\n\n    /**\n     * Emit by calling the current function.\n     * @private\n     * @param deltaTime - time since the last emit.\n     * @returns Next ticker\n     */\n    emit(deltaTime: number): TickerListener\n    {\n        if (this.fn)\n        {\n            if (this.context)\n            {\n                this.fn.call(this.context, deltaTime);\n            }\n            else\n            {\n                (this as TickerListener<any>).fn(deltaTime);\n            }\n        }\n\n        const redirect = this.next;\n\n        if (this.once)\n        {\n            this.destroy(true);\n        }\n\n        // Soft-destroying should remove\n        // the next reference\n        if (this._destroyed)\n        {\n            this.next = null;\n        }\n\n        return redirect;\n    }\n\n    /**\n     * Connect to the list.\n     * @private\n     * @param previous - Input node, previous listener\n     */\n    connect(previous: TickerListener): void\n    {\n        this.previous = previous;\n        if (previous.next)\n        {\n            previous.next.previous = this;\n        }\n        this.next = previous.next;\n        previous.next = this;\n    }\n\n    /**\n     * Destroy and don't use after this.\n     * @private\n     * @param hard - `true` to remove the `next` reference, this\n     *        is considered a hard destroy. Soft destroy maintains the next reference.\n     * @returns The listener to redirect while emitting or removing.\n     */\n    destroy(hard = false): TickerListener\n    {\n        this._destroyed = true;\n        this.fn = null;\n        this.context = null;\n\n        // Disconnect, hook up next and previous\n        if (this.previous)\n        {\n            this.previous.next = this.next;\n        }\n\n        if (this.next)\n        {\n            this.next.previous = this.previous;\n        }\n\n        // Redirect to the next item\n        const redirect = this.next;\n\n        // Remove references\n        this.next = hard ? null : redirect;\n        this.previous = null;\n\n        return redirect;\n    }\n}\n", "import { settings } from './settings';\nimport { UPDATE_PRIORITY } from './const';\nimport { TickerListener } from './TickerListener';\n\nexport type TickerCallback<T> = (this: T, dt: number) => any;\n\n/**\n * A Ticker class that runs an update loop that other objects listen to.\n *\n * This class is composed around listeners meant for execution on the next requested animation frame.\n * Animation frames are requested only when necessary, e.g. When the ticker is started and the emitter has listeners.\n * @class\n * @memberof PIXI\n */\nexport class Ticker\n{\n    /** The private shared ticker instance */\n    private static _shared: Ticker;\n    /** The private system ticker instance  */\n    private static _system: Ticker;\n\n    /**\n     * Whether or not this ticker should invoke the method\n     * {@link PIXI.Ticker#start} automatically\n     * when a listener is added.\n     */\n    public autoStart = false;\n    /**\n     * Scalar time value from last frame to this frame.\n     * This value is capped by setting {@link PIXI.Ticker#minFPS}\n     * and is scaled with {@link PIXI.Ticker#speed}.\n     * **Note:** The cap may be exceeded by scaling.\n     */\n    public deltaTime = 1;\n    /**\n     * Scaler time elapsed in milliseconds from last frame to this frame.\n     * This value is capped by setting {@link PIXI.Ticker#minFPS}\n     * and is scaled with {@link PIXI.Ticker#speed}.\n     * **Note:** The cap may be exceeded by scaling.\n     * If the platform supports DOMHighResTimeStamp,\n     * this value will have a precision of 1 µs.\n     * Defaults to target frame time\n     * @default 16.66\n     */\n    public deltaMS: number;\n    /**\n     * Time elapsed in milliseconds from last frame to this frame.\n     * Opposed to what the scalar {@link PIXI.Ticker#deltaTime}\n     * is based, this value is neither capped nor scaled.\n     * If the platform supports DOMHighResTimeStamp,\n     * this value will have a precision of 1 µs.\n     * Defaults to target frame time\n     * @default 16.66\n     */\n    public elapsedMS: number;\n    /**\n     * The last time {@link PIXI.Ticker#update} was invoked.\n     * This value is also reset internally outside of invoking\n     * update, but only when a new animation frame is requested.\n     * If the platform supports DOMHighResTimeStamp,\n     * this value will have a precision of 1 µs.\n     */\n    public lastTime = -1;\n    /**\n     * Factor of current {@link PIXI.Ticker#deltaTime}.\n     * @example\n     * // Scales ticker.deltaTime to what would be\n     * // the equivalent of approximately 120 FPS\n     * ticker.speed = 2;\n     */\n    public speed = 1;\n    /**\n     * Whether or not this ticker has been started.\n     * `true` if {@link PIXI.Ticker#start} has been called.\n     * `false` if {@link PIXI.Ticker#stop} has been called.\n     * While `false`, this value may change to `true` in the\n     * event of {@link PIXI.Ticker#autoStart} being `true`\n     * and a listener is added.\n     */\n    public started = false;\n\n    /** The first listener. All new listeners added are chained on this. */\n    private _head: TickerListener;\n    /** Internal current frame request ID */\n    private _requestId: number = null;\n    /**\n     * Internal value managed by minFPS property setter and getter.\n     * This is the maximum allowed milliseconds between updates.\n     */\n    private _maxElapsedMS = 100;\n    /**\n     * Internal value managed by minFPS property setter and getter.\n     * This is the minimum allowed milliseconds between updates.\n     */\n    private _minElapsedMS = 0;\n    /** If enabled, deleting is disabled.*/\n    private _protected = false;\n    /** The last time keyframe was executed. Maintains a relatively fixed interval with the previous value. */\n    private _lastFrame = -1;\n    /**\n     * Internal tick method bound to ticker instance.\n     * This is because in early 2015, Function.bind\n     * is still 60% slower in high performance scenarios.\n     * Also separating frame requests from update method\n     * so listeners may be called at any time and with\n     * any animation API, just invoke ticker.update(time).\n     * @param time - Time since last tick.\n     */\n    private _tick: (time: number) => any;\n\n    constructor()\n    {\n        this._head = new TickerListener(null, null, Infinity);\n        this.deltaMS = 1 / settings.TARGET_FPMS;\n        this.elapsedMS = 1 / settings.TARGET_FPMS;\n\n        this._tick = (time: number): void =>\n        {\n            this._requestId = null;\n\n            if (this.started)\n            {\n                // Invoke listeners now\n                this.update(time);\n                // Listener side effects may have modified ticker state.\n                if (this.started && this._requestId === null && this._head.next)\n                {\n                    this._requestId = requestAnimationFrame(this._tick);\n                }\n            }\n        };\n    }\n\n    /**\n     * Conditionally requests a new animation frame.\n     * If a frame has not already been requested, and if the internal\n     * emitter has listeners, a new frame is requested.\n     * @private\n     */\n    private _requestIfNeeded(): void\n    {\n        if (this._requestId === null && this._head.next)\n        {\n            // ensure callbacks get correct delta\n            this.lastTime = performance.now();\n            this._lastFrame = this.lastTime;\n            this._requestId = requestAnimationFrame(this._tick);\n        }\n    }\n\n    /**\n     * Conditionally cancels a pending animation frame.\n     * @private\n     */\n    private _cancelIfNeeded(): void\n    {\n        if (this._requestId !== null)\n        {\n            cancelAnimationFrame(this._requestId);\n            this._requestId = null;\n        }\n    }\n\n    /**\n     * Conditionally requests a new animation frame.\n     * If the ticker has been started it checks if a frame has not already\n     * been requested, and if the internal emitter has listeners. If these\n     * conditions are met, a new frame is requested. If the ticker has not\n     * been started, but autoStart is `true`, then the ticker starts now,\n     * and continues with the previous conditions to request a new frame.\n     * @private\n     */\n    private _startIfPossible(): void\n    {\n        if (this.started)\n        {\n            this._requestIfNeeded();\n        }\n        else if (this.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Register a handler for tick events. Calls continuously unless\n     * it is removed or the ticker is stopped.\n     * @param fn - The listener function to be added for updates\n     * @param context - The listener context\n     * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n     * @returns This instance of a ticker\n     */\n    add<T = any>(fn: TickerCallback<T>, context?: T, priority = UPDATE_PRIORITY.NORMAL): this\n    {\n        return this._addListener(new TickerListener(fn, context, priority));\n    }\n\n    /**\n     * Add a handler for the tick event which is only execute once.\n     * @param fn - The listener function to be added for one update\n     * @param context - The listener context\n     * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n     * @returns This instance of a ticker\n     */\n    addOnce<T = any>(fn: TickerCallback<T>, context?: T, priority = UPDATE_PRIORITY.NORMAL): this\n    {\n        return this._addListener(new TickerListener(fn, context, priority, true));\n    }\n\n    /**\n     * Internally adds the event handler so that it can be sorted by priority.\n     * Priority allows certain handler (user, AnimatedSprite, Interaction) to be run\n     * before the rendering.\n     * @private\n     * @param listener - Current listener being added.\n     * @returns This instance of a ticker\n     */\n    private _addListener(listener: TickerListener): this\n    {\n        // For attaching to head\n        let current = this._head.next;\n        let previous = this._head;\n\n        // Add the first item\n        if (!current)\n        {\n            listener.connect(previous);\n        }\n        else\n        {\n            // Go from highest to lowest priority\n            while (current)\n            {\n                if (listener.priority > current.priority)\n                {\n                    listener.connect(previous);\n                    break;\n                }\n                previous = current;\n                current = current.next;\n            }\n\n            // Not yet connected\n            if (!listener.previous)\n            {\n                listener.connect(previous);\n            }\n        }\n\n        this._startIfPossible();\n\n        return this;\n    }\n\n    /**\n     * Removes any handlers matching the function and context parameters.\n     * If no handlers are left after removing, then it cancels the animation frame.\n     * @param fn - The listener function to be removed\n     * @param context - The listener context to be removed\n     * @returns This instance of a ticker\n     */\n    remove<T = any>(fn: TickerCallback<T>, context?: T): this\n    {\n        let listener = this._head.next;\n\n        while (listener)\n        {\n            // We found a match, lets remove it\n            // no break to delete all possible matches\n            // incase a listener was added 2+ times\n            if (listener.match(fn, context))\n            {\n                listener = listener.destroy();\n            }\n            else\n            {\n                listener = listener.next;\n            }\n        }\n\n        if (!this._head.next)\n        {\n            this._cancelIfNeeded();\n        }\n\n        return this;\n    }\n\n    /**\n     * The number of listeners on this ticker, calculated by walking through linked list\n     * @readonly\n     * @member {number}\n     */\n    get count(): number\n    {\n        if (!this._head)\n        {\n            return 0;\n        }\n\n        let count = 0;\n        let current = this._head;\n\n        while ((current = current.next))\n        {\n            count++;\n        }\n\n        return count;\n    }\n\n    /** Starts the ticker. If the ticker has listeners a new animation frame is requested at this point. */\n    start(): void\n    {\n        if (!this.started)\n        {\n            this.started = true;\n            this._requestIfNeeded();\n        }\n    }\n\n    /** Stops the ticker. If the ticker has requested an animation frame it is canceled at this point. */\n    stop(): void\n    {\n        if (this.started)\n        {\n            this.started = false;\n            this._cancelIfNeeded();\n        }\n    }\n\n    /** Destroy the ticker and don't use after this. Calling this method removes all references to internal events. */\n    destroy(): void\n    {\n        if (!this._protected)\n        {\n            this.stop();\n\n            let listener = this._head.next;\n\n            while (listener)\n            {\n                listener = listener.destroy(true);\n            }\n\n            this._head.destroy();\n            this._head = null;\n        }\n    }\n\n    /**\n     * Triggers an update. An update entails setting the\n     * current {@link PIXI.Ticker#elapsedMS},\n     * the current {@link PIXI.Ticker#deltaTime},\n     * invoking all listeners with current deltaTime,\n     * and then finally setting {@link PIXI.Ticker#lastTime}\n     * with the value of currentTime that was provided.\n     * This method will be called automatically by animation\n     * frame callbacks if the ticker instance has been started\n     * and listeners are added.\n     * @param {number} [currentTime=performance.now()] - the current time of execution\n     */\n    update(currentTime = performance.now()): void\n    {\n        let elapsedMS;\n\n        // If the difference in time is zero or negative, we ignore most of the work done here.\n        // If there is no valid difference, then should be no reason to let anyone know about it.\n        // A zero delta, is exactly that, nothing should update.\n        //\n        // The difference in time can be negative, and no this does not mean time traveling.\n        // This can be the result of a race condition between when an animation frame is requested\n        // on the current JavaScript engine event loop, and when the ticker's start method is invoked\n        // (which invokes the internal _requestIfNeeded method). If a frame is requested before\n        // _requestIfNeeded is invoked, then the callback for the animation frame the ticker requests,\n        // can receive a time argument that can be less than the lastTime value that was set within\n        // _requestIfNeeded. This difference is in microseconds, but this is enough to cause problems.\n        //\n        // This check covers this browser engine timing issue, as well as if consumers pass an invalid\n        // currentTime value. This may happen if consumers opt-out of the autoStart, and update themselves.\n\n        if (currentTime > this.lastTime)\n        {\n            // Save uncapped elapsedMS for measurement\n            elapsedMS = this.elapsedMS = currentTime - this.lastTime;\n\n            // cap the milliseconds elapsed used for deltaTime\n            if (elapsedMS > this._maxElapsedMS)\n            {\n                elapsedMS = this._maxElapsedMS;\n            }\n\n            elapsedMS *= this.speed;\n\n            // If not enough time has passed, exit the function.\n            // Get ready for next frame by setting _lastFrame, but based on _minElapsedMS\n            // adjustment to ensure a relatively stable interval.\n            if (this._minElapsedMS)\n            {\n                const delta = currentTime - this._lastFrame | 0;\n\n                if (delta < this._minElapsedMS)\n                {\n                    return;\n                }\n\n                this._lastFrame = currentTime - (delta % this._minElapsedMS);\n            }\n\n            this.deltaMS = elapsedMS;\n            this.deltaTime = this.deltaMS * settings.TARGET_FPMS;\n\n            // Cache a local reference, in-case ticker is destroyed\n            // during the emit, we can still check for head.next\n            const head = this._head;\n\n            // Invoke listeners added to internal emitter\n            let listener = head.next;\n\n            while (listener)\n            {\n                listener = listener.emit(this.deltaTime);\n            }\n\n            if (!head.next)\n            {\n                this._cancelIfNeeded();\n            }\n        }\n        else\n        {\n            this.deltaTime = this.deltaMS = this.elapsedMS = 0;\n        }\n\n        this.lastTime = currentTime;\n    }\n\n    /**\n     * The frames per second at which this ticker is running.\n     * The default is approximately 60 in most modern browsers.\n     * **Note:** This does not factor in the value of\n     * {@link PIXI.Ticker#speed}, which is specific\n     * to scaling {@link PIXI.Ticker#deltaTime}.\n     * @member {number}\n     * @readonly\n     */\n    get FPS(): number\n    {\n        return 1000 / this.elapsedMS;\n    }\n\n    /**\n     * Manages the maximum amount of milliseconds allowed to\n     * elapse between invoking {@link PIXI.Ticker#update}.\n     * This value is used to cap {@link PIXI.Ticker#deltaTime},\n     * but does not effect the measured value of {@link PIXI.Ticker#FPS}.\n     * When setting this property it is clamped to a value between\n     * `0` and `PIXI.settings.TARGET_FPMS * 1000`.\n     * @member {number}\n     * @default 10\n     */\n    get minFPS(): number\n    {\n        return 1000 / this._maxElapsedMS;\n    }\n\n    set minFPS(fps: number)\n    {\n        // Minimum must be below the maxFPS\n        const minFPS = Math.min(this.maxFPS, fps);\n\n        // Must be at least 0, but below 1 / settings.TARGET_FPMS\n        const minFPMS = Math.min(Math.max(0, minFPS) / 1000, settings.TARGET_FPMS);\n\n        this._maxElapsedMS = 1 / minFPMS;\n    }\n\n    /**\n     * Manages the minimum amount of milliseconds required to\n     * elapse between invoking {@link PIXI.Ticker#update}.\n     * This will effect the measured value of {@link PIXI.Ticker#FPS}.\n     * If it is set to `0`, then there is no limit; PixiJS will render as many frames as it can.\n     * Otherwise it will be at least `minFPS`\n     * @member {number}\n     * @default 0\n     */\n    get maxFPS(): number\n    {\n        if (this._minElapsedMS)\n        {\n            return Math.round(1000 / this._minElapsedMS);\n        }\n\n        return 0;\n    }\n\n    set maxFPS(fps: number)\n    {\n        if (fps === 0)\n        {\n            this._minElapsedMS = 0;\n        }\n        else\n        {\n            // Max must be at least the minFPS\n            const maxFPS = Math.max(this.minFPS, fps);\n\n            this._minElapsedMS = 1 / (maxFPS / 1000);\n        }\n    }\n\n    /**\n     * The shared ticker instance used by {@link PIXI.AnimatedSprite} and by\n     * {@link PIXI.VideoResource} to update animation frames / video textures.\n     *\n     * It may also be used by {@link PIXI.Application} if created with the `sharedTicker` option property set to true.\n     *\n     * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n     * Please follow the examples for usage, including how to opt-out of auto-starting the shared ticker.\n     * @example\n     * let ticker = PIXI.Ticker.shared;\n     * // Set this to prevent starting this ticker when listeners are added.\n     * // By default this is true only for the PIXI.Ticker.shared instance.\n     * ticker.autoStart = false;\n     * // FYI, call this to ensure the ticker is stopped. It should be stopped\n     * // if you have not attempted to render anything yet.\n     * ticker.stop();\n     * // Call this when you are ready for a running shared ticker.\n     * ticker.start();\n     * @example\n     * // You may use the shared ticker to render...\n     * let renderer = PIXI.autoDetectRenderer();\n     * let stage = new PIXI.Container();\n     * document.body.appendChild(renderer.view);\n     * ticker.add(function (time) {\n     *     renderer.render(stage);\n     * });\n     * @example\n     * // Or you can just update it manually.\n     * ticker.autoStart = false;\n     * ticker.stop();\n     * function animate(time) {\n     *     ticker.update(time);\n     *     renderer.render(stage);\n     *     requestAnimationFrame(animate);\n     * }\n     * animate(performance.now());\n     * @member {PIXI.Ticker}\n     * @static\n     */\n    static get shared(): Ticker\n    {\n        if (!Ticker._shared)\n        {\n            const shared = Ticker._shared = new Ticker();\n\n            shared.autoStart = true;\n            shared._protected = true;\n        }\n\n        return Ticker._shared;\n    }\n\n    /**\n     * The system ticker instance used by {@link PIXI.InteractionManager} and by\n     * {@link PIXI.BasePrepare} for core timing functionality that shouldn't usually need to be paused,\n     * unlike the `shared` ticker which drives visual animations and rendering which may want to be paused.\n     *\n     * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n     * @member {PIXI.Ticker}\n     * @static\n     */\n    static get system(): Ticker\n    {\n        if (!Ticker._system)\n        {\n            const system = Ticker._system = new Ticker();\n\n            system.autoStart = true;\n            system._protected = true;\n        }\n\n        return Ticker._system;\n    }\n}\n", "import type { ExtensionMetadata } from '@pixi/extensions';\nimport { ExtensionType } from '@pixi/extensions';\nimport { UPDATE_PRIORITY } from './const';\nimport { Ticker } from './Ticker';\n\n/**\n * Middleware for for Application Ticker.\n * @example\n * import {TickerPlugin} from '@pixi/ticker';\n * import {Application} from '@pixi/app';\n * import {extensions} from '@pixi/extensions';\n * extensions.add(TickerPlugin);\n * @class\n * @memberof PIXI\n */\nexport class TickerPlugin\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = ExtensionType.Application;\n\n    static start: () => void;\n    static stop: () => void;\n    static _ticker: Ticker;\n    static ticker: Ticker;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    static init(options?: GlobalMixins.IApplicationOptions): void\n    {\n        // Set default\n        options = Object.assign({\n            autoStart: true,\n            sharedTicker: false,\n        }, options);\n\n        // Create ticker setter\n        Object.defineProperty(this, 'ticker',\n            {\n                set(ticker)\n                {\n                    if (this._ticker)\n                    {\n                        this._ticker.remove(this.render, this);\n                    }\n                    this._ticker = ticker;\n                    if (ticker)\n                    {\n                        ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n                    }\n                },\n                get()\n                {\n                    return this._ticker;\n                },\n            });\n\n        /**\n         * Convenience method for stopping the render.\n         * @method\n         * @memberof PIXI.Application\n         * @instance\n         */\n        this.stop = (): void =>\n        {\n            this._ticker.stop();\n        };\n\n        /**\n         * Convenience method for starting the render.\n         * @method\n         * @memberof PIXI.Application\n         * @instance\n         */\n        this.start = (): void =>\n        {\n            this._ticker.start();\n        };\n\n        /**\n         * Internal reference to the ticker.\n         * @type {PIXI.Ticker}\n         * @name _ticker\n         * @memberof PIXI.Application#\n         * @private\n         */\n        this._ticker = null;\n\n        /**\n         * Ticker for doing render updates.\n         * @type {PIXI.Ticker}\n         * @name ticker\n         * @memberof PIXI.Application#\n         * @default PIXI.Ticker.shared\n         */\n        this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n\n        // Start the rendering\n        if (options.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Clean up the ticker, scoped to application.\n     * @static\n     * @private\n     */\n    static destroy(): void\n    {\n        if (this._ticker)\n        {\n            const oldTicker = this._ticker;\n\n            this.ticker = null;\n            oldTicker.destroy();\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["__assign", "arguments", "ExtensionType", "extensions", "UPDATE_PRIORITY", "TickerListener", "Ticker", "TickerPlugin"]
}
