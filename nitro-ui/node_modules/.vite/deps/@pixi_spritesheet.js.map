{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/@pixi+spritesheet@6.5.10_@pixi+core@6.5.10_@pixi+loaders@6.5.10_@pixi+math@6.5.10_@pixi+utils@6.5.10/node_modules/@pixi/spritesheet/src/Spritesheet.ts", "../../../../node_modules/.pnpm/@pixi+spritesheet@6.5.10_@pixi+core@6.5.10_@pixi+loaders@6.5.10_@pixi+math@6.5.10_@pixi+utils@6.5.10/node_modules/@pixi/spritesheet/src/SpritesheetLoader.ts"],
  "sourcesContent": ["import { Rectangle } from '@pixi/math';\nimport { Texture, BaseTexture } from '@pixi/core';\nimport { deprecation, getResolutionOfUrl } from '@pixi/utils';\nimport type { Dict } from '@pixi/utils';\nimport type { ImageResource } from '@pixi/core';\nimport type { IPointData } from '@pixi/math';\n\n/** Represents the JSON data for a spritesheet atlas. */\nexport interface ISpritesheetFrameData\n{\n    frame: {\n        x: number;\n        y: number;\n        w: number;\n        h: number;\n    };\n    trimmed?: boolean;\n    rotated?: boolean;\n    sourceSize?: {\n        w: number;\n        h: number;\n    };\n    spriteSourceSize?: {\n        x: number;\n        y: number;\n    };\n    anchor?: IPointData;\n}\n\n/** Atlas format. */\nexport interface ISpritesheetData\n{\n    frames: Dict<ISpritesheetFrameData>;\n    animations?: Dict<string[]>;\n    meta: {\n        scale: string;\n        // eslint-disable-next-line camelcase\n        related_multi_packs?: string[];\n    };\n}\n\n/**\n * Utility class for maintaining reference to a collection\n * of Textures on a single Spritesheet.\n *\n * To access a sprite sheet from your code you may pass its JSON data file to Pixi's loader:\n *\n * ```js\n * PIXI.Loader.shared.add(\"images/spritesheet.json\").load(setup);\n *\n * function setup() {\n *   let sheet = PIXI.Loader.shared.resources[\"images/spritesheet.json\"].spritesheet;\n *   ...\n * }\n * ```\n *\n * Alternately, you may circumvent the loader by instantiating the Spritesheet directly:\n * ```js\n * const sheet = new PIXI.Spritesheet(texture, spritesheetData);\n * await sheet.parse();\n * console.log('Spritesheet ready to use!');\n * ```\n *\n * With the `sheet.textures` you can create Sprite objects,`sheet.animations` can be used to create an AnimatedSprite.\n *\n * Sprite sheets can be packed using tools like {@link https://codeandweb.com/texturepacker|TexturePacker},\n * {@link https://renderhjs.net/shoebox/|Shoebox} or {@link https://github.com/krzysztof-o/spritesheet.js|Spritesheet.js}.\n * Default anchor points (see {@link PIXI.Texture#defaultAnchor}) and grouping of animation sprites are currently only\n * supported by TexturePacker.\n * @memberof PIXI\n */\nexport class Spritesheet\n{\n    /** The maximum number of Textures to build per process. */\n    static readonly BATCH_SIZE = 1000;\n\n    /** For multi-packed spritesheets, this contains a reference to all the other spritesheets it depends on. */\n    public linkedSheets: Spritesheet[] = [];\n\n    /** Reference to ths source texture. */\n    public baseTexture: BaseTexture;\n\n    /**\n     * A map containing all textures of the sprite sheet.\n     * Can be used to create a {@link PIXI.Sprite|Sprite}:\n     * ```js\n     * new PIXI.Sprite(sheet.textures[\"image.png\"]);\n     * ```\n     */\n    public textures: Dict<Texture>;\n\n    /**\n     * A map containing the textures for each animation.\n     * Can be used to create an {@link PIXI.AnimatedSprite|AnimatedSprite}:\n     * ```js\n     * new PIXI.AnimatedSprite(sheet.animations[\"anim_name\"])\n     * ```\n     */\n    public animations: Dict<Texture[]>;\n\n    /**\n     * Reference to the original JSON data.\n     * @type {object}\n     */\n    public data: ISpritesheetData;\n\n    /** The resolution of the spritesheet. */\n    public resolution: number;\n\n    /**\n     * Reference to original source image from the Loader. This reference is retained so we\n     * can destroy the Texture later on. It is never used internally.\n     */\n    private _texture: Texture;\n\n    /**\n     * Map of spritesheet frames.\n     * @type {object}\n     */\n    private _frames: Dict<ISpritesheetFrameData>;\n\n    /** Collection of frame names. */\n    private _frameKeys: string[];\n\n    /** Current batch index being processed. */\n    private _batchIndex: number;\n\n    /**\n     * Callback when parse is completed.\n     * @type {Function}\n     */\n    private _callback: (textures: Dict<Texture>) => void;\n\n    /**\n     * @param texture - Reference to the source BaseTexture object.\n     * @param {object} data - Spritesheet image data.\n     * @param resolutionFilename - The filename to consider when determining\n     *        the resolution of the spritesheet. If not provided, the imageUrl will\n     *        be used on the BaseTexture.\n     */\n    constructor(texture: BaseTexture | Texture, data: ISpritesheetData, resolutionFilename: string = null)\n    {\n        this._texture = texture instanceof Texture ? texture : null;\n        this.baseTexture = texture instanceof BaseTexture ? texture : this._texture.baseTexture;\n        this.textures = {};\n        this.animations = {};\n        this.data = data;\n\n        const resource = this.baseTexture.resource as ImageResource;\n\n        this.resolution = this._updateResolution(resolutionFilename || (resource ? resource.url : null));\n        this._frames = this.data.frames;\n        this._frameKeys = Object.keys(this._frames);\n        this._batchIndex = 0;\n        this._callback = null;\n    }\n\n    /**\n     * Generate the resolution from the filename or fallback\n     * to the meta.scale field of the JSON data.\n     * @param resolutionFilename - The filename to use for resolving\n     *        the default resolution.\n     * @returns Resolution to use for spritesheet.\n     */\n    private _updateResolution(resolutionFilename: string = null): number\n    {\n        const { scale } = this.data.meta;\n\n        // Use a defaultValue of `null` to check if a url-based resolution is set\n        let resolution = getResolutionOfUrl(resolutionFilename, null);\n\n        // No resolution found via URL\n        if (resolution === null)\n        {\n            // Use the scale value or default to 1\n            resolution = scale !== undefined ? parseFloat(scale) : 1;\n        }\n\n        // For non-1 resolutions, update baseTexture\n        if (resolution !== 1)\n        {\n            this.baseTexture.setResolution(resolution);\n        }\n\n        return resolution;\n    }\n\n    /**\n     * Parser spritesheet from loaded data. This is done asynchronously\n     * to prevent creating too many Texture within a single process.\n     * @method PIXI.Spritesheet#parse\n     */\n    public parse(): Promise<Dict<Texture>>;\n\n    /**\n     * Please use the Promise-based version of this function.\n     * @method PIXI.Spritesheet#parse\n     * @deprecated since version 6.5.0\n     * @param {Function} callback - Callback when complete returns\n     *        a map of the Textures for this spritesheet.\n     */\n    public parse(callback?: (textures?: Dict<Texture>) => void): void;\n\n    /** @ignore */\n    public parse(callback?: (textures?: Dict<Texture>) => void): Promise<Dict<Texture>>\n    {\n        // #if _DEBUG\n        if (callback)\n        {\n            deprecation('6.5.0', 'Spritesheet.parse callback is deprecated, use the return Promise instead.');\n        }\n        // #endif\n\n        return new Promise((resolve) =>\n        {\n            this._callback = (textures: Dict<Texture>) =>\n            {\n                callback?.(textures);\n                resolve(textures);\n            };\n            this._batchIndex = 0;\n\n            if (this._frameKeys.length <= Spritesheet.BATCH_SIZE)\n            {\n                this._processFrames(0);\n                this._processAnimations();\n                this._parseComplete();\n            }\n            else\n            {\n                this._nextBatch();\n            }\n        });\n    }\n\n    /**\n     * Process a batch of frames\n     * @param initialFrameIndex - The index of frame to start.\n     */\n    private _processFrames(initialFrameIndex: number): void\n    {\n        let frameIndex = initialFrameIndex;\n        const maxFrames = Spritesheet.BATCH_SIZE;\n\n        while (frameIndex - initialFrameIndex < maxFrames && frameIndex < this._frameKeys.length)\n        {\n            const i = this._frameKeys[frameIndex];\n            const data = this._frames[i];\n            const rect = data.frame;\n\n            if (rect)\n            {\n                let frame = null;\n                let trim = null;\n                const sourceSize = data.trimmed !== false && data.sourceSize\n                    ? data.sourceSize : data.frame;\n\n                const orig = new Rectangle(\n                    0,\n                    0,\n                    Math.floor(sourceSize.w) / this.resolution,\n                    Math.floor(sourceSize.h) / this.resolution\n                );\n\n                if (data.rotated)\n                {\n                    frame = new Rectangle(\n                        Math.floor(rect.x) / this.resolution,\n                        Math.floor(rect.y) / this.resolution,\n                        Math.floor(rect.h) / this.resolution,\n                        Math.floor(rect.w) / this.resolution\n                    );\n                }\n                else\n                {\n                    frame = new Rectangle(\n                        Math.floor(rect.x) / this.resolution,\n                        Math.floor(rect.y) / this.resolution,\n                        Math.floor(rect.w) / this.resolution,\n                        Math.floor(rect.h) / this.resolution\n                    );\n                }\n\n                //  Check to see if the sprite is trimmed\n                if (data.trimmed !== false && data.spriteSourceSize)\n                {\n                    trim = new Rectangle(\n                        Math.floor(data.spriteSourceSize.x) / this.resolution,\n                        Math.floor(data.spriteSourceSize.y) / this.resolution,\n                        Math.floor(rect.w) / this.resolution,\n                        Math.floor(rect.h) / this.resolution\n                    );\n                }\n\n                this.textures[i] = new Texture(\n                    this.baseTexture,\n                    frame,\n                    orig,\n                    trim,\n                    data.rotated ? 2 : 0,\n                    data.anchor\n                );\n\n                // lets also add the frame to pixi's global cache for 'from' and 'fromLoader' functions\n                Texture.addToCache(this.textures[i], i);\n            }\n\n            frameIndex++;\n        }\n    }\n\n    /** Parse animations config. */\n    private _processAnimations(): void\n    {\n        const animations = this.data.animations || {};\n\n        for (const animName in animations)\n        {\n            this.animations[animName] = [];\n            for (let i = 0; i < animations[animName].length; i++)\n            {\n                const frameName = animations[animName][i];\n\n                this.animations[animName].push(this.textures[frameName]);\n            }\n        }\n    }\n\n    /** The parse has completed. */\n    private _parseComplete(): void\n    {\n        const callback = this._callback;\n\n        this._callback = null;\n        this._batchIndex = 0;\n        callback.call(this, this.textures);\n    }\n\n    /** Begin the next batch of textures. */\n    private _nextBatch(): void\n    {\n        this._processFrames(this._batchIndex * Spritesheet.BATCH_SIZE);\n        this._batchIndex++;\n        setTimeout(() =>\n        {\n            if (this._batchIndex * Spritesheet.BATCH_SIZE < this._frameKeys.length)\n            {\n                this._nextBatch();\n            }\n            else\n            {\n                this._processAnimations();\n                this._parseComplete();\n            }\n        }, 0);\n    }\n\n    /**\n     * Destroy Spritesheet and don't use after this.\n     * @param {boolean} [destroyBase=false] - Whether to destroy the base texture as well\n     */\n    public destroy(destroyBase = false): void\n    {\n        for (const i in this.textures)\n        {\n            this.textures[i].destroy();\n        }\n        this._frames = null;\n        this._frameKeys = null;\n        this.data = null;\n        this.textures = null;\n        if (destroyBase)\n        {\n            this._texture?.destroy();\n            this.baseTexture.destroy();\n        }\n        this._texture = null;\n        this.baseTexture = null;\n        this.linkedSheets = [];\n    }\n}\n\n/**\n * Reference to Spritesheet object created.\n * @member {PIXI.Spritesheet} spritesheet\n * @memberof PIXI.LoaderResource\n * @instance\n */\n\n/**\n * Dictionary of textures from Spritesheet.\n * @member {Object<string, PIXI.Texture>} textures\n * @memberof PIXI.LoaderResource\n * @instance\n */\n", "import { url } from '@pixi/utils';\nimport { Spritesheet } from './Spritesheet';\nimport { LoaderResource } from '@pixi/loaders';\nimport type { Loader } from '@pixi/loaders';\nimport type { ExtensionMetadata } from '@pixi/core';\nimport { ExtensionType } from '@pixi/core';\n\n/**\n * {@link PIXI.Loader} middleware for loading texture atlases that have been created with\n * TexturePacker or similar JSON-based spritesheet.\n *\n * This middleware automatically generates Texture resources.\n *\n * If you're using Webpack or other bundlers and plan on bundling the atlas' JSON,\n * use the {@link PIXI.Spritesheet} class to directly parse the JSON.\n *\n * The Loader's image Resource name is automatically appended with `\"_image\"`.\n * If a Resource with this name is already loaded, the Loader will skip parsing the\n * Spritesheet. The code below will generate an internal Loader Resource called `\"myatlas_image\"`.\n * @example\n * loader.add('myatlas', 'path/to/myatlas.json');\n * loader.load(() => {\n *   loader.resources.myatlas; // atlas JSON resource\n *   loader.resources.myatlas_image; // atlas Image resource\n * });\n * @memberof PIXI\n */\nexport class SpritesheetLoader\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = ExtensionType.Loader;\n\n    /**\n     * Called after a resource is loaded.\n     * @see PIXI.Loader.loaderMiddleware\n     * @param resource\n     * @param next\n     */\n    static use(resource: LoaderResource, next: (...args: unknown[]) => void): void\n    {\n        // because this is middleware, it execute in loader context. `this` = loader\n        const loader = (this as any) as Loader;\n        const imageResourceName = `${resource.name}_image`;\n\n        // skip if no data, its not json, it isn't spritesheet data, or the image resource already exists\n        if (!resource.data\n            || resource.type !== LoaderResource.TYPE.JSON\n            || !resource.data.frames\n            || loader.resources[imageResourceName]\n        )\n        {\n            next();\n\n            return;\n        }\n\n        // Check and add the multi atlas\n        // Heavily influenced and based on https://github.com/rocket-ua/pixi-tps-loader/blob/master/src/ResourceLoader.js\n        // eslint-disable-next-line camelcase\n        const multiPacks = resource.data?.meta?.related_multi_packs;\n\n        if (Array.isArray(multiPacks))\n        {\n            for (const item of multiPacks)\n            {\n                if (typeof item !== 'string')\n                {\n                    continue;\n                }\n\n                const itemName = item.replace('.json', '');\n                const itemUrl = url.resolve(resource.url.replace(loader.baseUrl, ''), item);\n\n                // Check if the file wasn't already added as multipacks are redundant\n                if (loader.resources[itemName]\n                    || Object.values(loader.resources).some((r) => url.format(url.parse(r.url)) === itemUrl))\n                {\n                    continue;\n                }\n\n                const options = {\n                    crossOrigin: resource.crossOrigin,\n                    loadType: LoaderResource.LOAD_TYPE.XHR,\n                    xhrType: LoaderResource.XHR_RESPONSE_TYPE.JSON,\n                    parentResource: resource,\n                    metadata: resource.metadata\n                };\n\n                loader.add(itemName, itemUrl, options);\n            }\n        }\n\n        const loadOptions = {\n            crossOrigin: resource.crossOrigin,\n            metadata: resource.metadata.imageMetadata,\n            parentResource: resource,\n        };\n\n        const resourcePath = SpritesheetLoader.getResourcePath(resource, loader.baseUrl);\n\n        // load the image for this sheet\n        loader.add(imageResourceName, resourcePath, loadOptions, function onImageLoad(res: LoaderResource)\n        {\n            if (res.error)\n            {\n                next(res.error);\n\n                return;\n            }\n\n            const spritesheet = new Spritesheet(\n                res.texture,\n                resource.data,\n                resource.url\n            );\n\n            spritesheet.parse().then(() =>\n            {\n                resource.spritesheet = spritesheet;\n                resource.textures = spritesheet.textures;\n                next();\n            });\n        });\n    }\n\n    /**\n     * Get the spritesheets root path\n     * @param resource - Resource to check path\n     * @param baseUrl - Base root url\n     */\n    static getResourcePath(resource: LoaderResource, baseUrl: string): string\n    {\n        // Prepend url path unless the resource image is a data url\n        if (resource.isDataUrl)\n        {\n            return resource.data.meta.image;\n        }\n\n        return url.resolve(resource.url.replace(baseUrl, ''), resource.data.meta.image);\n    }\n}\n"],
  "mappings": "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",
  "names": ["Spritesheet", "SpritesheetLoader", "item"]
}
