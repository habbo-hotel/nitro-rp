{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/@pixi+mixin-cache-as-bitmap@6.5.10_@pixi+constants@6.5.10_@pixi+core@6.5.10_@pixi+display@6.5_pv2lep4s4u4fmzcsq52ko2njoy/node_modules/@pixi/mixin-cache-as-bitmap/src/index.ts"],
  "sourcesContent": ["import type { Renderer, MaskData, AbstractRenderer } from '@pixi/core';\nimport { Texture, BaseTexture, RenderTexture } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport type { Container, IDestroyOptions } from '@pixi/display';\nimport { DisplayObject } from '@pixi/display';\nimport type { IPointData, Rectangle } from '@pixi/math';\nimport { Matrix } from '@pixi/math';\nimport { uid } from '@pixi/utils';\nimport { settings } from '@pixi/settings';\nimport { MSAA_QUALITY } from '@pixi/constants';\n\n// Don't import CanvasRender to remove dependency on this optional package\n// this type should satisify these requirements for cacheAsBitmap types\ninterface CanvasRenderer extends AbstractRenderer\n{\n    context: CanvasRenderingContext2D;\n}\n\nconst _tempMatrix = new Matrix();\n\nDisplayObject.prototype._cacheAsBitmap = false;\nDisplayObject.prototype._cacheData = null;\nDisplayObject.prototype._cacheAsBitmapResolution = null;\nDisplayObject.prototype._cacheAsBitmapMultisample = MSAA_QUALITY.NONE;\n\n// figured there's no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n/**\n * @class\n * @ignore\n * @private\n */\nexport class CacheData\n{\n    public textureCacheId: string;\n    public originalRender: (renderer: Renderer) => void;\n    public originalRenderCanvas: (renderer: AbstractRenderer) => void;\n    public originalCalculateBounds: () => void;\n    public originalGetLocalBounds: (rect?: Rectangle) => Rectangle;\n    public originalUpdateTransform: () => void;\n    public originalDestroy: (options?: IDestroyOptions | boolean) => void;\n    public originalMask: Container | MaskData;\n    public originalFilterArea: Rectangle;\n    public originalContainsPoint: (point: IPointData) => boolean;\n    public sprite: Sprite;\n\n    constructor()\n    {\n        this.textureCacheId = null;\n\n        this.originalRender = null;\n        this.originalRenderCanvas = null;\n        this.originalCalculateBounds = null;\n        this.originalGetLocalBounds = null;\n\n        this.originalUpdateTransform = null;\n        this.originalDestroy = null;\n        this.originalMask = null;\n        this.originalFilterArea = null;\n        this.originalContainsPoint = null;\n        this.sprite = null;\n    }\n}\n\nObject.defineProperties(DisplayObject.prototype, {\n    /**\n     * The resolution to use for cacheAsBitmap. By default this will use the renderer's resolution\n     * but can be overriden for performance. Lower values will reduce memory usage at the expense\n     * of render quality. A falsey value of `null` or `0` will default to the renderer's resolution.\n     * If `cacheAsBitmap` is set to `true`, this will re-render with the new resolution.\n     * @member {number} cacheAsBitmapResolution\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     */\n    cacheAsBitmapResolution: {\n        get(): number\n        {\n            return this._cacheAsBitmapResolution;\n        },\n        set(resolution: number): void\n        {\n            if (resolution === this._cacheAsBitmapResolution)\n            {\n                return;\n            }\n\n            this._cacheAsBitmapResolution = resolution;\n\n            if (this.cacheAsBitmap)\n            {\n                // Toggle to re-render at the new resolution\n                this.cacheAsBitmap = false;\n                this.cacheAsBitmap = true;\n            }\n        },\n    },\n\n    /**\n     * The number of samples to use for cacheAsBitmap. If set to `null`, the renderer's\n     * sample count is used.\n     * If `cacheAsBitmap` is set to `true`, this will re-render with the new number of samples.\n     * @member {number} cacheAsBitmapMultisample\n     * @memberof PIXI.DisplayObject#\n     * @default PIXI.MSAA_QUALITY.NONE\n     */\n    cacheAsBitmapMultisample: {\n        get(): MSAA_QUALITY\n        {\n            return this._cacheAsBitmapMultisample;\n        },\n        set(multisample: MSAA_QUALITY): void\n        {\n            if (multisample === this._cacheAsBitmapMultisample)\n            {\n                return;\n            }\n\n            this._cacheAsBitmapMultisample = multisample;\n\n            if (this.cacheAsBitmap)\n            {\n                // Toggle to re-render with new multisample\n                this.cacheAsBitmap = false;\n                this.cacheAsBitmap = true;\n            }\n        },\n    },\n\n    /**\n     * Set this to true if you want this display object to be cached as a bitmap.\n     * This basically takes a snap shot of the display object as it is at that moment. It can\n     * provide a performance benefit for complex static displayObjects.\n     * To remove simply set this property to `false`\n     *\n     * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n     * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    cacheAsBitmap: {\n        get(): CacheData\n        {\n            return this._cacheAsBitmap;\n        },\n        set(value: CacheData): void\n        {\n            if (this._cacheAsBitmap === value)\n            {\n                return;\n            }\n\n            this._cacheAsBitmap = value;\n\n            let data: CacheData;\n\n            if (value)\n            {\n                if (!this._cacheData)\n                {\n                    this._cacheData = new CacheData();\n                }\n\n                data = this._cacheData;\n\n                data.originalRender = this.render;\n                data.originalRenderCanvas = this.renderCanvas;\n\n                data.originalUpdateTransform = this.updateTransform;\n                data.originalCalculateBounds = this.calculateBounds;\n                data.originalGetLocalBounds = this.getLocalBounds;\n\n                data.originalDestroy = this.destroy;\n\n                data.originalContainsPoint = this.containsPoint;\n\n                data.originalMask = this._mask;\n                data.originalFilterArea = this.filterArea;\n\n                this.render = this._renderCached;\n                this.renderCanvas = this._renderCachedCanvas;\n\n                this.destroy = this._cacheAsBitmapDestroy;\n            }\n            else\n            {\n                data = this._cacheData;\n\n                if (data.sprite)\n                {\n                    this._destroyCachedDisplayObject();\n                }\n\n                this.render = data.originalRender;\n                this.renderCanvas = data.originalRenderCanvas;\n                this.calculateBounds = data.originalCalculateBounds;\n                this.getLocalBounds = data.originalGetLocalBounds;\n\n                this.destroy = data.originalDestroy;\n\n                this.updateTransform = data.originalUpdateTransform;\n                this.containsPoint = data.originalContainsPoint;\n\n                this._mask = data.originalMask;\n                this.filterArea = data.originalFilterArea;\n            }\n        },\n    },\n});\n\n/**\n * Renders a cached version of the sprite with WebGL\n * @private\n * @method _renderCached\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCached = function _renderCached(renderer: Renderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObject(renderer);\n\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._render(renderer);\n};\n\n/**\n * Prepares the WebGL renderer to cache the sprite\n * @private\n * @method _initCachedDisplayObject\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer: Renderer): void\n{\n    if (this._cacheData && this._cacheData.sprite)\n    {\n        return;\n    }\n\n    // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n    renderer.batch.flush();\n    // this.filters= [];\n\n    // next we find the dimensions of the untransformed object\n    // this function also calls updatetransform on all its children as part of the measuring.\n    // This means we don't need to update the transform again in this function\n    // TODO pass an object to clone too? saves having to create a new one each time!\n    const bounds = (this as Container).getLocalBounds(null, true).clone();\n\n    // add some padding!\n    if (this.filters && this.filters.length)\n    {\n        const padding = this.filters[0].padding;\n\n        bounds.pad(padding);\n    }\n\n    bounds.ceil(settings.RESOLUTION);\n\n    // for now we cache the current renderTarget that the WebGL renderer is currently using.\n    // this could be more elegant..\n    const cachedRenderTexture = renderer.renderTexture.current;\n    const cachedSourceFrame = renderer.renderTexture.sourceFrame.clone();\n    const cachedDestinationFrame = renderer.renderTexture.destinationFrame.clone();\n    const cachedProjectionTransform = renderer.projection.transform;\n\n    // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n    // const stack = renderer.filterManager.filterStack;\n\n    // this renderTexture will be used to store the cached DisplayObject\n    const renderTexture = RenderTexture.create({\n        width: bounds.width,\n        height: bounds.height,\n        resolution: this.cacheAsBitmapResolution || renderer.resolution,\n        multisample: this.cacheAsBitmapMultisample ?? renderer.multisample,\n    });\n\n    const textureCacheId = `cacheAsBitmap_${uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = this.transform.localTransform.copyTo(_tempMatrix).invert().translate(-bounds.x, -bounds.y);\n\n    // set all properties to there original so we can render to a texture\n    this.render = this._cacheData.originalRender;\n\n    renderer.render(this, { renderTexture, clear: true, transform: m, skipUpdateTransform: false });\n    renderer.framebuffer.blit();\n\n    // now restore the state be setting the new properties\n    renderer.projection.transform = cachedProjectionTransform;\n    renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame, cachedDestinationFrame);\n\n    // renderer.filterManager.filterStack = stack;\n\n    this.render = this._renderCached;\n    // the rest is the same as for Canvas\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n    this.alpha = cacheAlpha;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.enableTempParent();\n        this.updateTransform();\n        this.disableTempParent(null);\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Renders a cached version of the sprite with canvas\n * @private\n * @method _renderCachedCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer: AbstractRenderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObjectCanvas(renderer);\n\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._renderCanvas(renderer);\n};\n\n// TODO this can be the same as the WebGL version.. will need to do a little tweaking first though..\n/**\n * Prepares the Canvas renderer to cache the sprite\n * @private\n * @method _initCachedDisplayObjectCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(\n    renderer: CanvasRenderer\n): void\n{\n    if (this._cacheData && this._cacheData.sprite)\n    {\n        return;\n    }\n\n    // get bounds actually transforms the object for us already!\n    const bounds = (this as Container).getLocalBounds(null, true);\n\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    const cachedRenderTarget = renderer.context;\n    const cachedProjectionTransform = (renderer as any)._projTransform;\n\n    bounds.ceil(settings.RESOLUTION);\n\n    const renderTexture = RenderTexture.create({ width: bounds.width, height: bounds.height });\n\n    const textureCacheId = `cacheAsBitmap_${uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = _tempMatrix;\n\n    this.transform.localTransform.copyTo(m);\n    m.invert();\n\n    m.tx -= bounds.x;\n    m.ty -= bounds.y;\n\n    // m.append(this.transform.worldTransform.)\n    // set all properties to there original so we can render to a texture\n    this.renderCanvas = this._cacheData.originalRenderCanvas;\n\n    renderer.render(this, { renderTexture, clear: true, transform: m, skipUpdateTransform: false });\n    // now restore the state be setting the new properties\n    renderer.context = cachedRenderTarget;\n    (renderer as any)._projTransform = cachedProjectionTransform;\n\n    this.renderCanvas = this._renderCachedCanvas;\n    // the rest is the same as for WebGL\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n    this.alpha = cacheAlpha;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.parent = (renderer as any)._tempDisplayObjectParent;\n        this.updateTransform();\n        this.parent = null;\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Calculates the bounds of the cached sprite\n * @private\n * @method\n */\nDisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds(): void\n{\n    this._bounds.clear();\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    (this._cacheData.sprite as any)._calculateBounds();\n    this._bounds.updateID = (this as any)._boundsID;\n};\n\n/**\n * Gets the bounds of the cached sprite.\n * @private\n * @method\n * @returns {Rectangle} The local bounds.\n */\nDisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds(): Rectangle\n{\n    return this._cacheData.sprite.getLocalBounds(null);\n};\n\n/**\n * Destroys the cached sprite.\n * @private\n * @method\n */\nDisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject(): void\n{\n    this._cacheData.sprite._texture.destroy(true);\n    this._cacheData.sprite = null;\n\n    BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n    Texture.removeFromCache(this._cacheData.textureCacheId);\n\n    this._cacheData.textureCacheId = null;\n};\n\n/**\n * Destroys the cached object.\n * @private\n * @method\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\nDisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options?: IDestroyOptions | boolean): void\n{\n    this.cacheAsBitmap = false;\n    this.destroy(options);\n};\n"],
  "mappings": "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",
  "names": ["CacheData"]
}
