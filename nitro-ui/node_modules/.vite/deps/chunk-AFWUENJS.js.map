{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/@pixi+runner@6.5.10/node_modules/@pixi/runner/src/Runner.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/settings.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/textures/resources/autoDetectResource.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/node_modules/tslib/tslib.es6.js", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/textures/resources/Resource.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/textures/resources/BufferResource.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/textures/BaseTexture.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/textures/resources/AbstractMultiResource.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/textures/resources/ArrayResource.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/textures/resources/BaseImageResource.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/textures/resources/CanvasResource.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/textures/resources/CubeResource.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/textures/resources/ImageResource.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/textures/resources/SVGResource.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/textures/resources/VideoResource.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/textures/resources/ImageBitmapResource.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/textures/resources/index.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/textures/resources/DepthResource.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/framebuffer/Framebuffer.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/renderTexture/BaseRenderTexture.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/textures/TextureUvs.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/textures/Texture.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/renderTexture/RenderTexture.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/renderTexture/RenderTexturePool.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/geometry/Attribute.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/geometry/Buffer.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/geometry/utils/interleaveTypedArrays.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/geometry/Geometry.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/utils/Quad.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/utils/QuadUv.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/shader/UniformGroup.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/filters/FilterState.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/filters/FilterSystem.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/batch/ObjectRenderer.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/batch/BatchSystem.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/context/ContextSystem.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/framebuffer/GLFramebuffer.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/framebuffer/FramebufferSystem.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/geometry/GeometrySystem.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/mask/MaskData.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/shader/utils/compileShader.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/shader/utils/logProgramError.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/shader/utils/defaultValue.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/shader/utils/getTestContext.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/shader/utils/getMaxFragmentPrecision.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/shader/utils/setPrecision.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/shader/utils/mapSize.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/shader/utils/mapType.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/shader/utils/uniformParsers.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/shader/utils/generateUniformsSync.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/shader/utils/checkMaxIfStatementsInShader.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/shader/utils/unsafeEvalSupported.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/shader/Program.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/shader/Shader.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/state/State.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/filters/Filter.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/textures/TextureMatrix.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/filters/spriteMask/SpriteMaskFilter.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/mask/MaskSystem.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/mask/AbstractMaskSystem.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/mask/ScissorSystem.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/mask/StencilSystem.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/projection/ProjectionSystem.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/renderTexture/RenderTextureSystem.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/shader/utils/generateUniformBufferSync.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/shader/GLProgram.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/shader/utils/getAttributeData.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/shader/utils/getUniformData.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/shader/utils/generateProgram.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/shader/ShaderSystem.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/state/utils/mapWebGLBlendModesToPixi.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/state/StateSystem.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/textures/TextureGCSystem.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/textures/utils/mapTypeAndFormatToInternalFormat.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/textures/GLTexture.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/textures/TextureSystem.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/AbstractRenderer.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/geometry/GLBuffer.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/geometry/BufferSystem.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/Renderer.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/autoDetectRenderer.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/fragments/index.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/ISystem.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/batch/BatchDrawCall.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/batch/BatchTextureArray.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/geometry/ViewableBuffer.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/batch/AbstractBatchRenderer.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/batch/BatchShaderGenerator.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/batch/BatchGeometry.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/batch/BatchPluginFactory.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/deprecations.ts", "../../../../node_modules/.pnpm/@pixi+core@6.5.10_@pixi+constants@6.5.10_@pixi+extensions@6.5.10_@pixi+math@6.5.10_@pixi+runn_phmzurdknhd7ssi4dkwnclb2yu/node_modules/@pixi/core/src/index.ts"],
  "sourcesContent": ["/**\n * A Runner is a highly performant and simple alternative to signals. Best used in situations\n * where events are dispatched to many objects at high frequency (say every frame!)\n *\n *\n * like a signal..\n * ```\n * import { Runner } from '@pixi/runner';\n *\n * const myObject = {\n *     loaded: new Runner('loaded')\n * }\n *\n * const listener = {\n *     loaded: function(){\n *         // thin\n *     }\n * }\n *\n * myObject.loaded.add(listener);\n *\n * myObject.loaded.emit();\n * ```\n *\n * Or for handling calling the same function on many items\n * ```\n * import { Runner } from '@pixi/runner';\n *\n * const myGame = {\n *     update: new Runner('update')\n * }\n *\n * const gameObject = {\n *     update: function(time){\n *         // update my gamey state\n *     }\n * }\n *\n * myGame.update.add(gameObject);\n *\n * myGame.update.emit(time);\n * ```\n * @memberof PIXI\n */\nexport class Runner\n{\n    public items: any[];\n    private _name: string;\n    private _aliasCount: number;\n\n    /**\n     * @param name - The function name that will be executed on the listeners added to this Runner.\n     */\n    constructor(name: string)\n    {\n        this.items = [];\n        this._name = name;\n        this._aliasCount = 0;\n    }\n\n    /* eslint-disable jsdoc/require-param, jsdoc/check-param-names */\n    /**\n     * Dispatch/Broadcast Runner to all listeners added to the queue.\n     * @param {...any} params - (optional) parameters to pass to each listener\n     */\n    /*  eslint-enable jsdoc/require-param, jsdoc/check-param-names */\n    public emit(a0?: unknown, a1?: unknown, a2?: unknown, a3?: unknown,\n        a4?: unknown, a5?: unknown, a6?: unknown, a7?: unknown): this\n    {\n        if (arguments.length > 8)\n        {\n            throw new Error('max arguments reached');\n        }\n\n        const { name, items } = this;\n\n        this._aliasCount++;\n\n        for (let i = 0, len = items.length; i < len; i++)\n        {\n            items[i][name](a0, a1, a2, a3, a4, a5, a6, a7);\n        }\n\n        if (items === this.items)\n        {\n            this._aliasCount--;\n        }\n\n        return this;\n    }\n\n    private ensureNonAliasedItems(): void\n    {\n        if (this._aliasCount > 0 && this.items.length > 1)\n        {\n            this._aliasCount = 0;\n            this.items = this.items.slice(0);\n        }\n    }\n\n    /**\n     * Add a listener to the Runner\n     *\n     * Runners do not need to have scope or functions passed to them.\n     * All that is required is to pass the listening object and ensure that it has contains a function that has the same name\n     * as the name provided to the Runner when it was created.\n     *\n     * Eg A listener passed to this Runner will require a 'complete' function.\n     *\n     * ```\n     * import { Runner } from '@pixi/runner';\n     *\n     * const complete = new Runner('complete');\n     * ```\n     *\n     * The scope used will be the object itself.\n     * @param {any} item - The object that will be listening.\n     */\n    public add(item: unknown): this\n    {\n        if ((item as any)[this._name])\n        {\n            this.ensureNonAliasedItems();\n            this.remove(item);\n            this.items.push(item);\n        }\n\n        return this;\n    }\n\n    /**\n     * Remove a single listener from the dispatch queue.\n     * @param {any} item - The listener that you would like to remove.\n     */\n    public remove(item: unknown): this\n    {\n        const index = this.items.indexOf(item);\n\n        if (index !== -1)\n        {\n            this.ensureNonAliasedItems();\n            this.items.splice(index, 1);\n        }\n\n        return this;\n    }\n\n    /**\n     * Check to see if the listener is already in the Runner\n     * @param {any} item - The listener that you would like to check.\n     */\n    public contains(item: unknown): boolean\n    {\n        return this.items.indexOf(item) !== -1;\n    }\n\n    /** Remove all listeners from the Runner */\n    public removeAll(): this\n    {\n        this.ensureNonAliasedItems();\n        this.items.length = 0;\n\n        return this;\n    }\n\n    /** Remove all references, don't use after this. */\n    public destroy(): void\n    {\n        this.removeAll();\n        this.items = null;\n        this._name = null;\n    }\n\n    /**\n     * `true` if there are no this Runner contains no listeners\n     * @readonly\n     */\n    public get empty(): boolean\n    {\n        return this.items.length === 0;\n    }\n\n    /**\n     * The name of the runner.\n     * @readonly\n     */\n    public get name(): string\n    {\n        return this._name;\n    }\n}\n\nObject.defineProperties(Runner.prototype, {\n    /**\n     * Alias for `emit`\n     * @memberof PIXI.Runner#\n     * @method dispatch\n     * @see PIXI.Runner#emit\n     */\n    dispatch: { value: Runner.prototype.emit },\n    /**\n     * Alias for `emit`\n     * @memberof PIXI.Runner#\n     * @method run\n     * @see PIXI.Runner#emit\n     */\n    run: { value: Runner.prototype.emit },\n});\n", "import { settings } from '@pixi/settings';\nimport { ENV } from '@pixi/constants';\nimport { isMobile } from '@pixi/utils';\n\n/**\n * The maximum support for using WebGL. If a device does not\n * support WebGL version, for instance WebGL 2, it will still\n * attempt to fallback support to WebGL 1. If you want to\n * explicitly remove feature support to target a more stable\n * baseline, prefer a lower environment.\n *\n * Due to {@link https://bugs.chromium.org/p/chromium/issues/detail?id=934823|bug in chromium}\n * we disable webgl2 by default for all non-apple mobile devices.\n * @static\n * @name PREFER_ENV\n * @memberof PIXI.settings\n * @type {number}\n * @default PIXI.ENV.WEBGL2\n */\nsettings.PREFER_ENV = isMobile.any ? ENV.WEBGL : ENV.WEBGL2;\n\n/**\n * If set to `true`, *only* Textures and BaseTexture objects stored\n * in the caches ({@link PIXI.utils.TextureCache TextureCache} and\n * {@link PIXI.utils.BaseTextureCache BaseTextureCache}) can be\n * used when calling {@link PIXI.Texture.from Texture.from} or\n * {@link PIXI.BaseTexture.from BaseTexture.from}.\n * Otherwise, these `from` calls throw an exception. Using this property\n * can be useful if you want to enforce preloading all assets with\n * {@link PIXI.Loader Loader}.\n * @static\n * @name STRICT_TEXTURE_CACHE\n * @memberof PIXI.settings\n * @type {boolean}\n * @default false\n */\nsettings.STRICT_TEXTURE_CACHE = false;\n\nexport { settings };\n", "import type { Resource } from './Resource';\n\nimport type { IImageResourceOptions } from './ImageResource';\nimport type { ISize } from '@pixi/math';\nimport type { ICubeResourceOptions } from './CubeResource';\nimport type { ISVGResourceOptions } from './SVGResource';\nimport type { IVideoResourceOptions } from './VideoResource';\n\n/*\n * Allow flexible options for resource plugins\n */\nexport type IResourcePluginOptions = { [key: string]: any };\n\n/*\n * All allowable options for autoDetectResource\n */\nexport type IAutoDetectOptions = ISize\n| ICubeResourceOptions\n| IImageResourceOptions\n| ISVGResourceOptions\n| IVideoResourceOptions\n| IResourcePluginOptions;\n\n/**\n * Shape of supported resource plugins\n * @memberof PIXI\n */\nexport interface IResourcePlugin<R, RO>\n{\n    test(source: unknown, extension: string): boolean;\n    new (source: any, options?: RO): R;\n}\n\n/**\n * Collection of installed resource types, class must extend {@link PIXI.Resource}.\n * @example\n * class CustomResource extends PIXI.Resource {\n *   // MUST have source, options constructor signature\n *   // for auto-detected resources to be created.\n *   constructor(source, options) {\n *     super();\n *   }\n *   upload(renderer, baseTexture, glTexture) {\n *     // upload with GL\n *     return true;\n *   }\n *   // used to auto-detect resource\n *   static test(source, extension) {\n *     return extension === 'xyz'|| source instanceof SomeClass;\n *   }\n * }\n * // Install the new resource type\n * PIXI.INSTALLED.push(CustomResource);\n * @memberof PIXI\n * @type {Array<PIXI.IResourcePlugin>}\n * @static\n * @readonly\n */\nexport const INSTALLED: Array<IResourcePlugin<any, any>> = [];\n\n/**\n * Create a resource element from a single source element. This\n * auto-detects which type of resource to create. All resources that\n * are auto-detectable must have a static `test` method and a constructor\n * with the arguments `(source, options?)`. Currently, the supported\n * resources for auto-detection include:\n *  - {@link PIXI.ImageResource}\n *  - {@link PIXI.CanvasResource}\n *  - {@link PIXI.VideoResource}\n *  - {@link PIXI.SVGResource}\n *  - {@link PIXI.BufferResource}\n * @static\n * @memberof PIXI\n * @function autoDetectResource\n * @param {string|*} source - Resource source, this can be the URL to the resource,\n *        a typed-array (for BufferResource), HTMLVideoElement, SVG data-uri\n *        or any other resource that can be auto-detected. If not resource is\n *        detected, it's assumed to be an ImageResource.\n * @param {object} [options] - Pass-through options to use for Resource\n * @param {number} [options.width] - Width of BufferResource or SVG rasterization\n * @param {number} [options.height] - Height of BufferResource or SVG rasterization\n * @param {boolean} [options.autoLoad=true] - Image, SVG and Video flag to start loading\n * @param {number} [options.scale=1] - SVG source scale. Overridden by width, height\n * @param {boolean} [options.createBitmap=PIXI.settings.CREATE_IMAGE_BITMAP] - Image option to create Bitmap object\n * @param {boolean} [options.crossorigin=true] - Image and Video option to set crossOrigin\n * @param {boolean} [options.autoPlay=true] - Video option to start playing video immediately\n * @param {number} [options.updateFPS=0] - Video option to update how many times a second the\n *        texture should be updated from the video. Leave at 0 to update at every render\n * @returns {PIXI.Resource} The created resource.\n */\nexport function autoDetectResource<R extends Resource, RO>(source: unknown, options?: RO): R\n{\n    if (!source)\n    {\n        return null;\n    }\n\n    let extension = '';\n\n    if (typeof source === 'string')\n    {\n        // search for file extension: period, 3-4 chars, then ?, # or EOL\n        const result = (/\\.(\\w{3,4})(?:$|\\?|#)/i).exec(source);\n\n        if (result)\n        {\n            extension = result[1].toLowerCase();\n        }\n    }\n\n    for (let i = INSTALLED.length - 1; i >= 0; --i)\n    {\n        const ResourcePlugin = INSTALLED[i] as IResourcePlugin<R, RO>;\n\n        if (ResourcePlugin.test && ResourcePlugin.test(source, extension))\n        {\n            return new ResourcePlugin(source, options);\n        }\n    }\n\n    throw new Error('Unrecognized source type to auto-detect Resource');\n}\n", "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n", "import { Runner } from '@pixi/runner';\n\nimport type { BaseTexture } from '../BaseTexture';\nimport type { Renderer } from '../../Renderer';\nimport type { GLTexture } from '../GLTexture';\n\n/**\n * Base resource class for textures that manages validation and uploading, depending on its type.\n *\n * Uploading of a base texture to the GPU is required.\n * @memberof PIXI\n */\nexport abstract class Resource\n{\n    /** The url of the resource */\n    public src: string;\n\n    /**\n     * If resource has been destroyed.\n     * @readonly\n     * @default false\n     */\n    public destroyed: boolean;\n\n    /**\n     * `true` if resource is created by BaseTexture\n     * useful for doing cleanup with BaseTexture destroy\n     * and not cleaning up resources that were created\n     * externally.\n     */\n    public internal: boolean;\n\n    /** Internal width of the resource. */\n    protected _width: number;\n\n    /** Internal height of the resource. */\n    protected _height: number;\n\n    /**\n     * Mini-runner for handling resize events\n     * accepts 2 parameters: width, height\n     * @member {Runner}\n     * @private\n     */\n    protected onResize: Runner; // TODO: Should this be private? It doesn't seem to be used anywhere else.\n\n    /**\n     * Mini-runner for handling update events\n     * @member {Runner}\n     * @private\n     */\n    protected onUpdate: Runner;\n\n    /**\n     * Handle internal errors, such as loading errors\n     * accepts 1 param: error\n     * @member {Runner}\n     * @private\n     */\n    protected onError: Runner;\n\n    /**\n     * @param width - Width of the resource\n     * @param height - Height of the resource\n     */\n    constructor(width = 0, height = 0)\n    {\n        this._width = width;\n        this._height = height;\n\n        this.destroyed = false;\n        this.internal = false;\n\n        this.onResize = new Runner('setRealSize');\n        this.onUpdate = new Runner('update');\n        this.onError = new Runner('onError');\n    }\n\n    /**\n     * Bind to a parent BaseTexture\n     * @param baseTexture - Parent texture\n     */\n    bind(baseTexture: BaseTexture): void\n    {\n        this.onResize.add(baseTexture);\n        this.onUpdate.add(baseTexture);\n        this.onError.add(baseTexture);\n\n        // Call a resize immediate if we already\n        // have the width and height of the resource\n        if (this._width || this._height)\n        {\n            this.onResize.emit(this._width, this._height);\n        }\n    }\n\n    /**\n     * Unbind to a parent BaseTexture\n     * @param baseTexture - Parent texture\n     */\n    unbind(baseTexture: BaseTexture): void\n    {\n        this.onResize.remove(baseTexture);\n        this.onUpdate.remove(baseTexture);\n        this.onError.remove(baseTexture);\n    }\n\n    /**\n     * Trigger a resize event\n     * @param width - X dimension\n     * @param height - Y dimension\n     */\n    resize(width: number, height: number): void\n    {\n        if (width !== this._width || height !== this._height)\n        {\n            this._width = width;\n            this._height = height;\n            this.onResize.emit(width, height);\n        }\n    }\n\n    /**\n     * Has been validated\n     * @readonly\n     */\n    get valid(): boolean\n    {\n        return !!this._width && !!this._height;\n    }\n\n    /** Has been updated trigger event. */\n    update(): void\n    {\n        if (!this.destroyed)\n        {\n            this.onUpdate.emit();\n        }\n    }\n\n    /**\n     * This can be overridden to start preloading a resource\n     * or do any other prepare step.\n     * @protected\n     * @returns Handle the validate event\n     */\n    load(): Promise<Resource>\n    {\n        return Promise.resolve(this);\n    }\n\n    /**\n     * The width of the resource.\n     * @readonly\n     */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    /**\n     * The height of the resource.\n     * @readonly\n     */\n    get height(): number\n    {\n        return this._height;\n    }\n\n    /**\n     * Uploads the texture or returns false if it cant for some reason. Override this.\n     * @param renderer - yeah, renderer!\n     * @param baseTexture - the texture\n     * @param glTexture - texture instance for this webgl context\n     * @returns - true is success\n     */\n    abstract upload(renderer: Renderer, baseTexture: BaseTexture, glTexture: GLTexture): boolean;\n\n    /**\n     * Set the style, optional to override\n     * @param _renderer - yeah, renderer!\n     * @param _baseTexture - the texture\n     * @param _glTexture - texture instance for this webgl context\n     * @returns - `true` is success\n     */\n    style(_renderer: Renderer, _baseTexture: BaseTexture, _glTexture: GLTexture): boolean\n    {\n        return false;\n    }\n\n    /** Clean up anything, this happens when destroying is ready. */\n    dispose(): void\n    {\n        // override\n    }\n\n    /**\n     * Call when destroying resource, unbind any BaseTexture object\n     * before calling this method, as reference counts are maintained\n     * internally.\n     */\n    destroy(): void\n    {\n        if (!this.destroyed)\n        {\n            this.destroyed = true;\n            this.dispose();\n            this.onError.removeAll();\n            this.onError = null;\n            this.onResize.removeAll();\n            this.onResize = null;\n            this.onUpdate.removeAll();\n            this.onUpdate = null;\n        }\n    }\n\n    /**\n     * Abstract, used to auto-detect resource type.\n     * @param {*} _source - The source object\n     * @param {string} _extension - The extension of source, if set\n     */\n    static test(_source: unknown, _extension?: string): boolean\n    {\n        return false;\n    }\n}\n", "import { Resource } from './Resource';\nimport { ALPHA_MODES } from '@pixi/constants';\n\nimport type { ISize } from '@pixi/math';\nimport type { BaseTexture } from '../BaseTexture';\nimport type { Renderer } from '../../Renderer';\nimport type { GLTexture } from '../GLTexture';\n/**\n * @interface SharedArrayBuffer\n */\n\n/**\n * Buffer resource with data of typed array.\n * @memberof PIXI\n */\nexport class BufferResource extends Resource\n{\n    /** Source array Cannot be {@code ClampedUint8Array} because it cant be uploaded to WebGL */\n    data: Float32Array | Uint8Array | Uint16Array | Int32Array | Uint32Array;\n\n    /**\n     * @param source - Source buffer\n     * @param options - Options\n     * @param {number} options.width - Width of the texture\n     * @param {number} options.height - Height of the texture\n     */\n    constructor(source: Float32Array | Uint8Array | Uint16Array | Int32Array | Uint32Array, options: ISize)\n    {\n        const { width, height } = options || {};\n\n        if (!width || !height)\n        {\n            throw new Error('BufferResource width or height invalid');\n        }\n\n        super(width, height);\n\n        this.data = source;\n    }\n\n    /**\n     * Upload the texture to the GPU.\n     * @param renderer - Upload to the renderer\n     * @param baseTexture - Reference to parent texture\n     * @param glTexture - glTexture\n     * @returns - true is success\n     */\n    upload(renderer: Renderer, baseTexture: BaseTexture, glTexture: GLTexture): boolean\n    {\n        const gl = renderer.gl;\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === ALPHA_MODES.UNPACK);\n\n        const width = baseTexture.realWidth;\n        const height = baseTexture.realHeight;\n\n        if (glTexture.width === width && glTexture.height === height)\n        {\n            gl.texSubImage2D(\n                baseTexture.target,\n                0,\n                0,\n                0,\n                width,\n                height,\n                baseTexture.format,\n                glTexture.type,\n                this.data\n            );\n        }\n        else\n        {\n            glTexture.width = width;\n            glTexture.height = height;\n\n            gl.texImage2D(\n                baseTexture.target,\n                0,\n                glTexture.internalFormat,\n                width,\n                height,\n                0,\n                baseTexture.format,\n                glTexture.type,\n                this.data\n            );\n        }\n\n        return true;\n    }\n\n    /** Destroy and don't use after this. */\n    dispose(): void\n    {\n        this.data = null;\n    }\n\n    /**\n     * Used to auto-detect the type of resource.\n     * @param {*} source - The source object\n     * @returns {boolean} `true` if <canvas>\n     */\n    static test(source: unknown): source is Float32Array | Uint8Array | Uint32Array\n    {\n        return source instanceof Float32Array\n            || source instanceof Uint8Array\n            || source instanceof Uint32Array;\n    }\n}\n", "import { BaseTextureCache, EventEmitter, isPow2, TextureCache, uid } from '@pixi/utils';\nimport { FORMATS, SCALE_MODES, TARGETS, TYPES, ALPHA_MODES } from '@pixi/constants';\nimport { Resource } from './resources/Resource';\nimport { BufferResource } from './resources/BufferResource';\nimport { autoDetectResource } from './resources/autoDetectResource';\nimport { settings } from '@pixi/settings';\n\nimport type { MSAA_QUALITY, MIPMAP_MODES, WRAP_MODES } from '@pixi/constants';\nimport type { IAutoDetectOptions } from './resources/autoDetectResource';\nimport type { GLTexture } from './GLTexture';\n\nconst defaultBufferOptions = {\n    scaleMode: SCALE_MODES.NEAREST,\n    format: FORMATS.RGBA,\n    alphaMode: ALPHA_MODES.NPM,\n};\n\nexport type ImageSource = HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap;\n\nexport interface IBaseTextureOptions<RO = any>\n{\n    alphaMode?: ALPHA_MODES;\n    mipmap?: MIPMAP_MODES;\n    anisotropicLevel?: number;\n    scaleMode?: SCALE_MODES;\n    width?: number;\n    height?: number;\n    wrapMode?: WRAP_MODES;\n    format?: FORMATS;\n    type?: TYPES;\n    target?: TARGETS;\n    resolution?: number;\n    multisample?: MSAA_QUALITY;\n    resourceOptions?: RO;\n    pixiIdPrefix?: string;\n}\n\nexport interface BaseTexture extends GlobalMixins.BaseTexture, EventEmitter {}\n\n/**\n * A Texture stores the information that represents an image.\n * All textures have a base texture, which contains information about the source.\n * Therefore you can have many textures all using a single BaseTexture\n * @memberof PIXI\n * @typeParam R - The BaseTexture's Resource type.\n * @typeParam RO - The options for constructing resource.\n */\nexport class BaseTexture<R extends Resource = Resource, RO = IAutoDetectOptions> extends EventEmitter\n{\n    /**\n     * The width of the base texture set when the image has loaded\n     * @readonly\n     */\n    public width: number;\n\n    /**\n     * The height of the base texture set when the image has loaded\n     * @readonly\n     */\n    public height: number;\n\n    /**\n     * The resolution / device pixel ratio of the texture\n     * @readonly\n     * @default PIXI.settings.RESOLUTION\n     */\n    public resolution: number;\n\n    /**\n     * How to treat premultiplied alpha, see {@link PIXI.ALPHA_MODES}.\n     * @member {PIXI.ALPHA_MODES}\n     * @default PIXI.ALPHA_MODES.UNPACK\n     */\n    public alphaMode?: ALPHA_MODES;\n\n    /**\n     * Anisotropic filtering level of texture\n     * @member {number}\n     * @default PIXI.settings.ANISOTROPIC_LEVEL\n     */\n    public anisotropicLevel?: number;\n\n    /**\n     * The pixel format of the texture\n     * @default PIXI.FORMATS.RGBA\n     */\n    public format?: FORMATS;\n\n    /**\n     * The type of resource data\n     * @default PIXI.TYPES.UNSIGNED_BYTE\n     */\n    public type?: TYPES;\n\n    /**\n     * The target type\n     * @default PIXI.TARGETS.TEXTURE_2D\n     */\n    public target?: TARGETS;\n\n    /**\n     * Global unique identifier for this BaseTexture\n     * @protected\n     */\n    public readonly uid: number;\n\n    /**\n     * Used by automatic texture Garbage Collection, stores last GC tick when it was bound\n     * @protected\n     */\n    touched: number;\n\n    /**\n     * Whether or not the texture is a power of two, try to use power of two textures as much\n     * as you can\n     * @readonly\n     * @default false\n     */\n    isPowerOfTwo: boolean;\n\n    /**\n     * The map of render context textures where this is bound\n     * @private\n     */\n    _glTextures: { [key: number]: GLTexture };\n\n    /**\n     * Used by TextureSystem to only update texture to the GPU when needed.\n     * Please call `update()` to increment it.\n     * @readonly\n     */\n    dirtyId: number;\n\n    /**\n     * Used by TextureSystem to only update texture style when needed.\n     * @protected\n     */\n    dirtyStyleId: number;\n\n    /**\n     * Currently default cache ID.\n     * @member {string}\n     */\n    public cacheId: string;\n\n    /**\n     * Generally speaking means when resource is loaded.\n     * @readonly\n     * @member {boolean}\n     */\n    public valid: boolean;\n\n    /**\n     * The collection of alternative cache ids, since some BaseTextures\n     * can have more than one ID, short name and longer full URL\n     * @member {Array<string>}\n     * @readonly\n     */\n    public textureCacheIds: Array<string>;\n\n    /**\n     * Flag if BaseTexture has been destroyed.\n     * @member {boolean}\n     * @readonly\n     */\n    public destroyed: boolean;\n\n    /**\n     * The resource used by this BaseTexture, there can only\n     * be one resource per BaseTexture, but textures can share\n     * resources.\n     * @member {PIXI.Resource}\n     * @readonly\n     */\n    public resource: R;\n\n    /**\n     * Number of the texture batch, used by multi-texture renderers\n     * @member {number}\n     */\n    _batchEnabled: number;\n\n    /**\n     * Location inside texture batch, used by multi-texture renderers\n     * @member {number}\n     */\n    _batchLocation: number;\n\n    /**\n     * Whether its a part of another texture, handled by ArrayResource or CubeResource\n     * @member {PIXI.BaseTexture}\n     */\n    parentTextureArray: BaseTexture;\n\n    private _mipmap?: MIPMAP_MODES;\n    private _scaleMode?: SCALE_MODES;\n    private _wrapMode?: WRAP_MODES;\n\n    /**\n     * @param {PIXI.Resource|string|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} [resource=null] -\n     *        The current resource to use, for things that aren't Resource objects, will be converted\n     *        into a Resource.\n     * @param options - Collection of options\n     * @param {PIXI.MIPMAP_MODES} [options.mipmap=PIXI.settings.MIPMAP_TEXTURES] - If mipmapping is enabled for texture\n     * @param {number} [options.anisotropicLevel=PIXI.settings.ANISOTROPIC_LEVEL] - Anisotropic filtering level of texture\n     * @param {PIXI.WRAP_MODES} [options.wrapMode=PIXI.settings.WRAP_MODE] - Wrap mode for textures\n     * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.settings.SCALE_MODE] - Default scale mode, linear, nearest\n     * @param {PIXI.FORMATS} [options.format=PIXI.FORMATS.RGBA] - GL format type\n     * @param {PIXI.TYPES} [options.type=PIXI.TYPES.UNSIGNED_BYTE] - GL data type\n     * @param {PIXI.TARGETS} [options.target=PIXI.TARGETS.TEXTURE_2D] - GL texture target\n     * @param {PIXI.ALPHA_MODES} [options.alphaMode=PIXI.ALPHA_MODES.UNPACK] - Pre multiply the image alpha\n     * @param {number} [options.width=0] - Width of the texture\n     * @param {number} [options.height=0] - Height of the texture\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - Resolution of the base texture\n     * @param {object} [options.resourceOptions] - Optional resource options,\n     *        see {@link PIXI.autoDetectResource autoDetectResource}\n     */\n    constructor(resource: R | ImageSource | string | any = null, options: IBaseTextureOptions<RO> = null)\n    {\n        super();\n\n        options = options || {};\n\n        const { alphaMode, mipmap, anisotropicLevel, scaleMode, width, height,\n            wrapMode, format, type, target, resolution, resourceOptions } = options;\n\n        // Convert the resource to a Resource object\n        if (resource && !(resource instanceof Resource))\n        {\n            resource = autoDetectResource<R, RO>(resource, resourceOptions);\n            resource.internal = true;\n        }\n\n        this.resolution = resolution || settings.RESOLUTION;\n        this.width = Math.round((width || 0) * this.resolution) / this.resolution;\n        this.height = Math.round((height || 0) * this.resolution) / this.resolution;\n        this._mipmap = mipmap !== undefined ? mipmap : settings.MIPMAP_TEXTURES;\n        this.anisotropicLevel = anisotropicLevel !== undefined ? anisotropicLevel : settings.ANISOTROPIC_LEVEL;\n        this._wrapMode = wrapMode || settings.WRAP_MODE;\n        this._scaleMode = scaleMode !== undefined ? scaleMode : settings.SCALE_MODE;\n        this.format = format || FORMATS.RGBA;\n        this.type = type || TYPES.UNSIGNED_BYTE;\n        this.target = target || TARGETS.TEXTURE_2D;\n        this.alphaMode = alphaMode !== undefined ? alphaMode : ALPHA_MODES.UNPACK;\n\n        this.uid = uid();\n        this.touched = 0;\n        this.isPowerOfTwo = false;\n        this._refreshPOT();\n\n        this._glTextures = {};\n        this.dirtyId = 0;\n        this.dirtyStyleId = 0;\n        this.cacheId = null;\n        this.valid = width > 0 && height > 0;\n        this.textureCacheIds = [];\n        this.destroyed = false;\n        this.resource = null;\n\n        this._batchEnabled = 0;\n        this._batchLocation = 0;\n        this.parentTextureArray = null;\n\n        /**\n         * Fired when a not-immediately-available source finishes loading.\n         * @protected\n         * @event PIXI.BaseTexture#loaded\n         * @param {PIXI.BaseTexture} baseTexture - Resource loaded.\n         */\n\n        /**\n         * Fired when a not-immediately-available source fails to load.\n         * @protected\n         * @event PIXI.BaseTexture#error\n         * @param {PIXI.BaseTexture} baseTexture - Resource errored.\n         * @param {ErrorEvent} event - Load error event.\n         */\n\n        /**\n         * Fired when BaseTexture is updated.\n         * @protected\n         * @event PIXI.BaseTexture#loaded\n         * @param {PIXI.BaseTexture} baseTexture - Resource loaded.\n         */\n\n        /**\n         * Fired when BaseTexture is updated.\n         * @protected\n         * @event PIXI.BaseTexture#update\n         * @param {PIXI.BaseTexture} baseTexture - Instance of texture being updated.\n         */\n\n        /**\n         * Fired when BaseTexture is destroyed.\n         * @protected\n         * @event PIXI.BaseTexture#dispose\n         * @param {PIXI.BaseTexture} baseTexture - Instance of texture being destroyed.\n         */\n\n        // Set the resource\n        this.setResource(resource);\n    }\n\n    /**\n     * Pixel width of the source of this texture\n     * @readonly\n     */\n    get realWidth(): number\n    {\n        return Math.round(this.width * this.resolution);\n    }\n\n    /**\n     * Pixel height of the source of this texture\n     * @readonly\n     */\n    get realHeight(): number\n    {\n        return Math.round(this.height * this.resolution);\n    }\n\n    /**\n     * Mipmap mode of the texture, affects downscaled images\n     * @default PIXI.settings.MIPMAP_TEXTURES\n     */\n    get mipmap(): MIPMAP_MODES\n    {\n        return this._mipmap;\n    }\n    set mipmap(value: MIPMAP_MODES)\n    {\n        if (this._mipmap !== value)\n        {\n            this._mipmap = value;\n            this.dirtyStyleId++;\n        }\n    }\n\n    /**\n     * The scale mode to apply when scaling this texture\n     * @default PIXI.settings.SCALE_MODE\n     */\n    get scaleMode(): SCALE_MODES\n    {\n        return this._scaleMode;\n    }\n    set scaleMode(value: SCALE_MODES)\n    {\n        if (this._scaleMode !== value)\n        {\n            this._scaleMode = value;\n            this.dirtyStyleId++;\n        }\n    }\n\n    /**\n     * How the texture wraps\n     * @default PIXI.settings.WRAP_MODE\n     */\n    get wrapMode(): WRAP_MODES\n    {\n        return this._wrapMode;\n    }\n    set wrapMode(value: WRAP_MODES)\n    {\n        if (this._wrapMode !== value)\n        {\n            this._wrapMode = value;\n            this.dirtyStyleId++;\n        }\n    }\n\n    /**\n     * Changes style options of BaseTexture\n     * @param scaleMode - Pixi scalemode\n     * @param mipmap - enable mipmaps\n     * @returns - this\n     */\n    setStyle(scaleMode?: SCALE_MODES, mipmap?: MIPMAP_MODES): this\n    {\n        let dirty;\n\n        if (scaleMode !== undefined && scaleMode !== this.scaleMode)\n        {\n            this.scaleMode = scaleMode;\n            dirty = true;\n        }\n\n        if (mipmap !== undefined && mipmap !== this.mipmap)\n        {\n            this.mipmap = mipmap;\n            dirty = true;\n        }\n\n        if (dirty)\n        {\n            this.dirtyStyleId++;\n        }\n\n        return this;\n    }\n\n    /**\n     * Changes w/h/resolution. Texture becomes valid if width and height are greater than zero.\n     * @param desiredWidth - Desired visual width\n     * @param desiredHeight - Desired visual height\n     * @param resolution - Optionally set resolution\n     * @returns - this\n     */\n    setSize(desiredWidth: number, desiredHeight: number, resolution?: number): this\n    {\n        resolution = resolution || this.resolution;\n\n        return this.setRealSize(desiredWidth * resolution, desiredHeight * resolution, resolution);\n    }\n\n    /**\n     * Sets real size of baseTexture, preserves current resolution.\n     * @param realWidth - Full rendered width\n     * @param realHeight - Full rendered height\n     * @param resolution - Optionally set resolution\n     * @returns - this\n     */\n    setRealSize(realWidth: number, realHeight: number, resolution?: number): this\n    {\n        this.resolution = resolution || this.resolution;\n        this.width = Math.round(realWidth) / this.resolution;\n        this.height = Math.round(realHeight) / this.resolution;\n        this._refreshPOT();\n        this.update();\n\n        return this;\n    }\n\n    /**\n     * Refresh check for isPowerOfTwo texture based on size\n     * @private\n     */\n    protected _refreshPOT(): void\n    {\n        this.isPowerOfTwo = isPow2(this.realWidth) && isPow2(this.realHeight);\n    }\n\n    /**\n     * Changes resolution\n     * @param resolution - res\n     * @returns - this\n     */\n    setResolution(resolution: number): this\n    {\n        const oldResolution = this.resolution;\n\n        if (oldResolution === resolution)\n        {\n            return this;\n        }\n\n        this.resolution = resolution;\n\n        if (this.valid)\n        {\n            this.width = Math.round(this.width * oldResolution) / resolution;\n            this.height = Math.round(this.height * oldResolution) / resolution;\n            this.emit('update', this);\n        }\n\n        this._refreshPOT();\n\n        return this;\n    }\n\n    /**\n     * Sets the resource if it wasn't set. Throws error if resource already present\n     * @param resource - that is managing this BaseTexture\n     * @returns - this\n     */\n    setResource(resource: R): this\n    {\n        if (this.resource === resource)\n        {\n            return this;\n        }\n\n        if (this.resource)\n        {\n            throw new Error('Resource can be set only once');\n        }\n\n        resource.bind(this);\n\n        this.resource = resource;\n\n        return this;\n    }\n\n    /** Invalidates the object. Texture becomes valid if width and height are greater than zero. */\n    update(): void\n    {\n        if (!this.valid)\n        {\n            if (this.width > 0 && this.height > 0)\n            {\n                this.valid = true;\n                this.emit('loaded', this);\n                this.emit('update', this);\n            }\n        }\n        else\n        {\n            this.dirtyId++;\n            this.dirtyStyleId++;\n            this.emit('update', this);\n        }\n    }\n\n    /**\n     * Handle errors with resources.\n     * @private\n     * @param event - Error event emitted.\n     */\n    onError(event: ErrorEvent): void\n    {\n        this.emit('error', this, event);\n    }\n\n    /**\n     * Destroys this base texture.\n     * The method stops if resource doesn't want this texture to be destroyed.\n     * Removes texture from all caches.\n     */\n    destroy(): void\n    {\n        // remove and destroy the resource\n        if (this.resource)\n        {\n            this.resource.unbind(this);\n            // only destroy resourced created internally\n            if (this.resource.internal)\n            {\n                this.resource.destroy();\n            }\n            this.resource = null;\n        }\n\n        if (this.cacheId)\n        {\n            delete BaseTextureCache[this.cacheId];\n            delete TextureCache[this.cacheId];\n\n            this.cacheId = null;\n        }\n\n        // finally let the WebGL renderer know..\n        this.dispose();\n\n        BaseTexture.removeFromCache(this);\n        this.textureCacheIds = null;\n\n        this.destroyed = true;\n    }\n\n    /**\n     * Frees the texture from WebGL memory without destroying this texture object.\n     * This means you can still use the texture later which will upload it to GPU\n     * memory again.\n     * @fires PIXI.BaseTexture#dispose\n     */\n    dispose(): void\n    {\n        this.emit('dispose', this);\n    }\n\n    /** Utility function for BaseTexture|Texture cast. */\n    castToBaseTexture(): BaseTexture\n    {\n        return this;\n    }\n\n    /**\n     * Helper function that creates a base texture based on the source you provide.\n     * The source can be - image url, image element, canvas element. If the\n     * source is an image url or an image element and not in the base texture\n     * cache, it will be created and loaded.\n     * @static\n     * @param {string|string[]|HTMLImageElement|HTMLCanvasElement|SVGElement|HTMLVideoElement} source - The\n     *        source to create base texture from.\n     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @param {string} [options.pixiIdPrefix=pixiid] - If a source has no id, this is the prefix of the generated id\n     * @param {boolean} [strict] - Enforce strict-mode, see {@link PIXI.settings.STRICT_TEXTURE_CACHE}.\n     * @returns {PIXI.BaseTexture} The new base texture.\n     */\n    static from<R extends Resource = Resource, RO = IAutoDetectOptions>(source: ImageSource | string | string[],\n        options?: IBaseTextureOptions<RO>, strict = settings.STRICT_TEXTURE_CACHE): BaseTexture<R>\n    {\n        const isFrame = typeof source === 'string';\n        let cacheId = null;\n\n        if (isFrame)\n        {\n            cacheId = source;\n        }\n        else\n        {\n            if (!(source as any)._pixiId)\n            {\n                const prefix = (options && options.pixiIdPrefix) || 'pixiid';\n\n                (source as any)._pixiId = `${prefix}_${uid()}`;\n            }\n\n            cacheId = (source as any)._pixiId;\n        }\n\n        let baseTexture = BaseTextureCache[cacheId] as BaseTexture<R>;\n\n        // Strict-mode rejects invalid cacheIds\n        if (isFrame && strict && !baseTexture)\n        {\n            throw new Error(`The cacheId \"${cacheId}\" does not exist in BaseTextureCache.`);\n        }\n\n        if (!baseTexture)\n        {\n            baseTexture = new BaseTexture<R>(source, options);\n            baseTexture.cacheId = cacheId;\n            BaseTexture.addToCache(baseTexture, cacheId);\n        }\n\n        return baseTexture;\n    }\n\n    /**\n     * Create a new BaseTexture with a BufferResource from a Float32Array.\n     * RGBA values are floats from 0 to 1.\n     * @param {Float32Array|Uint8Array} buffer - The optional array to use, if no data\n     *        is provided, a new Float32Array is created.\n     * @param width - Width of the resource\n     * @param height - Height of the resource\n     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\n     *        Default properties are different from the constructor's defaults.\n     * @param {PIXI.FORMATS} [options.format=PIXI.FORMATS.RGBA] - GL format type\n     * @param {PIXI.ALPHA_MODES} [options.alphaMode=PIXI.ALPHA_MODES.NPM] - Image alpha, not premultiplied by default\n     * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.SCALE_MODES.NEAREST] - Scale mode, pixelating by default\n     * @returns - The resulting new BaseTexture\n     */\n    static fromBuffer(buffer: Float32Array | Uint8Array,\n        width: number, height: number, options?: IBaseTextureOptions): BaseTexture<BufferResource>\n    {\n        buffer = buffer || new Float32Array(width * height * 4);\n\n        const resource = new BufferResource(buffer, { width, height });\n        const type = buffer instanceof Float32Array ? TYPES.FLOAT : TYPES.UNSIGNED_BYTE;\n\n        return new BaseTexture(resource, Object.assign({}, defaultBufferOptions, options || { width, height, type }));\n    }\n\n    /**\n     * Adds a BaseTexture to the global BaseTextureCache. This cache is shared across the whole PIXI object.\n     * @param {PIXI.BaseTexture} baseTexture - The BaseTexture to add to the cache.\n     * @param {string} id - The id that the BaseTexture will be stored against.\n     */\n    static addToCache(baseTexture: BaseTexture, id: string): void\n    {\n        if (id)\n        {\n            if (baseTexture.textureCacheIds.indexOf(id) === -1)\n            {\n                baseTexture.textureCacheIds.push(id);\n            }\n\n            if (BaseTextureCache[id])\n            {\n                // eslint-disable-next-line no-console\n                console.warn(`BaseTexture added to the cache with an id [${id}] that already had an entry`);\n            }\n\n            BaseTextureCache[id] = baseTexture;\n        }\n    }\n\n    /**\n     * Remove a BaseTexture from the global BaseTextureCache.\n     * @param {string|PIXI.BaseTexture} baseTexture - id of a BaseTexture to be removed, or a BaseTexture instance itself.\n     * @returns {PIXI.BaseTexture|null} The BaseTexture that was removed.\n     */\n    static removeFromCache(baseTexture: string | BaseTexture): BaseTexture | null\n    {\n        if (typeof baseTexture === 'string')\n        {\n            const baseTextureFromCache = BaseTextureCache[baseTexture];\n\n            if (baseTextureFromCache)\n            {\n                const index = baseTextureFromCache.textureCacheIds.indexOf(baseTexture);\n\n                if (index > -1)\n                {\n                    baseTextureFromCache.textureCacheIds.splice(index, 1);\n                }\n\n                delete BaseTextureCache[baseTexture];\n\n                return baseTextureFromCache;\n            }\n        }\n        else if (baseTexture && baseTexture.textureCacheIds)\n        {\n            for (let i = 0; i < baseTexture.textureCacheIds.length; ++i)\n            {\n                delete BaseTextureCache[baseTexture.textureCacheIds[i]];\n            }\n\n            baseTexture.textureCacheIds.length = 0;\n\n            return baseTexture;\n        }\n\n        return null;\n    }\n\n    /** Global number of the texture batch, used by multi-texture renderers. */\n    static _globalBatch = 0;\n}\n", "import { Resource } from './Resource';\nimport { BaseTexture } from '../BaseTexture';\nimport type { ISize } from '@pixi/math';\nimport type { IAutoDetectOptions } from './autoDetectResource';\nimport { autoDetectResource } from './autoDetectResource';\n\n/**\n * Resource that can manage several resource (items) inside.\n * All resources need to have the same pixel size.\n * Parent class for CubeResource and ArrayResource\n * @memberof PIXI\n */\nexport abstract class AbstractMultiResource extends Resource\n{\n    /** Number of elements in array. */\n    readonly length: number;\n\n    /**\n     * Collection of partial baseTextures that correspond to resources.\n     * @readonly\n     */\n    items: Array<BaseTexture>;\n\n    /**\n     * Dirty IDs for each part.\n     * @readonly\n     */\n    itemDirtyIds: Array<number>;\n\n    /**\n     * Promise when loading.\n     * @default null\n     */\n    private _load: Promise<this>;\n\n    /** Bound baseTexture, there can only be one. */\n    baseTexture: BaseTexture;\n\n    /**\n     * @param length\n     * @param options - Options to for Resource constructor\n     * @param {number} [options.width] - Width of the resource\n     * @param {number} [options.height] - Height of the resource\n     */\n    constructor(length: number, options?: ISize)\n    {\n        const { width, height } = options || {};\n\n        super(width, height);\n\n        this.items = [];\n        this.itemDirtyIds = [];\n\n        for (let i = 0; i < length; i++)\n        {\n            const partTexture = new BaseTexture();\n\n            this.items.push(partTexture);\n            // -2 - first run of texture array upload\n            // -1 - texture item was allocated\n            // >=0 - texture item uploaded , in sync with items[i].dirtyId\n            this.itemDirtyIds.push(-2);\n        }\n\n        this.length = length;\n        this._load = null;\n        this.baseTexture = null;\n    }\n\n    /**\n     * Used from ArrayResource and CubeResource constructors.\n     * @param resources - Can be resources, image elements, canvas, etc. ,\n     *  length should be same as constructor length\n     * @param options - Detect options for resources\n     */\n    protected initFromArray(resources: Array<any>, options?: IAutoDetectOptions): void\n    {\n        for (let i = 0; i < this.length; i++)\n        {\n            if (!resources[i])\n            {\n                continue;\n            }\n            if (resources[i].castToBaseTexture)\n            {\n                this.addBaseTextureAt(resources[i].castToBaseTexture(), i);\n            }\n            else if (resources[i] instanceof Resource)\n            {\n                this.addResourceAt(resources[i], i);\n            }\n            else\n            {\n                this.addResourceAt(autoDetectResource(resources[i], options), i);\n            }\n        }\n    }\n\n    /** Destroy this BaseImageResource. */\n    dispose(): void\n    {\n        for (let i = 0, len = this.length; i < len; i++)\n        {\n            this.items[i].destroy();\n        }\n        this.items = null;\n        this.itemDirtyIds = null;\n        this._load = null;\n    }\n\n    /**\n     * Set a baseTexture by ID\n     * @param baseTexture\n     * @param index - Zero-based index of resource to set\n     * @returns - Instance for chaining\n     */\n    abstract addBaseTextureAt(baseTexture: BaseTexture, index: number): this;\n\n    /**\n     * Set a resource by ID\n     * @param resource\n     * @param index - Zero-based index of resource to set\n     * @returns - Instance for chaining\n     */\n    addResourceAt(resource: Resource, index: number): this\n    {\n        if (!this.items[index])\n        {\n            throw new Error(`Index ${index} is out of bounds`);\n        }\n\n        // Inherit the first resource dimensions\n        if (resource.valid && !this.valid)\n        {\n            this.resize(resource.width, resource.height);\n        }\n\n        this.items[index].setResource(resource);\n\n        return this;\n    }\n\n    /**\n     * Set the parent base texture.\n     * @param baseTexture\n     */\n    bind(baseTexture: BaseTexture): void\n    {\n        if (this.baseTexture !== null)\n        {\n            throw new Error('Only one base texture per TextureArray is allowed');\n        }\n        super.bind(baseTexture);\n\n        for (let i = 0; i < this.length; i++)\n        {\n            this.items[i].parentTextureArray = baseTexture;\n            this.items[i].on('update', baseTexture.update, baseTexture);\n        }\n    }\n\n    /**\n     * Unset the parent base texture.\n     * @param baseTexture\n     */\n    unbind(baseTexture: BaseTexture): void\n    {\n        super.unbind(baseTexture);\n\n        for (let i = 0; i < this.length; i++)\n        {\n            this.items[i].parentTextureArray = null;\n            this.items[i].off('update', baseTexture.update, baseTexture);\n        }\n    }\n\n    /**\n     * Load all the resources simultaneously\n     * @returns - When load is resolved\n     */\n    load(): Promise<this>\n    {\n        if (this._load)\n        {\n            return this._load;\n        }\n\n        const resources = this.items.map((item) => item.resource).filter((item) => item);\n\n        // TODO: also implement load part-by-part strategy\n        const promises = resources.map((item) => item.load());\n\n        this._load = Promise.all(promises)\n            .then(() =>\n            {\n                const { realWidth, realHeight } = this.items[0];\n\n                this.resize(realWidth, realHeight);\n\n                return Promise.resolve(this);\n            }\n            );\n\n        return this._load;\n    }\n}\n", "import { AbstractMultiResource } from './AbstractMultiResource';\nimport { TARGETS } from '@pixi/constants';\nimport type { BaseTexture } from '../BaseTexture';\n\nimport type { BaseImageResource } from './BaseImageResource';\nimport type { Renderer } from '../../Renderer';\nimport type { GLTexture } from '../GLTexture';\nimport type { ISize } from '@pixi/math';\n\n/**\n * A resource that contains a number of sources.\n * @memberof PIXI\n */\nexport class ArrayResource extends AbstractMultiResource\n{\n    /**\n     * @param source - Number of items in array or the collection\n     *        of image URLs to use. Can also be resources, image elements, canvas, etc.\n     * @param options - Options to apply to {@link PIXI.autoDetectResource}\n     * @param {number} [options.width] - Width of the resource\n     * @param {number} [options.height] - Height of the resource\n     */\n    constructor(source: number | Array<any>, options?: ISize)\n    {\n        const { width, height } = options || {};\n\n        let urls;\n        let length: number;\n\n        if (Array.isArray(source))\n        {\n            urls = source;\n            length = source.length;\n        }\n        else\n        {\n            length = source;\n        }\n\n        super(length, { width, height });\n\n        if (urls)\n        {\n            this.initFromArray(urls, options);\n        }\n    }\n\n    /**\n     * Set a baseTexture by ID,\n     * ArrayResource just takes resource from it, nothing more\n     * @param baseTexture\n     * @param index - Zero-based index of resource to set\n     * @returns - Instance for chaining\n     */\n    addBaseTextureAt(baseTexture: BaseTexture, index: number): this\n    {\n        if (baseTexture.resource)\n        {\n            this.addResourceAt(baseTexture.resource, index);\n        }\n        else\n        {\n            throw new Error('ArrayResource does not support RenderTexture');\n        }\n\n        return this;\n    }\n\n    /**\n     * Add binding\n     * @param baseTexture\n     */\n    bind(baseTexture: BaseTexture): void\n    {\n        super.bind(baseTexture);\n\n        baseTexture.target = TARGETS.TEXTURE_2D_ARRAY;\n    }\n\n    /**\n     * Upload the resources to the GPU.\n     * @param renderer\n     * @param texture\n     * @param glTexture\n     * @returns - whether texture was uploaded\n     */\n    upload(renderer: Renderer, texture: BaseTexture, glTexture: GLTexture): boolean\n    {\n        const { length, itemDirtyIds, items } = this;\n        const { gl } = renderer;\n\n        if (glTexture.dirtyId < 0)\n        {\n            gl.texImage3D(\n                gl.TEXTURE_2D_ARRAY,\n                0,\n                glTexture.internalFormat,\n                this._width,\n                this._height,\n                length,\n                0,\n                texture.format,\n                glTexture.type,\n                null\n            );\n        }\n\n        for (let i = 0; i < length; i++)\n        {\n            const item = items[i];\n\n            if (itemDirtyIds[i] < item.dirtyId)\n            {\n                itemDirtyIds[i] = item.dirtyId;\n                if (item.valid)\n                {\n                    gl.texSubImage3D(\n                        gl.TEXTURE_2D_ARRAY,\n                        0,\n                        0, // xoffset\n                        0, // yoffset\n                        i, // zoffset\n                        item.resource.width,\n                        item.resource.height,\n                        1,\n                        texture.format,\n                        glTexture.type,\n                        (item.resource as BaseImageResource).source\n                    );\n                }\n            }\n        }\n\n        return true;\n    }\n}\n", "import { Resource } from './Resource';\nimport { determineCrossOrigin } from '@pixi/utils';\nimport { ALPHA_MODES } from '@pixi/constants';\n\nimport type { BaseTexture, ImageSource } from '../BaseTexture';\nimport type { Renderer } from '../../Renderer';\nimport type { GLTexture } from '../GLTexture';\n\n/**\n * Base for all the image/canvas resources.\n * @memberof PIXI\n */\nexport class BaseImageResource extends Resource\n{\n    /**\n     * The source element.\n     * @member {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement}\n     * @readonly\n     */\n    public source: ImageSource;\n\n    /**\n     * If set to `true`, will force `texImage2D` over `texSubImage2D` for uploading.\n     * Certain types of media (e.g. video) using `texImage2D` is more performant.\n     * @default false\n     * @private\n     */\n    public noSubImage: boolean;\n\n    /**\n     * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} source\n     */\n    constructor(source: ImageSource)\n    {\n        const sourceAny = source as any;\n        const width = sourceAny.naturalWidth || sourceAny.videoWidth || sourceAny.width;\n        const height = sourceAny.naturalHeight || sourceAny.videoHeight || sourceAny.height;\n\n        super(width, height);\n\n        this.source = source;\n        this.noSubImage = false;\n    }\n\n    /**\n     * Set cross origin based detecting the url and the crossorigin\n     * @param element - Element to apply crossOrigin\n     * @param url - URL to check\n     * @param crossorigin - Cross origin value to use\n     */\n    static crossOrigin(element: HTMLImageElement | HTMLVideoElement, url: string, crossorigin?: boolean | string): void\n    {\n        if (crossorigin === undefined && url.indexOf('data:') !== 0)\n        {\n            element.crossOrigin = determineCrossOrigin(url);\n        }\n        else if (crossorigin !== false)\n        {\n            element.crossOrigin = typeof crossorigin === 'string' ? crossorigin : 'anonymous';\n        }\n    }\n\n    /**\n     * Upload the texture to the GPU.\n     * @param renderer - Upload to the renderer\n     * @param baseTexture - Reference to parent texture\n     * @param glTexture\n     * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} [source] - (optional)\n     * @returns - true is success\n     */\n    upload(renderer: Renderer, baseTexture: BaseTexture, glTexture: GLTexture, source?: ImageSource): boolean\n    {\n        const gl = renderer.gl;\n        const width = baseTexture.realWidth;\n        const height = baseTexture.realHeight;\n\n        source = source || this.source;\n\n        if (source instanceof HTMLImageElement)\n        {\n            if (!source.complete || source.naturalWidth === 0)\n            {\n                return false;\n            }\n        }\n        else if (source instanceof HTMLVideoElement)\n        {\n            if (source.readyState <= 1)\n            {\n                return false;\n            }\n        }\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === ALPHA_MODES.UNPACK);\n\n        if (!this.noSubImage\n            && baseTexture.target === gl.TEXTURE_2D\n            && glTexture.width === width\n            && glTexture.height === height)\n        {\n            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, baseTexture.format, glTexture.type, source);\n        }\n        else\n        {\n            glTexture.width = width;\n            glTexture.height = height;\n\n            gl.texImage2D(baseTexture.target, 0, glTexture.internalFormat, baseTexture.format, glTexture.type, source);\n        }\n\n        return true;\n    }\n\n    /**\n     * Checks if source width/height was changed, resize can cause extra baseTexture update.\n     * Triggers one update in any case.\n     */\n    update(): void\n    {\n        if (this.destroyed)\n        {\n            return;\n        }\n\n        const source = this.source as any;\n\n        const width = source.naturalWidth || source.videoWidth || source.width;\n        const height = source.naturalHeight || source.videoHeight || source.height;\n\n        this.resize(width, height);\n\n        super.update();\n    }\n\n    /** Destroy this {@link BaseImageResource} */\n    dispose(): void\n    {\n        this.source = null;\n    }\n}\n", "import { BaseImageResource } from './BaseImageResource';\n\n/**\n * @interface OffscreenCanvas\n */\n\n/**\n * Resource type for HTMLCanvasElement.\n * @memberof PIXI\n */\nexport class CanvasResource extends BaseImageResource\n{\n    /**\n     * @param source - Canvas element to use\n     */\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n    constructor(source: HTMLCanvasElement)\n    {\n        super(source);\n    }\n\n    /**\n     * Used to auto-detect the type of resource.\n     * @param {*} source - The source object\n     * @returns {boolean} `true` if source is HTMLCanvasElement or OffscreenCanvas\n     */\n    static test(source: unknown): source is OffscreenCanvas | HTMLCanvasElement\n    {\n        const { OffscreenCanvas } = globalThis;\n\n        // Check for browsers that don't yet support OffscreenCanvas\n        if (OffscreenCanvas && source instanceof OffscreenCanvas)\n        {\n            return true;\n        }\n\n        return globalThis.HTMLCanvasElement && source instanceof HTMLCanvasElement;\n    }\n}\n", "import { AbstractMultiResource } from './AbstractMultiResource';\nimport { TARGETS } from '@pixi/constants';\n\nimport type { Resource } from './Resource';\nimport type { ISize } from '@pixi/math';\nimport type { ArrayFixed } from '@pixi/utils';\nimport type { BaseTexture } from '../BaseTexture';\nimport type { Renderer } from '../../Renderer';\nimport type { GLTexture } from '../GLTexture';\n\n/** Constructor options for CubeResource */\nexport interface ICubeResourceOptions extends ISize\n{\n    /** Whether to auto-load resources */\n    autoLoad?: boolean;\n\n    /** In case BaseTextures are supplied, whether to copy them or use. */\n    linkBaseTexture?: boolean;\n}\n\n/**\n * Resource for a CubeTexture which contains six resources.\n * @memberof PIXI\n */\nexport class CubeResource extends AbstractMultiResource\n{\n    items: ArrayFixed<BaseTexture, 6>;\n\n    /**\n     * In case BaseTextures are supplied, whether to use same resource or bind baseTexture itself.\n     * @protected\n     */\n    linkBaseTexture: boolean;\n\n    /**\n     * @param {Array<string|PIXI.Resource>} [source] - Collection of URLs or resources\n     *        to use as the sides of the cube.\n     * @param options - ImageResource options\n     * @param {number} [options.width] - Width of resource\n     * @param {number} [options.height] - Height of resource\n     * @param {number} [options.autoLoad=true] - Whether to auto-load resources\n     * @param {number} [options.linkBaseTexture=true] - In case BaseTextures are supplied,\n     *   whether to copy them or use\n     */\n    constructor(source?: ArrayFixed<string | Resource, 6>, options?: ICubeResourceOptions)\n    {\n        const { width, height, autoLoad, linkBaseTexture } = options || {};\n\n        if (source && source.length !== CubeResource.SIDES)\n        {\n            throw new Error(`Invalid length. Got ${source.length}, expected 6`);\n        }\n\n        super(6, { width, height });\n\n        for (let i = 0; i < CubeResource.SIDES; i++)\n        {\n            this.items[i].target = TARGETS.TEXTURE_CUBE_MAP_POSITIVE_X + i;\n        }\n\n        this.linkBaseTexture = linkBaseTexture !== false;\n\n        if (source)\n        {\n            this.initFromArray(source, options);\n        }\n\n        if (autoLoad !== false)\n        {\n            this.load();\n        }\n    }\n\n    /**\n     * Add binding.\n     * @param baseTexture - parent base texture\n     */\n    bind(baseTexture: BaseTexture): void\n    {\n        super.bind(baseTexture);\n\n        baseTexture.target = TARGETS.TEXTURE_CUBE_MAP;\n    }\n\n    addBaseTextureAt(baseTexture: BaseTexture, index: number, linkBaseTexture?: boolean): this\n    {\n        if (linkBaseTexture === undefined)\n        {\n            linkBaseTexture = this.linkBaseTexture;\n        }\n\n        if (!this.items[index])\n        {\n            throw new Error(`Index ${index} is out of bounds`);\n        }\n\n        if (!this.linkBaseTexture\n            || baseTexture.parentTextureArray\n            || Object.keys(baseTexture._glTextures).length > 0)\n        {\n            // copy mode\n            if (baseTexture.resource)\n            {\n                this.addResourceAt(baseTexture.resource, index);\n            }\n            else\n            {\n                throw new Error(`CubeResource does not support copying of renderTexture.`);\n            }\n        }\n        else\n        {\n            // link mode, the difficult one!\n            baseTexture.target = TARGETS.TEXTURE_CUBE_MAP_POSITIVE_X + index;\n            baseTexture.parentTextureArray = this.baseTexture;\n\n            this.items[index] = baseTexture;\n        }\n\n        if (baseTexture.valid && !this.valid)\n        {\n            this.resize(baseTexture.realWidth, baseTexture.realHeight);\n        }\n\n        this.items[index] = baseTexture;\n\n        return this;\n    }\n\n    /**\n     * Upload the resource\n     * @param renderer\n     * @param _baseTexture\n     * @param glTexture\n     * @returns {boolean} true is success\n     */\n    upload(renderer: Renderer, _baseTexture: BaseTexture, glTexture: GLTexture): boolean\n    {\n        const dirty = this.itemDirtyIds;\n\n        for (let i = 0; i < CubeResource.SIDES; i++)\n        {\n            const side = this.items[i];\n\n            if (dirty[i] < side.dirtyId || glTexture.dirtyId < _baseTexture.dirtyId)\n            {\n                if (side.valid && side.resource)\n                {\n                    side.resource.upload(renderer, side, glTexture);\n                    dirty[i] = side.dirtyId;\n                }\n                else if (dirty[i] < -1)\n                {\n                    // either item is not valid yet, either its a renderTexture\n                    // allocate the memory\n                    renderer.gl.texImage2D(side.target, 0,\n                        glTexture.internalFormat,\n                        _baseTexture.realWidth,\n                        _baseTexture.realHeight,\n                        0,\n                        _baseTexture.format,\n                        glTexture.type,\n                        null);\n                    dirty[i] = -1;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /** Number of texture sides to store for CubeResources. */\n    static SIDES = 6;\n\n    /**\n     * Used to auto-detect the type of resource.\n     * @param {*} source - The source object\n     * @returns {boolean} `true` if source is an array of 6 elements\n     */\n    static test(source: unknown): source is ArrayFixed<string | Resource, 6>\n    {\n        return Array.isArray(source) && source.length === CubeResource.SIDES;\n    }\n}\n", "import { BaseImageResource } from './BaseImageResource';\nimport { settings } from '@pixi/settings';\nimport { ALPHA_MODES } from '@pixi/constants';\n\nimport type { BaseTexture } from '../BaseTexture';\nimport type { Renderer } from '../../Renderer';\nimport type { GLTexture } from '../GLTexture';\n\nexport interface IImageResourceOptions\n{\n    /** Start loading process */\n    autoLoad?: boolean;\n\n    /** Whether its required to create a bitmap before upload. */\n    createBitmap?: boolean;\n\n    /** Load image using cross origin. */\n    crossorigin?: boolean | string;\n\n    /** Premultiply image alpha in bitmap. */\n    alphaMode?: ALPHA_MODES;\n}\n\n/**\n * Resource type for HTMLImageElement.\n * @memberof PIXI\n */\nexport class ImageResource extends BaseImageResource\n{\n    /** URL of the image source */\n    url: string;\n\n    /**\n     * If the image should be disposed after upload\n     * @default false\n     */\n    preserveBitmap: boolean;\n\n    /**\n     * If capable, convert the image using createImageBitmap API.\n     * @default PIXI.settings.CREATE_IMAGE_BITMAP\n     */\n    createBitmap: boolean;\n\n    /**\n     * Controls texture alphaMode field\n     * Copies from options\n     * Default is `null`, copies option from baseTexture\n     * @readonly\n     */\n    alphaMode: ALPHA_MODES;\n\n    /**\n     * The ImageBitmap element created for a {@code HTMLImageElement}.\n     * @default null\n     */\n    bitmap: ImageBitmap;\n\n    /**\n     * Promise when loading.\n     * @default null\n     */\n    private _load: Promise<ImageResource>;\n\n    /** When process is completed */\n    private _process: Promise<ImageResource>;\n\n    /**\n     * @param source - image source or URL\n     * @param options\n     * @param {boolean} [options.autoLoad=true] - start loading process\n     * @param {boolean} [options.createBitmap=PIXI.settings.CREATE_IMAGE_BITMAP] - whether its required to create\n     *        a bitmap before upload\n     * @param {boolean} [options.crossorigin=true] - Load image using cross origin\n     * @param {PIXI.ALPHA_MODES} [options.alphaMode=PIXI.ALPHA_MODES.UNPACK] - Premultiply image alpha in bitmap\n     */\n    constructor(source: HTMLImageElement | string, options?: IImageResourceOptions)\n    {\n        options = options || {};\n\n        if (!(source instanceof HTMLImageElement))\n        {\n            const imageElement = new Image();\n\n            BaseImageResource.crossOrigin(imageElement, source, options.crossorigin);\n\n            imageElement.src = source;\n            source = imageElement;\n        }\n\n        super(source);\n\n        // FireFox 68, and possibly other versions, seems like setting the HTMLImageElement#width and #height\n        // to non-zero values before its loading completes if images are in a cache.\n        // Because of this, need to set the `_width` and the `_height` to zero to avoid uploading incomplete images.\n        // Please refer to the issue #5968 (https://github.com/pixijs/pixi.js/issues/5968).\n        if (!source.complete && !!this._width && !!this._height)\n        {\n            this._width = 0;\n            this._height = 0;\n        }\n\n        this.url = source.src;\n\n        this._process = null;\n\n        this.preserveBitmap = false;\n        this.createBitmap = (options.createBitmap !== undefined\n            ? options.createBitmap : settings.CREATE_IMAGE_BITMAP) && !!globalThis.createImageBitmap;\n        this.alphaMode = typeof options.alphaMode === 'number' ? options.alphaMode : null;\n        this.bitmap = null;\n\n        this._load = null;\n\n        if (options.autoLoad !== false)\n        {\n            this.load();\n        }\n    }\n\n    /**\n     * Returns a promise when image will be loaded and processed.\n     * @param createBitmap - whether process image into bitmap\n     */\n    load(createBitmap?: boolean): Promise<ImageResource>\n    {\n        if (this._load)\n        {\n            return this._load;\n        }\n\n        if (createBitmap !== undefined)\n        {\n            this.createBitmap = createBitmap;\n        }\n\n        this._load = new Promise((resolve, reject): void =>\n        {\n            const source = this.source as HTMLImageElement;\n\n            this.url = source.src;\n\n            const completed = (): void =>\n            {\n                if (this.destroyed)\n                {\n                    return;\n                }\n                source.onload = null;\n                source.onerror = null;\n\n                this.resize(source.width, source.height);\n                this._load = null;\n\n                if (this.createBitmap)\n                {\n                    resolve(this.process());\n                }\n                else\n                {\n                    resolve(this);\n                }\n            };\n\n            if (source.complete && source.src)\n            {\n                completed();\n            }\n            else\n            {\n                source.onload = completed;\n                source.onerror = (event): void =>\n                {\n                    // Avoids Promise freezing when resource broken\n                    reject(event);\n                    this.onError.emit(event);\n                };\n            }\n        });\n\n        return this._load;\n    }\n\n    /**\n     * Called when we need to convert image into BitmapImage.\n     * Can be called multiple times, real promise is cached inside.\n     * @returns - Cached promise to fill that bitmap\n     */\n    process(): Promise<ImageResource>\n    {\n        const source = this.source as HTMLImageElement;\n\n        if (this._process !== null)\n        {\n            return this._process;\n        }\n        if (this.bitmap !== null || !globalThis.createImageBitmap)\n        {\n            return Promise.resolve(this);\n        }\n\n        const createImageBitmap = globalThis.createImageBitmap as any;\n        const cors = !source.crossOrigin || source.crossOrigin === 'anonymous';\n\n        this._process = fetch(source.src,\n            {\n                mode: cors ? 'cors' : 'no-cors'\n            })\n            .then((r) => r.blob())\n            .then((blob) => createImageBitmap(blob,\n                0, 0, source.width, source.height,\n                {\n                    premultiplyAlpha: this.alphaMode === null || this.alphaMode === ALPHA_MODES.UNPACK\n                        ? 'premultiply' : 'none',\n                }))\n            .then((bitmap: ImageBitmap) =>\n            {\n                if (this.destroyed)\n                {\n                    return Promise.reject();\n                }\n                this.bitmap = bitmap;\n                this.update();\n                this._process = null;\n\n                return Promise.resolve(this);\n            });\n\n        return this._process;\n    }\n\n    /**\n     * Upload the image resource to GPU.\n     * @param renderer - Renderer to upload to\n     * @param baseTexture - BaseTexture for this resource\n     * @param glTexture - GLTexture to use\n     * @returns {boolean} true is success\n     */\n    upload(renderer: Renderer, baseTexture: BaseTexture, glTexture: GLTexture): boolean\n    {\n        if (typeof this.alphaMode === 'number')\n        {\n            // bitmap stores unpack premultiply flag, we dont have to notify texImage2D about it\n\n            baseTexture.alphaMode = this.alphaMode;\n        }\n\n        if (!this.createBitmap)\n        {\n            return super.upload(renderer, baseTexture, glTexture);\n        }\n        if (!this.bitmap)\n        {\n            // yeah, ignore the output\n            this.process();\n            if (!this.bitmap)\n            {\n                return false;\n            }\n        }\n\n        super.upload(renderer, baseTexture, glTexture, this.bitmap);\n\n        if (!this.preserveBitmap)\n        {\n            // checks if there are other renderers that possibly need this bitmap\n\n            let flag = true;\n\n            const glTextures = baseTexture._glTextures;\n\n            for (const key in glTextures)\n            {\n                const otherTex = glTextures[key];\n\n                if (otherTex !== glTexture && otherTex.dirtyId !== baseTexture.dirtyId)\n                {\n                    flag = false;\n                    break;\n                }\n            }\n\n            if (flag)\n            {\n                if (this.bitmap.close)\n                {\n                    this.bitmap.close();\n                }\n\n                this.bitmap = null;\n            }\n        }\n\n        return true;\n    }\n\n    /** Destroys this resource. */\n    dispose(): void\n    {\n        (this.source as HTMLImageElement).onload = null;\n        (this.source as HTMLImageElement).onerror = null;\n\n        super.dispose();\n\n        if (this.bitmap)\n        {\n            this.bitmap.close();\n            this.bitmap = null;\n        }\n        this._process = null;\n        this._load = null;\n    }\n\n    /**\n     * Used to auto-detect the type of resource.\n     * @param {*} source - The source object\n     * @returns {boolean} `true` if source is string or HTMLImageElement\n     */\n    static test(source: unknown): source is string | HTMLImageElement\n    {\n        return typeof source === 'string' || source instanceof HTMLImageElement;\n    }\n}\n", "import { uid } from '@pixi/utils';\nimport { BaseImageResource } from './BaseImageResource';\nimport { settings } from '@pixi/settings';\n\nimport type { ISize } from '@pixi/math';\n\nexport interface ISVGResourceOptions\n{\n    source?: string;\n    scale?: number;\n    width?: number;\n    height?: number;\n    autoLoad?: boolean;\n    crossorigin?: boolean | string;\n}\n/**\n * Resource type for SVG elements and graphics.\n * @memberof PIXI\n */\nexport class SVGResource extends BaseImageResource\n{\n    /** Base64 encoded SVG element or URL for SVG file. */\n    public readonly svg: string;\n\n    /** The source scale to apply when rasterizing on load. */\n    public readonly scale: number;\n\n    /** A width override for rasterization on load. */\n    public readonly _overrideWidth: number;\n\n    /** A height override for rasterization on load. */\n    public readonly _overrideHeight: number;\n\n    /** Call when completely loaded. */\n    private _resolve: () => void;\n\n    /** Promise when loading */\n    private _load: Promise<SVGResource>;\n\n    /** Cross origin value to use */\n    private _crossorigin?: boolean | string;\n\n    /**\n     * @param sourceBase64 - Base64 encoded SVG element or URL for SVG file.\n     * @param {object} [options] - Options to use\n     * @param {number} [options.scale=1] - Scale to apply to SVG. Overridden by...\n     * @param {number} [options.width] - Rasterize SVG this wide. Aspect ratio preserved if height not specified.\n     * @param {number} [options.height] - Rasterize SVG this high. Aspect ratio preserved if width not specified.\n     * @param {boolean} [options.autoLoad=true] - Start loading right away.\n     */\n    constructor(sourceBase64: string, options?: ISVGResourceOptions)\n    {\n        options = options || {};\n\n        super(settings.ADAPTER.createCanvas());\n        this._width = 0;\n        this._height = 0;\n\n        this.svg = sourceBase64;\n        this.scale = options.scale || 1;\n        this._overrideWidth = options.width;\n        this._overrideHeight = options.height;\n\n        this._resolve = null;\n        this._crossorigin = options.crossorigin;\n        this._load = null;\n\n        if (options.autoLoad !== false)\n        {\n            this.load();\n        }\n    }\n\n    load(): Promise<SVGResource>\n    {\n        if (this._load)\n        {\n            return this._load;\n        }\n\n        this._load = new Promise((resolve): void =>\n        {\n            // Save this until after load is finished\n            this._resolve = (): void =>\n            {\n                this.resize(this.source.width, this.source.height);\n                resolve(this);\n            };\n\n            // Convert SVG inline string to data-uri\n            if (SVGResource.SVG_XML.test(this.svg.trim()))\n            {\n                if (!btoa)\n                {\n                    throw new Error('Your browser doesn\\'t support base64 conversions.');\n                }\n                (this as any).svg = `data:image/svg+xml;base64,${btoa(unescape(encodeURIComponent(this.svg)))}`;\n            }\n\n            this._loadSvg();\n        });\n\n        return this._load;\n    }\n\n    /** Loads an SVG image from `imageUrl` or `data URL`. */\n    private _loadSvg(): void\n    {\n        const tempImage = new Image();\n\n        BaseImageResource.crossOrigin(tempImage, this.svg, this._crossorigin);\n        tempImage.src = this.svg;\n\n        tempImage.onerror = (event): void =>\n        {\n            if (!this._resolve)\n            {\n                return;\n            }\n\n            tempImage.onerror = null;\n            this.onError.emit(event);\n        };\n\n        tempImage.onload = (): void =>\n        {\n            if (!this._resolve)\n            {\n                return;\n            }\n\n            const svgWidth = tempImage.width;\n            const svgHeight = tempImage.height;\n\n            if (!svgWidth || !svgHeight)\n            {\n                throw new Error('The SVG image must have width and height defined (in pixels), canvas API needs them.');\n            }\n\n            // Set render size\n            let width = svgWidth * this.scale;\n            let height = svgHeight * this.scale;\n\n            if (this._overrideWidth || this._overrideHeight)\n            {\n                width = this._overrideWidth || this._overrideHeight / svgHeight * svgWidth;\n                height = this._overrideHeight || this._overrideWidth / svgWidth * svgHeight;\n            }\n            width = Math.round(width);\n            height = Math.round(height);\n\n            // Create a canvas element\n            const canvas = this.source as HTMLCanvasElement;\n\n            canvas.width = width;\n            canvas.height = height;\n            (canvas as any)._pixiId = `canvas_${uid()}`;\n\n            // Draw the Svg to the canvas\n            canvas\n                .getContext('2d')\n                .drawImage(tempImage, 0, 0, svgWidth, svgHeight, 0, 0, width, height);\n\n            this._resolve();\n            this._resolve = null;\n        };\n    }\n\n    /**\n     * Get size from an svg string using a regular expression.\n     * @param svgString - a serialized svg element\n     * @returns - image extension\n     */\n    static getSize(svgString?: string): ISize\n    {\n        const sizeMatch = SVGResource.SVG_SIZE.exec(svgString);\n        const size: any = {};\n\n        if (sizeMatch)\n        {\n            size[sizeMatch[1]] = Math.round(parseFloat(sizeMatch[3]));\n            size[sizeMatch[5]] = Math.round(parseFloat(sizeMatch[7]));\n        }\n\n        return size;\n    }\n\n    /** Destroys this texture. */\n    dispose(): void\n    {\n        super.dispose();\n        this._resolve = null;\n        this._crossorigin = null;\n    }\n\n    /**\n     * Used to auto-detect the type of resource.\n     * @param {*} source - The source object\n     * @param {string} extension - The extension of source, if set\n     * @returns {boolean} - If the source is a SVG source or data file\n     */\n    static test(source: unknown, extension?: string): boolean\n    {\n        // url file extension is SVG\n        return extension === 'svg'\n            // source is SVG data-uri\n            || (typeof source === 'string' && source.startsWith('data:image/svg+xml'))\n            // source is SVG inline\n            || (typeof source === 'string' && SVGResource.SVG_XML.test(source));\n    }\n\n    /**\n     * Regular expression for SVG XML document.\n     * @example &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;&lt;!-- image/svg --&gt;&lt;svg\n     * @readonly\n     */\n    static SVG_XML = /^(<\\?xml[^?]+\\?>)?\\s*(<!--[^(-->)]*-->)?\\s*\\<svg/m;\n\n    /**\n     * Regular expression for SVG size.\n     * @example &lt;svg width=\"100\" height=\"100\"&gt;&lt;/svg&gt;\n     * @readonly\n     */\n    static SVG_SIZE = /<svg[^>]*(?:\\s(width|height)=('|\")(\\d*(?:\\.\\d+)?)(?:px)?('|\"))[^>]*(?:\\s(width|height)=('|\")(\\d*(?:\\.\\d+)?)(?:px)?('|\"))[^>]*>/i; // eslint-disable-line max-len\n}\n", "import { BaseImageResource } from './BaseImageResource';\nimport { Ticker } from '@pixi/ticker';\n\nimport type { Dict } from '@pixi/utils';\n\nexport interface IVideoResourceOptions\n{\n    autoLoad?: boolean;\n    autoPlay?: boolean;\n    updateFPS?: number;\n    crossorigin?: boolean | string;\n}\n\nexport interface IVideoResourceOptionsElement\n{\n    src: string;\n    mime: string;\n}\n\n/**\n * Resource type for {@code HTMLVideoElement}.\n * @memberof PIXI\n */\nexport class VideoResource extends BaseImageResource\n{\n    /** Override the source to be the video element. */\n    public source: HTMLVideoElement;\n\n    /**\n     * `true` to use PIXI.Ticker.shared to auto update the base texture.\n     * @default true\n     */\n    protected _autoUpdate: boolean;\n\n    /**\n     * `true` if the instance is currently connected to PIXI.Ticker.shared to auto update the base texture.\n     * @default false\n     */\n    protected _isConnectedToTicker: boolean;\n    protected _updateFPS: number;\n    protected _msToNextUpdate: number;\n\n    /**\n     * When set to true will automatically play videos used by this texture once\n     * they are loaded. If false, it will not modify the playing state.\n     * @default true\n     */\n    protected autoPlay: boolean;\n\n    /**\n     * Promise when loading.\n     * @default null\n     */\n    private _load: Promise<VideoResource>;\n\n    /** Callback when completed with load. */\n    private _resolve: (value?: VideoResource | PromiseLike<VideoResource>) => void;\n\n    /**\n     * @param {HTMLVideoElement|object|string|Array<string|object>} source - Video element to use.\n     * @param {object} [options] - Options to use\n     * @param {boolean} [options.autoLoad=true] - Start loading the video immediately\n     * @param {boolean} [options.autoPlay=true] - Start playing video immediately\n     * @param {number} [options.updateFPS=0] - How many times a second to update the texture from the video.\n     * Leave at 0 to update at every render.\n     * @param {boolean} [options.crossorigin=true] - Load image using cross origin\n     */\n    constructor(\n        source?: HTMLVideoElement | Array<string | IVideoResourceOptionsElement> | string, options?: IVideoResourceOptions\n    )\n    {\n        options = options || {};\n\n        if (!(source instanceof HTMLVideoElement))\n        {\n            const videoElement = document.createElement('video');\n\n            // workaround for https://github.com/pixijs/pixi.js/issues/5996\n            videoElement.setAttribute('preload', 'auto');\n            videoElement.setAttribute('webkit-playsinline', '');\n            videoElement.setAttribute('playsinline', '');\n\n            if (typeof source === 'string')\n            {\n                source = [source];\n            }\n\n            const firstSrc = (source[0] as IVideoResourceOptionsElement).src || source[0] as string;\n\n            BaseImageResource.crossOrigin(videoElement, firstSrc, options.crossorigin);\n\n            // array of objects or strings\n            for (let i = 0; i < source.length; ++i)\n            {\n                const sourceElement = document.createElement('source');\n\n                let { src, mime } = source[i] as IVideoResourceOptionsElement;\n\n                src = src || source[i] as string;\n\n                const baseSrc = src.split('?').shift().toLowerCase();\n                const ext = baseSrc.slice(baseSrc.lastIndexOf('.') + 1);\n\n                mime = mime || VideoResource.MIME_TYPES[ext] || `video/${ext}`;\n\n                sourceElement.src = src;\n                sourceElement.type = mime;\n\n                videoElement.appendChild(sourceElement);\n            }\n\n            // Override the source\n            source = videoElement;\n        }\n\n        super(source);\n\n        this.noSubImage = true;\n\n        this._autoUpdate = true;\n        this._isConnectedToTicker = false;\n\n        this._updateFPS = options.updateFPS || 0;\n        this._msToNextUpdate = 0;\n        this.autoPlay = options.autoPlay !== false;\n\n        this._load = null;\n        this._resolve = null;\n\n        // Bind for listeners\n        this._onCanPlay = this._onCanPlay.bind(this);\n        this._onError = this._onError.bind(this);\n\n        if (options.autoLoad !== false)\n        {\n            this.load();\n        }\n    }\n\n    /**\n     * Trigger updating of the texture.\n     * @param _deltaTime - time delta since last tick\n     */\n    update(_deltaTime = 0): void\n    {\n        if (!this.destroyed)\n        {\n            // account for if video has had its playbackRate changed\n            const elapsedMS = Ticker.shared.elapsedMS * (this.source as HTMLVideoElement).playbackRate;\n\n            this._msToNextUpdate = Math.floor(this._msToNextUpdate - elapsedMS);\n            if (!this._updateFPS || this._msToNextUpdate <= 0)\n            {\n                super.update(/* deltaTime*/);\n                this._msToNextUpdate = this._updateFPS ? Math.floor(1000 / this._updateFPS) : 0;\n            }\n        }\n    }\n\n    /**\n     * Start preloading the video resource.\n     * @returns {Promise<void>} Handle the validate event\n     */\n    load(): Promise<VideoResource>\n    {\n        if (this._load)\n        {\n            return this._load;\n        }\n\n        const source = this.source as HTMLVideoElement;\n\n        if ((source.readyState === source.HAVE_ENOUGH_DATA || source.readyState === source.HAVE_FUTURE_DATA)\n            && source.width && source.height)\n        {\n            (source as any).complete = true;\n        }\n\n        source.addEventListener('play', this._onPlayStart.bind(this));\n        source.addEventListener('pause', this._onPlayStop.bind(this));\n\n        if (!this._isSourceReady())\n        {\n            source.addEventListener('canplay', this._onCanPlay);\n            source.addEventListener('canplaythrough', this._onCanPlay);\n            source.addEventListener('error', this._onError, true);\n        }\n        else\n        {\n            this._onCanPlay();\n        }\n\n        this._load = new Promise((resolve): void =>\n        {\n            if (this.valid)\n            {\n                resolve(this);\n            }\n            else\n            {\n                this._resolve = resolve;\n\n                source.load();\n            }\n        });\n\n        return this._load;\n    }\n\n    /**\n     * Handle video error events.\n     * @param event\n     */\n    private _onError(event: ErrorEvent): void\n    {\n        (this.source as HTMLVideoElement).removeEventListener('error', this._onError, true);\n        this.onError.emit(event);\n    }\n\n    /**\n     * Returns true if the underlying source is playing.\n     * @returns - True if playing.\n     */\n    private _isSourcePlaying(): boolean\n    {\n        const source = this.source as HTMLVideoElement;\n\n        return (!source.paused && !source.ended && this._isSourceReady());\n    }\n\n    /**\n     * Returns true if the underlying source is ready for playing.\n     * @returns - True if ready.\n     */\n    private _isSourceReady(): boolean\n    {\n        const source = this.source as HTMLVideoElement;\n\n        return source.readyState > 2;\n    }\n\n    /** Runs the update loop when the video is ready to play. */\n    private _onPlayStart(): void\n    {\n        // Just in case the video has not received its can play even yet..\n        if (!this.valid)\n        {\n            this._onCanPlay();\n        }\n\n        if (this.autoUpdate && !this._isConnectedToTicker)\n        {\n            Ticker.shared.add(this.update, this);\n            this._isConnectedToTicker = true;\n        }\n    }\n\n    /** Fired when a pause event is triggered, stops the update loop. */\n    private _onPlayStop(): void\n    {\n        if (this._isConnectedToTicker)\n        {\n            Ticker.shared.remove(this.update, this);\n            this._isConnectedToTicker = false;\n        }\n    }\n\n    /** Fired when the video is loaded and ready to play. */\n    private _onCanPlay(): void\n    {\n        const source = this.source as HTMLVideoElement;\n\n        source.removeEventListener('canplay', this._onCanPlay);\n        source.removeEventListener('canplaythrough', this._onCanPlay);\n\n        const valid = this.valid;\n\n        this.resize(source.videoWidth, source.videoHeight);\n\n        // prevent multiple loaded dispatches..\n        if (!valid && this._resolve)\n        {\n            this._resolve(this);\n            this._resolve = null;\n        }\n\n        if (this._isSourcePlaying())\n        {\n            this._onPlayStart();\n        }\n        else if (this.autoPlay)\n        {\n            source.play();\n        }\n    }\n\n    /** Destroys this texture. */\n    dispose(): void\n    {\n        if (this._isConnectedToTicker)\n        {\n            Ticker.shared.remove(this.update, this);\n            this._isConnectedToTicker = false;\n        }\n\n        const source = this.source as HTMLVideoElement;\n\n        if (source)\n        {\n            source.removeEventListener('error', this._onError, true);\n            source.pause();\n            source.src = '';\n            source.load();\n        }\n        super.dispose();\n    }\n\n    /** Should the base texture automatically update itself, set to true by default. */\n    get autoUpdate(): boolean\n    {\n        return this._autoUpdate;\n    }\n\n    set autoUpdate(value: boolean)\n    {\n        if (value !== this._autoUpdate)\n        {\n            this._autoUpdate = value;\n\n            if (!this._autoUpdate && this._isConnectedToTicker)\n            {\n                Ticker.shared.remove(this.update, this);\n                this._isConnectedToTicker = false;\n            }\n            else if (this._autoUpdate && !this._isConnectedToTicker && this._isSourcePlaying())\n            {\n                Ticker.shared.add(this.update, this);\n                this._isConnectedToTicker = true;\n            }\n        }\n    }\n\n    /**\n     * How many times a second to update the texture from the video. Leave at 0 to update at every render.\n     * A lower fps can help performance, as updating the texture at 60fps on a 30ps video may not be efficient.\n     */\n    get updateFPS(): number\n    {\n        return this._updateFPS;\n    }\n\n    set updateFPS(value: number)\n    {\n        if (value !== this._updateFPS)\n        {\n            this._updateFPS = value;\n        }\n    }\n\n    /**\n     * Used to auto-detect the type of resource.\n     * @param {*} source - The source object\n     * @param {string} extension - The extension of source, if set\n     * @returns {boolean} `true` if video source\n     */\n    static test(source: unknown, extension?: string): source is HTMLVideoElement\n    {\n        return (globalThis.HTMLVideoElement && source instanceof HTMLVideoElement)\n            || VideoResource.TYPES.indexOf(extension) > -1;\n    }\n\n    /**\n     * List of common video file extensions supported by VideoResource.\n     * @readonly\n     */\n    static TYPES: Array<string> = ['mp4', 'm4v', 'webm', 'ogg', 'ogv', 'h264', 'avi', 'mov'];\n\n    /**\n     * Map of video MIME types that can't be directly derived from file extensions.\n     * @readonly\n     */\n    static MIME_TYPES: Dict<string> = {\n        ogv: 'video/ogg',\n        mov: 'video/quicktime',\n        m4v: 'video/mp4',\n    };\n}\n", "import { BaseImageResource } from './BaseImageResource';\n\n/**\n * Resource type for ImageBitmap.\n * @memberof PIXI\n */\nexport class ImageBitmapResource extends BaseImageResource\n{\n    /**\n     * @param source - Image element to use\n     */\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n    constructor(source: ImageBitmap)\n    {\n        super(source);\n    }\n\n    /**\n     * Used to auto-detect the type of resource.\n     * @param {*} source - The source object\n     * @returns {boolean} `true` if source is an ImageBitmap\n     */\n    static test(source: unknown): source is ImageBitmap\n    {\n        return !!globalThis.createImageBitmap && typeof ImageBitmap !== 'undefined' && source instanceof ImageBitmap;\n    }\n}\n", "import { INSTALLED } from './autoDetectResource';\nimport { ArrayResource } from './ArrayResource';\nimport { BufferResource } from './BufferResource';\nimport { CanvasResource } from './CanvasResource';\nimport { CubeResource } from './CubeResource';\nimport { ImageResource } from './ImageResource';\nimport { SVGResource } from './SVGResource';\nimport { VideoResource } from './VideoResource';\nimport { ImageBitmapResource } from './ImageBitmapResource';\n\nexport * from './Resource';\nexport * from './BaseImageResource';\n\nINSTALLED.push(\n    ImageResource,\n    ImageBitmapResource,\n    CanvasResource,\n    VideoResource,\n    SVGResource,\n    BufferResource,\n    CubeResource,\n    ArrayResource\n);\n\nexport * from './autoDetectResource';\nexport * from './AbstractMultiResource';\nexport * from './ArrayResource';\nexport * from './BufferResource';\nexport * from './CanvasResource';\nexport * from './CubeResource';\nexport * from './ImageResource';\nexport * from './SVGResource';\nexport * from './VideoResource';\nexport * from './ImageBitmapResource';\n", "import { ALPHA_MODES } from '@pixi/constants';\nimport { BufferResource } from './BufferResource';\n\nimport type { BaseTexture } from '../BaseTexture';\nimport type { Renderer } from '../../Renderer';\nimport type { GLTexture } from '../GLTexture';\n\n/**\n * Resource type for DepthTexture.\n * @memberof PIXI\n */\nexport class DepthResource extends BufferResource\n{\n    /**\n     * Upload the texture to the GPU.\n     * @param renderer - Upload to the renderer\n     * @param baseTexture - Reference to parent texture\n     * @param glTexture - glTexture\n     * @returns - true is success\n     */\n    upload(renderer: Renderer, baseTexture: BaseTexture, glTexture: GLTexture): boolean\n    {\n        const gl = renderer.gl;\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === ALPHA_MODES.UNPACK);\n\n        const width = baseTexture.realWidth;\n        const height = baseTexture.realHeight;\n\n        if (glTexture.width === width && glTexture.height === height)\n        {\n            gl.texSubImage2D(\n                baseTexture.target,\n                0,\n                0,\n                0,\n                width,\n                height,\n                baseTexture.format,\n                glTexture.type,\n                this.data,\n            );\n        }\n        else\n        {\n            glTexture.width = width;\n            glTexture.height = height;\n\n            gl.texImage2D(\n                baseTexture.target,\n                0,\n                glTexture.internalFormat,\n                width,\n                height,\n                0,\n                baseTexture.format,\n                glTexture.type,\n                this.data,\n            );\n        }\n\n        return true;\n    }\n}\n", "import { Runner } from '@pixi/runner';\nimport { BaseTexture } from '../textures/BaseTexture';\nimport { DepthResource } from '../textures/resources/DepthResource';\nimport { FORMATS, MIPMAP_MODES, SCALE_MODES, TYPES, MSAA_QUALITY } from '@pixi/constants';\n\nimport type { GLFramebuffer } from './GLFramebuffer';\n\n/**\n * A framebuffer can be used to render contents off of the screen. {@link PIXI.BaseRenderTexture} uses\n * one internally to render into itself. You can attach a depth or stencil buffer to a framebuffer.\n *\n * On WebGL 2 machines, shaders can output to multiple textures simultaneously with GLSL 300 ES.\n * @memberof PIXI\n */\nexport class Framebuffer\n{\n    /** Width of framebuffer in pixels. */\n    public width: number;\n\n    /** Height of framebuffer in pixels. */\n    public height: number;\n\n    /**\n     * Desired number of samples for antialiasing. 0 means AA should not be used.\n     *\n     * Experimental WebGL2 feature, allows to use antialiasing in individual renderTextures.\n     * Antialiasing is the same as for main buffer with renderer `antialias:true` options.\n     * Seriously affects GPU memory consumption and GPU performance.\n     *\n     *```js\n     * renderTexture.framebuffer.multisample = PIXI.MSAA_QUALITY.HIGH;\n     * //...\n     * renderer.render(myContainer, {renderTexture});\n     * renderer.framebuffer.blit(); // copies data from MSAA framebuffer to texture\n     *  ```\n     * @default PIXI.MSAA_QUALITY.NONE\n     */\n    public multisample: MSAA_QUALITY;\n\n    stencil: boolean;\n    depth: boolean;\n    dirtyId: number;\n    dirtyFormat: number;\n    dirtySize: number;\n    depthTexture: BaseTexture;\n    colorTextures: Array<BaseTexture>;\n    glFramebuffers: {[key: string]: GLFramebuffer};\n    disposeRunner: Runner;\n\n    /**\n     * @param width - Width of the frame buffer\n     * @param height - Height of the frame buffer\n     */\n    constructor(width: number, height: number)\n    {\n        this.width = Math.round(width || 100);\n        this.height = Math.round(height || 100);\n\n        this.stencil = false;\n        this.depth = false;\n\n        this.dirtyId = 0;\n        this.dirtyFormat = 0;\n        this.dirtySize = 0;\n\n        this.depthTexture = null;\n        this.colorTextures = [];\n\n        this.glFramebuffers = {};\n\n        this.disposeRunner = new Runner('disposeFramebuffer');\n        this.multisample = MSAA_QUALITY.NONE;\n    }\n\n    /**\n     * Reference to the colorTexture.\n     * @readonly\n     */\n    get colorTexture(): BaseTexture\n    {\n        return this.colorTextures[0];\n    }\n\n    /**\n     * Add texture to the colorTexture array.\n     * @param index - Index of the array to add the texture to\n     * @param texture - Texture to add to the array\n     */\n    addColorTexture(index = 0, texture?: BaseTexture): this\n    {\n        // TODO add some validation to the texture - same width / height etc?\n        this.colorTextures[index] = texture || new BaseTexture(null, {\n            scaleMode: SCALE_MODES.NEAREST,\n            resolution: 1,\n            mipmap: MIPMAP_MODES.OFF,\n            width: this.width,\n            height: this.height,\n        });\n\n        this.dirtyId++;\n        this.dirtyFormat++;\n\n        return this;\n    }\n\n    /**\n     * Add a depth texture to the frame buffer.\n     * @param texture - Texture to add.\n     */\n    addDepthTexture(texture?: BaseTexture): this\n    {\n        /* eslint-disable max-len */\n        this.depthTexture = texture || new BaseTexture(new DepthResource(null, { width: this.width, height: this.height }), {\n            scaleMode: SCALE_MODES.NEAREST,\n            resolution: 1,\n            width: this.width,\n            height: this.height,\n            mipmap: MIPMAP_MODES.OFF,\n            format: FORMATS.DEPTH_COMPONENT,\n            type: TYPES.UNSIGNED_SHORT,\n        });\n\n        this.dirtyId++;\n        this.dirtyFormat++;\n\n        return this;\n    }\n\n    /** Enable depth on the frame buffer. */\n    enableDepth(): this\n    {\n        this.depth = true;\n\n        this.dirtyId++;\n        this.dirtyFormat++;\n\n        return this;\n    }\n\n    /** Enable stencil on the frame buffer. */\n    enableStencil(): this\n    {\n        this.stencil = true;\n\n        this.dirtyId++;\n        this.dirtyFormat++;\n\n        return this;\n    }\n\n    /**\n     * Resize the frame buffer\n     * @param width - Width of the frame buffer to resize to\n     * @param height - Height of the frame buffer to resize to\n     */\n    resize(width: number, height: number): void\n    {\n        width = Math.round(width);\n        height = Math.round(height);\n\n        if (width === this.width && height === this.height) return;\n\n        this.width = width;\n        this.height = height;\n\n        this.dirtyId++;\n        this.dirtySize++;\n\n        for (let i = 0; i < this.colorTextures.length; i++)\n        {\n            const texture = this.colorTextures[i];\n            const resolution = texture.resolution;\n\n            // take into account the fact the texture may have a different resolution..\n            texture.setSize(width / resolution, height / resolution);\n        }\n\n        if (this.depthTexture)\n        {\n            const resolution = this.depthTexture.resolution;\n\n            this.depthTexture.setSize(width / resolution, height / resolution);\n        }\n    }\n\n    /** Disposes WebGL resources that are connected to this geometry. */\n    dispose(): void\n    {\n        this.disposeRunner.emit(this, false);\n    }\n\n    /** Destroys and removes the depth texture added to this framebuffer. */\n    destroyDepthTexture(): void\n    {\n        if (this.depthTexture)\n        {\n            this.depthTexture.destroy();\n            this.depthTexture = null;\n\n            ++this.dirtyId;\n            ++this.dirtyFormat;\n        }\n    }\n}\n", "import { BaseTexture } from '../textures/BaseTexture';\nimport { Framebuffer } from '../framebuffer/Framebuffer';\nimport { MIPMAP_MODES, MSAA_QUALITY } from '@pixi/constants';\n\nimport type { IBaseTextureOptions } from '../textures/BaseTexture';\nimport type { MaskData } from '../mask/MaskData';\n\nexport interface BaseRenderTexture extends GlobalMixins.BaseRenderTexture, BaseTexture {}\n\n/**\n * A BaseRenderTexture is a special texture that allows any PixiJS display object to be rendered to it.\n *\n * __Hint__: All DisplayObjects (i.e. Sprites) that render to a BaseRenderTexture should be preloaded\n * otherwise black rectangles will be drawn instead.\n *\n * A BaseRenderTexture takes a snapshot of any Display Object given to its render method. The position\n * and rotation of the given Display Objects is ignored. For example:\n *\n * ```js\n * let renderer = PIXI.autoDetectRenderer();\n * let baseRenderTexture = new PIXI.BaseRenderTexture({ width: 800, height: 600 });\n * let renderTexture = new PIXI.RenderTexture(baseRenderTexture);\n * let sprite = PIXI.Sprite.from(\"spinObj_01.png\");\n *\n * sprite.position.x = 800/2;\n * sprite.position.y = 600/2;\n * sprite.anchor.x = 0.5;\n * sprite.anchor.y = 0.5;\n *\n * renderer.render(sprite, {renderTexture});\n * ```\n *\n * The Sprite in this case will be rendered using its local transform. To render this sprite at 0,0\n * you can clear the transform\n *\n * ```js\n *\n * sprite.setTransform()\n *\n * let baseRenderTexture = new PIXI.BaseRenderTexture({ width: 100, height: 100 });\n * let renderTexture = new PIXI.RenderTexture(baseRenderTexture);\n *\n * renderer.render(sprite, {renderTexture});  // Renders to center of RenderTexture\n * ```\n * @memberof PIXI\n */\nexport class BaseRenderTexture extends BaseTexture\n{\n    public clearColor: number[];\n    public framebuffer: Framebuffer;\n\n    /** The data structure for the stencil masks. */\n    maskStack: Array<MaskData>;\n\n    /** The data structure for the filters. */\n    filterStack: Array<any>;\n\n    /**\n     * @param options\n     * @param {number} [options.width=100] - The width of the base render texture.\n     * @param {number} [options.height=100] - The height of the base render texture.\n     * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES}\n     *   for possible values.\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio\n     *   of the texture being generated.\n     * @param {PIXI.MSAA_QUALITY} [options.multisample=PIXI.MSAA_QUALITY.NONE] - The number of samples of the frame buffer.\n     */\n    constructor(options: IBaseTextureOptions = {})\n    {\n        if (typeof options === 'number')\n        {\n            /* eslint-disable prefer-rest-params */\n            // Backward compatibility of signature\n            const width = arguments[0];\n            const height = arguments[1];\n            const scaleMode = arguments[2];\n            const resolution = arguments[3];\n\n            options = { width, height, scaleMode, resolution };\n            /* eslint-enable prefer-rest-params */\n        }\n\n        options.width = options.width || 100;\n        options.height = options.height || 100;\n        options.multisample = options.multisample !== undefined ? options.multisample : MSAA_QUALITY.NONE;\n\n        super(null, options);\n\n        // Set defaults\n        this.mipmap = MIPMAP_MODES.OFF;\n        this.valid = true;\n\n        this.clearColor = [0, 0, 0, 0];\n\n        this.framebuffer = new Framebuffer(this.realWidth, this.realHeight)\n            .addColorTexture(0, this);\n        this.framebuffer.multisample = options.multisample;\n\n        // TODO - could this be added the systems?\n        this.maskStack = [];\n        this.filterStack = [{}];\n    }\n\n    /**\n     * Resizes the BaseRenderTexture.\n     * @param desiredWidth - The desired width to resize to.\n     * @param desiredHeight - The desired height to resize to.\n     */\n    resize(desiredWidth: number, desiredHeight: number): void\n    {\n        this.framebuffer.resize(desiredWidth * this.resolution, desiredHeight * this.resolution);\n        this.setRealSize(this.framebuffer.width, this.framebuffer.height);\n    }\n\n    /**\n     * Frees the texture and framebuffer from WebGL memory without destroying this texture object.\n     * This means you can still use the texture later which will upload it to GPU\n     * memory again.\n     * @fires PIXI.BaseTexture#dispose\n     */\n    dispose(): void\n    {\n        this.framebuffer.dispose();\n\n        super.dispose();\n    }\n\n    /** Destroys this texture. */\n    destroy(): void\n    {\n        super.destroy();\n\n        this.framebuffer.destroyDepthTexture();\n        this.framebuffer = null;\n    }\n}\n", "import { groupD8 } from '@pixi/math';\n\nimport type { Rectangle, ISize } from '@pixi/math';\n\n/**\n * Stores a texture's frame in UV coordinates, in\n * which everything lies in the rectangle `[(0,0), (1,0),\n * (1,1), (0,1)]`.\n *\n * | Corner       | Coordinates |\n * |--------------|-------------|\n * | Top-Left     | `(x0,y0)`   |\n * | Top-Right    | `(x1,y1)`   |\n * | Bottom-Right | `(x2,y2)`   |\n * | Bottom-Left  | `(x3,y3)`   |\n * @protected\n * @memberof PIXI\n */\nexport class TextureUvs\n{\n    /** X-component of top-left corner `(x0,y0)`. */\n    public x0: number;\n\n    /** Y-component of top-left corner `(x0,y0)`. */\n    public y0: number;\n\n    /** X-component of top-right corner `(x1,y1)`. */\n    public x1: number;\n\n    /** Y-component of top-right corner `(x1,y1)`. */\n    public y1: number;\n\n    /** X-component of bottom-right corner `(x2,y2)`. */\n    public x2: number;\n\n    /** Y-component of bottom-right corner `(x2,y2)`. */\n    public y2: number;\n\n    /** X-component of bottom-left corner `(x3,y3)`. */\n    public x3: number;\n\n    /** Y-component of bottom-right corner `(x3,y3)`. */\n    public y3: number;\n    public uvsFloat32: Float32Array;\n\n    constructor()\n    {\n        this.x0 = 0;\n        this.y0 = 0;\n        this.x1 = 1;\n        this.y1 = 0;\n        this.x2 = 1;\n        this.y2 = 1;\n        this.x3 = 0;\n        this.y3 = 1;\n\n        this.uvsFloat32 = new Float32Array(8);\n    }\n\n    /**\n     * Sets the texture Uvs based on the given frame information.\n     * @protected\n     * @param frame - The frame of the texture\n     * @param baseFrame - The base frame of the texture\n     * @param rotate - Rotation of frame, see {@link PIXI.groupD8}\n     */\n    set(frame: Rectangle, baseFrame: ISize, rotate: number): void\n    {\n        const tw = baseFrame.width;\n        const th = baseFrame.height;\n\n        if (rotate)\n        {\n            // width and height div 2 div baseFrame size\n            const w2 = frame.width / 2 / tw;\n            const h2 = frame.height / 2 / th;\n\n            // coordinates of center\n            const cX = (frame.x / tw) + w2;\n            const cY = (frame.y / th) + h2;\n\n            rotate = groupD8.add(rotate, groupD8.NW); // NW is top-left corner\n            this.x0 = cX + (w2 * groupD8.uX(rotate));\n            this.y0 = cY + (h2 * groupD8.uY(rotate));\n\n            rotate = groupD8.add(rotate, 2); // rotate 90 degrees clockwise\n            this.x1 = cX + (w2 * groupD8.uX(rotate));\n            this.y1 = cY + (h2 * groupD8.uY(rotate));\n\n            rotate = groupD8.add(rotate, 2);\n            this.x2 = cX + (w2 * groupD8.uX(rotate));\n            this.y2 = cY + (h2 * groupD8.uY(rotate));\n\n            rotate = groupD8.add(rotate, 2);\n            this.x3 = cX + (w2 * groupD8.uX(rotate));\n            this.y3 = cY + (h2 * groupD8.uY(rotate));\n        }\n        else\n        {\n            this.x0 = frame.x / tw;\n            this.y0 = frame.y / th;\n\n            this.x1 = (frame.x + frame.width) / tw;\n            this.y1 = frame.y / th;\n\n            this.x2 = (frame.x + frame.width) / tw;\n            this.y2 = (frame.y + frame.height) / th;\n\n            this.x3 = frame.x / tw;\n            this.y3 = (frame.y + frame.height) / th;\n        }\n\n        this.uvsFloat32[0] = this.x0;\n        this.uvsFloat32[1] = this.y0;\n        this.uvsFloat32[2] = this.x1;\n        this.uvsFloat32[3] = this.y1;\n        this.uvsFloat32[4] = this.x2;\n        this.uvsFloat32[5] = this.y2;\n        this.uvsFloat32[6] = this.x3;\n        this.uvsFloat32[7] = this.y3;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/core:TextureUvs `\n            + `x0=${this.x0} y0=${this.y0} `\n            + `x1=${this.x1} y1=${this.y1} x2=${this.x2} `\n            + `y2=${this.y2} x3=${this.x3} y3=${this.y3}`\n            + `]`;\n    }\n    // #endif\n}\n", "import { BaseTexture } from './BaseTexture';\nimport { ImageResource } from './resources/ImageResource';\nimport type { CanvasResource } from './resources/CanvasResource';\nimport { TextureUvs } from './TextureUvs';\nimport { settings } from '@pixi/settings';\nimport { Rectangle, Point } from '@pixi/math';\nimport { uid, TextureCache, getResolutionOfUrl, EventEmitter } from '@pixi/utils';\n\nimport type { Resource } from './resources/Resource';\nimport type { BufferResource } from './resources/BufferResource';\nimport type { IPointData, ISize } from '@pixi/math';\nimport type { IBaseTextureOptions, ImageSource } from './BaseTexture';\nimport type { TextureMatrix } from './TextureMatrix';\n\nconst DEFAULT_UVS = new TextureUvs();\n\nexport type TextureSource = string | BaseTexture | ImageSource;\n\nexport interface Texture extends GlobalMixins.Texture, EventEmitter {}\n\n/**\n * Used to remove listeners from WHITE and EMPTY Textures\n * @ignore\n */\nfunction removeAllHandlers(tex: any): void\n{\n    tex.destroy = function _emptyDestroy(): void { /* empty */ };\n    tex.on = function _emptyOn(): void { /* empty */ };\n    tex.once = function _emptyOnce(): void { /* empty */ };\n    tex.emit = function _emptyEmit(): void { /* empty */ };\n}\n\n/**\n * A texture stores the information that represents an image or part of an image.\n *\n * It cannot be added to the display list directly; instead use it as the texture for a Sprite.\n * If no frame is provided for a texture, then the whole image is used.\n *\n * You can directly create a texture from an image and then reuse it multiple times like this :\n *\n * ```js\n * let texture = PIXI.Texture.from('assets/image.png');\n * let sprite1 = new PIXI.Sprite(texture);\n * let sprite2 = new PIXI.Sprite(texture);\n * ```\n *\n * If you didnt pass the texture frame to constructor, it enables `noFrame` mode:\n * it subscribes on baseTexture events, it automatically resizes at the same time as baseTexture.\n *\n * Textures made from SVGs, loaded or not, cannot be used before the file finishes processing.\n * You can check for this by checking the sprite's _textureID property.\n * ```js\n * var texture = PIXI.Texture.from('assets/image.svg');\n * var sprite1 = new PIXI.Sprite(texture);\n * //sprite1._textureID should not be undefined if the texture has finished processing the SVG file\n * ```\n * You can use a ticker or rAF to ensure your sprites load the finished textures after processing. See issue #3068.\n * @memberof PIXI\n * @typeParam R - The BaseTexture's Resource type.\n */\nexport class Texture<R extends Resource = Resource> extends EventEmitter\n{\n    /** The base texture that this texture uses. */\n    public baseTexture: BaseTexture<R>;\n\n    /** This is the area of original texture, before it was put in atlas. */\n    public orig: Rectangle;\n\n    /**\n     * This is the trimmed area of original texture, before it was put in atlas\n     * Please call `updateUvs()` after you change coordinates of `trim` manually.\n     */\n    public trim: Rectangle;\n\n    /** This will let the renderer know if the texture is valid. If it's not then it cannot be rendered. */\n    public valid: boolean;\n\n    /**\n     * Does this Texture have any frame data assigned to it?\n     *\n     * This mode is enabled automatically if no frame was passed inside constructor.\n     *\n     * In this mode texture is subscribed to baseTexture events, and fires `update` on any change.\n     *\n     * Beware, after loading or resize of baseTexture event can fired two times!\n     * If you want more control, subscribe on baseTexture itself.\n     *\n     * ```js\n     * texture.on('update', () => {});\n     * ```\n     *\n     * Any assignment of `frame` switches off `noFrame` mode.\n     */\n    public noFrame: boolean;\n\n    /**\n     * Anchor point that is used as default if sprite is created with this texture.\n     * Changing the `defaultAnchor` at a later point of time will not update Sprite's anchor point.\n     * @default {0,0}\n     */\n    public defaultAnchor: Point;\n\n    /** Default TextureMatrix instance for this texture. By default, that object is not created because its heavy. */\n    public uvMatrix: TextureMatrix;\n    protected _rotate: number;\n\n    /**\n     * Update ID is observed by sprites and TextureMatrix instances.\n     * Call updateUvs() to increment it.\n     * @protected\n     */\n    _updateID: number;\n\n    /**\n     * This is the area of the BaseTexture image to actually copy to the Canvas / WebGL when rendering,\n     * irrespective of the actual frame size or placement (which can be influenced by trimmed texture atlases)\n     */\n    _frame: Rectangle;\n\n    /**\n     * The WebGL UV data cache. Can be used as quad UV.\n     * @protected\n     */\n    _uvs: TextureUvs;\n\n    /**\n     * The ids under which this Texture has been added to the texture cache. This is\n     * automatically set as long as Texture.addToCache is used, but may not be set if a\n     * Texture is added directly to the TextureCache array.\n     */\n    textureCacheIds: Array<string>;\n\n    /**\n     * @param baseTexture - The base texture source to create the texture from\n     * @param frame - The rectangle frame of the texture to show\n     * @param orig - The area of original texture\n     * @param trim - Trimmed rectangle of original texture\n     * @param rotate - indicates how the texture was rotated by texture packer. See {@link PIXI.groupD8}\n     * @param anchor - Default anchor point used for sprite placement / rotation\n     */\n    constructor(baseTexture: BaseTexture<R>, frame?: Rectangle,\n        orig?: Rectangle, trim?: Rectangle, rotate?: number, anchor?: IPointData)\n    {\n        super();\n\n        this.noFrame = false;\n\n        if (!frame)\n        {\n            this.noFrame = true;\n            frame = new Rectangle(0, 0, 1, 1);\n        }\n\n        if (baseTexture instanceof Texture)\n        {\n            baseTexture = baseTexture.baseTexture;\n        }\n\n        this.baseTexture = baseTexture;\n        this._frame = frame;\n        this.trim = trim;\n        this.valid = false;\n        this._uvs = DEFAULT_UVS;\n        this.uvMatrix = null;\n        this.orig = orig || frame;// new Rectangle(0, 0, 1, 1);\n\n        this._rotate = Number(rotate || 0);\n\n        if (rotate as any === true)\n        {\n            // this is old texturepacker legacy, some games/libraries are passing \"true\" for rotated textures\n            this._rotate = 2;\n        }\n        else if (this._rotate % 2 !== 0)\n        {\n            throw new Error('attempt to use diamond-shaped UVs. If you are sure, set rotation manually');\n        }\n\n        this.defaultAnchor = anchor ? new Point(anchor.x, anchor.y) : new Point(0, 0);\n\n        this._updateID = 0;\n\n        this.textureCacheIds = [];\n\n        if (!baseTexture.valid)\n        {\n            baseTexture.once('loaded', this.onBaseTextureUpdated, this);\n        }\n        else if (this.noFrame)\n        {\n            // if there is no frame we should monitor for any base texture changes..\n            if (baseTexture.valid)\n            {\n                this.onBaseTextureUpdated(baseTexture);\n            }\n        }\n        else\n        {\n            this.frame = frame;\n        }\n\n        if (this.noFrame)\n        {\n            baseTexture.on('update', this.onBaseTextureUpdated, this);\n        }\n    }\n\n    /**\n     * Updates this texture on the gpu.\n     *\n     * Calls the TextureResource update.\n     *\n     * If you adjusted `frame` manually, please call `updateUvs()` instead.\n     */\n    update(): void\n    {\n        if (this.baseTexture.resource)\n        {\n            this.baseTexture.resource.update();\n        }\n    }\n\n    /**\n     * Called when the base texture is updated\n     * @protected\n     * @param baseTexture - The base texture.\n     */\n    onBaseTextureUpdated(baseTexture: BaseTexture): void\n    {\n        if (this.noFrame)\n        {\n            if (!this.baseTexture.valid)\n            {\n                return;\n            }\n\n            this._frame.width = baseTexture.width;\n            this._frame.height = baseTexture.height;\n            this.valid = true;\n            this.updateUvs();\n        }\n        else\n        {\n            // TODO this code looks confusing.. boo to abusing getters and setters!\n            // if user gave us frame that has bigger size than resized texture it can be a problem\n            this.frame = this._frame;\n        }\n\n        this.emit('update', this);\n    }\n\n    /**\n     * Destroys this texture\n     * @param [destroyBase=false] - Whether to destroy the base texture as well\n     */\n    destroy(destroyBase?: boolean): void\n    {\n        if (this.baseTexture)\n        {\n            if (destroyBase)\n            {\n                const { resource } = this.baseTexture as unknown as BaseTexture<ImageResource>;\n\n                // delete the texture if it exists in the texture cache..\n                // this only needs to be removed if the base texture is actually destroyed too..\n                if (resource && resource.url && TextureCache[resource.url])\n                {\n                    Texture.removeFromCache(resource.url);\n                }\n\n                this.baseTexture.destroy();\n            }\n\n            this.baseTexture.off('loaded', this.onBaseTextureUpdated, this);\n            this.baseTexture.off('update', this.onBaseTextureUpdated, this);\n\n            this.baseTexture = null;\n        }\n\n        this._frame = null;\n        this._uvs = null;\n        this.trim = null;\n        this.orig = null;\n\n        this.valid = false;\n\n        Texture.removeFromCache(this);\n        this.textureCacheIds = null;\n    }\n\n    /**\n     * Creates a new texture object that acts the same as this one.\n     * @returns - The new texture\n     */\n    clone(): Texture\n    {\n        const clonedFrame = this._frame.clone();\n        const clonedOrig = this._frame === this.orig ? clonedFrame : this.orig.clone();\n        const clonedTexture = new Texture(this.baseTexture,\n            !this.noFrame && clonedFrame,\n            clonedOrig,\n            this.trim && this.trim.clone(),\n            this.rotate,\n            this.defaultAnchor\n        );\n\n        if (this.noFrame)\n        {\n            clonedTexture._frame = clonedFrame;\n        }\n\n        return clonedTexture;\n    }\n\n    /**\n     * Updates the internal WebGL UV cache. Use it after you change `frame` or `trim` of the texture.\n     * Call it after changing the frame\n     */\n    updateUvs(): void\n    {\n        if (this._uvs === DEFAULT_UVS)\n        {\n            this._uvs = new TextureUvs();\n        }\n\n        this._uvs.set(this._frame, this.baseTexture, this.rotate);\n\n        this._updateID++;\n    }\n\n    /**\n     * Helper function that creates a new Texture based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     * @param {string|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|PIXI.BaseTexture} source -\n     *        Source or array of sources to create texture from\n     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @param {string} [options.pixiIdPrefix=pixiid] - If a source has no id, this is the prefix of the generated id\n     * @param {boolean} [strict] - Enforce strict-mode, see {@link PIXI.settings.STRICT_TEXTURE_CACHE}.\n     * @returns {PIXI.Texture} The newly created texture\n     */\n    static from<R extends Resource = Resource, RO = any>(source: TextureSource | TextureSource[],\n        options: IBaseTextureOptions<RO> = {},\n        strict = settings.STRICT_TEXTURE_CACHE): Texture<R>\n    {\n        const isFrame = typeof source === 'string';\n        let cacheId = null;\n\n        if (isFrame)\n        {\n            cacheId = source;\n        }\n        else if (source instanceof BaseTexture)\n        {\n            if (!source.cacheId)\n            {\n                const prefix = (options && options.pixiIdPrefix) || 'pixiid';\n\n                source.cacheId = `${prefix}-${uid()}`;\n                BaseTexture.addToCache(source, source.cacheId);\n            }\n\n            cacheId = source.cacheId;\n        }\n        else\n        {\n            if (!(source as any)._pixiId)\n            {\n                const prefix = (options && options.pixiIdPrefix) || 'pixiid';\n\n                (source as any)._pixiId = `${prefix}_${uid()}`;\n            }\n\n            cacheId = (source as any)._pixiId;\n        }\n\n        let texture = TextureCache[cacheId] as Texture<R>;\n\n        // Strict-mode rejects invalid cacheIds\n        if (isFrame && strict && !texture)\n        {\n            throw new Error(`The cacheId \"${cacheId}\" does not exist in TextureCache.`);\n        }\n\n        if (!texture && !(source instanceof BaseTexture))\n        {\n            if (!options.resolution)\n            {\n                options.resolution = getResolutionOfUrl(source as string);\n            }\n\n            texture = new Texture<R>(new BaseTexture<R>(source, options));\n            texture.baseTexture.cacheId = cacheId;\n\n            BaseTexture.addToCache(texture.baseTexture, cacheId);\n            Texture.addToCache(texture, cacheId);\n        }\n        else if (!texture && (source instanceof BaseTexture))\n        {\n            texture = new Texture<R>(source as BaseTexture<R>);\n\n            Texture.addToCache(texture, cacheId);\n        }\n\n        // lets assume its a base texture!\n        return texture;\n    }\n\n    /**\n     * Useful for loading textures via URLs. Use instead of `Texture.from` because\n     * it does a better job of handling failed URLs more effectively. This also ignores\n     * `PIXI.settings.STRICT_TEXTURE_CACHE`. Works for Videos, SVGs, Images.\n     * @param url - The remote URL or array of URLs to load.\n     * @param options - Optional options to include\n     * @returns - A Promise that resolves to a Texture.\n     */\n    static fromURL<R extends Resource = Resource, RO = any>(\n        url: string | string[], options?: IBaseTextureOptions<RO>): Promise<Texture<R>>\n    {\n        const resourceOptions = Object.assign({ autoLoad: false }, options?.resourceOptions);\n        const texture = Texture.from<R>(url, Object.assign({ resourceOptions }, options), false);\n        const resource = texture.baseTexture.resource;\n\n        // The texture was already loaded\n        if (texture.baseTexture.valid)\n        {\n            return Promise.resolve(texture);\n        }\n\n        // Manually load the texture, this should allow users to handle load errors\n        return resource.load().then(() => Promise.resolve(texture));\n    }\n\n    /**\n     * Create a new Texture with a BufferResource from a Float32Array.\n     * RGBA values are floats from 0 to 1.\n     * @param {Float32Array|Uint8Array} buffer - The optional array to use, if no data\n     *        is provided, a new Float32Array is created.\n     * @param width - Width of the resource\n     * @param height - Height of the resource\n     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @returns - The resulting new BaseTexture\n     */\n    static fromBuffer(buffer: Float32Array | Uint8Array,\n        width: number, height: number, options?: IBaseTextureOptions<ISize>): Texture<BufferResource>\n    {\n        return new Texture(BaseTexture.fromBuffer(buffer, width, height, options));\n    }\n\n    /**\n     * Create a texture from a source and add to the cache.\n     * @param {HTMLImageElement|HTMLCanvasElement|string} source - The input source.\n     * @param imageUrl - File name of texture, for cache and resolving resolution.\n     * @param name - Human readable name for the texture cache. If no name is\n     *        specified, only `imageUrl` will be used as the cache ID.\n     * @param options\n     * @returns - Output texture\n     */\n    static fromLoader<R extends Resource = Resource>(source: HTMLImageElement | HTMLCanvasElement | string,\n        imageUrl: string, name?: string, options?: IBaseTextureOptions): Promise<Texture<R>>\n    {\n        const baseTexture = new BaseTexture<R>(source, Object.assign({\n            scaleMode: settings.SCALE_MODE,\n            resolution: getResolutionOfUrl(imageUrl),\n        }, options));\n\n        const { resource } = baseTexture;\n\n        if (resource instanceof ImageResource)\n        {\n            resource.url = imageUrl;\n        }\n\n        const texture = new Texture<R>(baseTexture);\n\n        // No name, use imageUrl instead\n        if (!name)\n        {\n            name = imageUrl;\n        }\n\n        // lets also add the frame to pixi's global cache for 'fromLoader' function\n        BaseTexture.addToCache(texture.baseTexture, name);\n        Texture.addToCache(texture, name);\n\n        // also add references by url if they are different.\n        if (name !== imageUrl)\n        {\n            BaseTexture.addToCache(texture.baseTexture, imageUrl);\n            Texture.addToCache(texture, imageUrl);\n        }\n\n        // Generally images are valid right away\n        if (texture.baseTexture.valid)\n        {\n            return Promise.resolve(texture);\n        }\n\n        // SVG assets need to be parsed async, let's wait\n        return new Promise((resolve) =>\n        {\n            texture.baseTexture.once('loaded', () => resolve(texture));\n        });\n    }\n\n    /**\n     * Adds a Texture to the global TextureCache. This cache is shared across the whole PIXI object.\n     * @param texture - The Texture to add to the cache.\n     * @param id - The id that the Texture will be stored against.\n     */\n    static addToCache(texture: Texture, id: string): void\n    {\n        if (id)\n        {\n            if (texture.textureCacheIds.indexOf(id) === -1)\n            {\n                texture.textureCacheIds.push(id);\n            }\n\n            if (TextureCache[id])\n            {\n                // eslint-disable-next-line no-console\n                console.warn(`Texture added to the cache with an id [${id}] that already had an entry`);\n            }\n\n            TextureCache[id] = texture;\n        }\n    }\n\n    /**\n     * Remove a Texture from the global TextureCache.\n     * @param texture - id of a Texture to be removed, or a Texture instance itself\n     * @returns - The Texture that was removed\n     */\n    static removeFromCache(texture: string | Texture): Texture | null\n    {\n        if (typeof texture === 'string')\n        {\n            const textureFromCache = TextureCache[texture];\n\n            if (textureFromCache)\n            {\n                const index = textureFromCache.textureCacheIds.indexOf(texture);\n\n                if (index > -1)\n                {\n                    textureFromCache.textureCacheIds.splice(index, 1);\n                }\n\n                delete TextureCache[texture];\n\n                return textureFromCache;\n            }\n        }\n        else if (texture && texture.textureCacheIds)\n        {\n            for (let i = 0; i < texture.textureCacheIds.length; ++i)\n            {\n                // Check that texture matches the one being passed in before deleting it from the cache.\n                if (TextureCache[texture.textureCacheIds[i]] === texture)\n                {\n                    delete TextureCache[texture.textureCacheIds[i]];\n                }\n            }\n\n            texture.textureCacheIds.length = 0;\n\n            return texture;\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns resolution of baseTexture\n     * @readonly\n     */\n    get resolution(): number\n    {\n        return this.baseTexture.resolution;\n    }\n\n    /**\n     * The frame specifies the region of the base texture that this texture uses.\n     * Please call `updateUvs()` after you change coordinates of `frame` manually.\n     */\n    get frame(): Rectangle\n    {\n        return this._frame;\n    }\n\n    set frame(frame: Rectangle)\n    {\n        this._frame = frame;\n\n        this.noFrame = false;\n\n        const { x, y, width, height } = frame;\n        const xNotFit = x + width > this.baseTexture.width;\n        const yNotFit = y + height > this.baseTexture.height;\n\n        if (xNotFit || yNotFit)\n        {\n            const relationship = xNotFit && yNotFit ? 'and' : 'or';\n            const errorX = `X: ${x} + ${width} = ${x + width} > ${this.baseTexture.width}`;\n            const errorY = `Y: ${y} + ${height} = ${y + height} > ${this.baseTexture.height}`;\n\n            throw new Error('Texture Error: frame does not fit inside the base Texture dimensions: '\n                + `${errorX} ${relationship} ${errorY}`);\n        }\n\n        this.valid = width && height && this.baseTexture.valid;\n\n        if (!this.trim && !this.rotate)\n        {\n            this.orig = frame;\n        }\n\n        if (this.valid)\n        {\n            this.updateUvs();\n        }\n    }\n\n    /**\n     * Indicates whether the texture is rotated inside the atlas\n     * set to 2 to compensate for texture packer rotation\n     * set to 6 to compensate for spine packer rotation\n     * can be used to rotate or mirror sprites\n     * See {@link PIXI.groupD8} for explanation\n     */\n    get rotate(): number\n    {\n        return this._rotate;\n    }\n\n    set rotate(rotate: number)\n    {\n        this._rotate = rotate;\n        if (this.valid)\n        {\n            this.updateUvs();\n        }\n    }\n\n    /** The width of the Texture in pixels. */\n    get width(): number\n    {\n        return this.orig.width;\n    }\n\n    /** The height of the Texture in pixels. */\n    get height(): number\n    {\n        return this.orig.height;\n    }\n\n    /** Utility function for BaseTexture|Texture cast. */\n    castToBaseTexture(): BaseTexture\n    {\n        return this.baseTexture;\n    }\n\n    private static _EMPTY: Texture<Resource>;\n    private static _WHITE: Texture<CanvasResource>;\n\n    /** An empty texture, used often to not have to create multiple empty textures. Can not be destroyed. */\n    public static get EMPTY(): Texture<Resource>\n    {\n        if (!Texture._EMPTY)\n        {\n            Texture._EMPTY = new Texture(new BaseTexture());\n            removeAllHandlers(Texture._EMPTY);\n            removeAllHandlers(Texture._EMPTY.baseTexture);\n        }\n\n        return Texture._EMPTY;\n    }\n\n    /** A white texture of 16x16 size, used for graphics and other things Can not be destroyed. */\n    public static get WHITE(): Texture<CanvasResource>\n    {\n        if (!Texture._WHITE)\n        {\n            const canvas = settings.ADAPTER.createCanvas(16, 16);\n            const context = canvas.getContext('2d');\n\n            canvas.width = 16;\n            canvas.height = 16;\n            context.fillStyle = 'white';\n            context.fillRect(0, 0, 16, 16);\n\n            Texture._WHITE = new Texture(BaseTexture.from(canvas));\n            removeAllHandlers(Texture._WHITE);\n            removeAllHandlers(Texture._WHITE.baseTexture);\n        }\n\n        return Texture._WHITE;\n    }\n}\n\n", "import { BaseRenderTexture } from './BaseRenderTexture';\nimport { Texture } from '../textures/Texture';\n\nimport type { Rectangle } from '@pixi/math';\nimport type { Framebuffer } from '../framebuffer/Framebuffer';\nimport type { IBaseTextureOptions } from '../textures/BaseTexture';\nimport type { MSAA_QUALITY, SCALE_MODES } from '@pixi/constants';\nimport { deprecation } from '@pixi/utils';\n\n/**\n * A RenderTexture is a special texture that allows any PixiJS display object to be rendered to it.\n *\n * __Hint__: All DisplayObjects (i.e. Sprites) that render to a RenderTexture should be preloaded\n * otherwise black rectangles will be drawn instead.\n *\n * __Hint-2__: The actual memory allocation will happen on first render.\n * You shouldn't create renderTextures each frame just to delete them after, try to reuse them.\n *\n * A RenderTexture takes a snapshot of any Display Object given to its render method. For example:\n *\n * ```js\n * let renderer = PIXI.autoDetectRenderer();\n * let renderTexture = PIXI.RenderTexture.create({ width: 800, height: 600 });\n * let sprite = PIXI.Sprite.from(\"spinObj_01.png\");\n *\n * sprite.position.x = 800/2;\n * sprite.position.y = 600/2;\n * sprite.anchor.x = 0.5;\n * sprite.anchor.y = 0.5;\n *\n * renderer.render(sprite, {renderTexture});\n * ```\n * Note that you should not create a new renderer, but reuse the same one as the rest of the application.\n *\n * The Sprite in this case will be rendered using its local transform. To render this sprite at 0,0\n * you can clear the transform\n *\n * ```js\n *\n * sprite.setTransform()\n *\n * let renderTexture = new PIXI.RenderTexture.create({ width: 100, height: 100 });\n *\n * renderer.render(sprite, {renderTexture});  // Renders to center of RenderTexture\n * ```\n * @memberof PIXI\n */\nexport class RenderTexture extends Texture\n{\n    public baseTexture: BaseRenderTexture;\n\n    /**\n     * Stores `sourceFrame` when this texture is inside current filter stack.\n     *\n     * You can read it inside filters.\n     * @readonly\n     */\n    public filterFrame: Rectangle | null;\n\n    /**\n     * The key for pooled texture of FilterSystem.\n     * @see PIXI.RenderTexturePool\n     */\n    public filterPoolKey: string | number | null;\n\n    /**\n     * @param baseRenderTexture - The base texture object that this texture uses.\n     * @param frame - The rectangle frame of the texture to show.\n     */\n    constructor(baseRenderTexture: BaseRenderTexture, frame?: Rectangle)\n    {\n        super(baseRenderTexture, frame);\n\n        this.valid = true;\n\n        this.filterFrame = null;\n        this.filterPoolKey = null;\n\n        this.updateUvs();\n    }\n\n    /**\n     * Shortcut to `this.baseTexture.framebuffer`, saves baseTexture cast.\n     * @readonly\n     */\n    get framebuffer(): Framebuffer\n    {\n        return this.baseTexture.framebuffer;\n    }\n\n    /**\n     * Shortcut to `this.framebuffer.multisample`.\n     * @default PIXI.MSAA_QUALITY.NONE\n     */\n    get multisample(): MSAA_QUALITY\n    {\n        return this.framebuffer.multisample;\n    }\n\n    set multisample(value: MSAA_QUALITY)\n    {\n        this.framebuffer.multisample = value;\n    }\n\n    /**\n     * Resizes the RenderTexture.\n     * @param desiredWidth - The desired width to resize to.\n     * @param desiredHeight - The desired height to resize to.\n     * @param resizeBaseTexture - Should the baseTexture.width and height values be resized as well?\n     */\n    resize(desiredWidth: number, desiredHeight: number, resizeBaseTexture = true): void\n    {\n        const resolution = this.baseTexture.resolution;\n        const width = Math.round(desiredWidth * resolution) / resolution;\n        const height = Math.round(desiredHeight * resolution) / resolution;\n\n        // TODO - could be not required..\n        this.valid = (width > 0 && height > 0);\n\n        this._frame.width = this.orig.width = width;\n        this._frame.height = this.orig.height = height;\n\n        if (resizeBaseTexture)\n        {\n            this.baseTexture.resize(width, height);\n        }\n\n        this.updateUvs();\n    }\n\n    /**\n     * Changes the resolution of baseTexture, but does not change framebuffer size.\n     * @param resolution - The new resolution to apply to RenderTexture\n     */\n    setResolution(resolution: number): void\n    {\n        const { baseTexture } = this;\n\n        if (baseTexture.resolution === resolution)\n        {\n            return;\n        }\n\n        baseTexture.setResolution(resolution);\n        this.resize(baseTexture.width, baseTexture.height, false);\n    }\n\n    /**\n     * Use the object-based construction instead.\n     * @deprecated since 6.0.0\n     * @param {number} [width]\n     * @param {number} [height]\n     * @param {PIXI.SCALE_MODES} [scaleMode=PIXI.settings.SCALE_MODE]\n     * @param {number} [resolution=PIXI.settings.FILTER_RESOLUTION]\n     */\n    static create(width: number, height: number, scaleMode?: SCALE_MODES, resolution?: number): RenderTexture;\n\n    /**\n     * A short hand way of creating a render texture.\n     * @param options - Options\n     * @param {number} [options.width=100] - The width of the render texture\n     * @param {number} [options.height=100] - The height of the render texture\n     * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES}\n     *    for possible values\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the texture\n     *    being generated\n     * @param {PIXI.MSAA_QUALITY} [options.multisample=PIXI.MSAA_QUALITY.NONE] - The number of samples of the frame buffer\n     * @returns The new render texture\n     */\n    static create(options?: IBaseTextureOptions): RenderTexture;\n    static create(options?: IBaseTextureOptions | number, ...rest: any[]): RenderTexture\n    {\n        // @deprecated fallback, old-style: create(width, height, scaleMode, resolution)\n        if (typeof options === 'number')\n        {\n            // #if _DEBUG\n            deprecation('6.0.0', 'Arguments (width, height, scaleMode, resolution) have been deprecated.');\n            // #endif\n\n            /* eslint-disable prefer-rest-params */\n            options = {\n                width: options,\n                height: rest[0],\n                scaleMode: rest[1],\n                resolution: rest[2],\n            };\n            /* eslint-enable prefer-rest-params */\n        }\n\n        return new RenderTexture(new BaseRenderTexture(options));\n    }\n}\n", "import { RenderTexture } from './RenderTexture';\nimport { BaseRenderTexture } from './BaseRenderTexture';\nimport { nextPow2 } from '@pixi/utils';\nimport { MSAA_QUALITY } from '@pixi/constants';\n\nimport type { IBaseTextureOptions } from '../textures/BaseTexture';\nimport type { ISize } from '@pixi/math';\n\n/**\n * Texture pool, used by FilterSystem and plugins.\n *\n * Stores collection of temporary pow2 or screen-sized renderTextures\n *\n * If you use custom RenderTexturePool for your filters, you can use methods\n * `getFilterTexture` and `returnFilterTexture` same as in\n * @memberof PIXI\n */\nexport class RenderTexturePool\n{\n    public textureOptions: IBaseTextureOptions;\n\n    /**\n     * Allow renderTextures of the same size as screen, not just pow2\n     *\n     * Automatically sets to true after `setScreenSize`\n     * @default false\n     */\n    public enableFullScreen: boolean;\n    texturePool: {[x in string | number]: RenderTexture[]};\n    private _pixelsWidth: number;\n    private _pixelsHeight: number;\n\n    /**\n     * @param textureOptions - options that will be passed to BaseRenderTexture constructor\n     * @param {PIXI.SCALE_MODES} [textureOptions.scaleMode] - See {@link PIXI.SCALE_MODES} for possible values.\n     */\n    constructor(textureOptions?: IBaseTextureOptions)\n    {\n        this.texturePool = {};\n        this.textureOptions = textureOptions || {};\n        this.enableFullScreen = false;\n\n        this._pixelsWidth = 0;\n        this._pixelsHeight = 0;\n    }\n\n    /**\n     * Creates texture with params that were specified in pool constructor.\n     * @param realWidth - Width of texture in pixels.\n     * @param realHeight - Height of texture in pixels.\n     * @param multisample - Number of samples of the framebuffer.\n     */\n    createTexture(realWidth: number, realHeight: number, multisample = MSAA_QUALITY.NONE): RenderTexture\n    {\n        const baseRenderTexture = new BaseRenderTexture(Object.assign({\n            width: realWidth,\n            height: realHeight,\n            resolution: 1,\n            multisample,\n        }, this.textureOptions));\n\n        return new RenderTexture(baseRenderTexture);\n    }\n\n    /**\n     * Gets a Power-of-Two render texture or fullScreen texture\n     * @param minWidth - The minimum width of the render texture.\n     * @param minHeight - The minimum height of the render texture.\n     * @param resolution - The resolution of the render texture.\n     * @param multisample - Number of samples of the render texture.\n     * @returns The new render texture.\n     */\n    getOptimalTexture(minWidth: number, minHeight: number, resolution = 1, multisample = MSAA_QUALITY.NONE): RenderTexture\n    {\n        let key;\n\n        minWidth = Math.ceil((minWidth * resolution) - 1e-6);\n        minHeight = Math.ceil((minHeight * resolution) - 1e-6);\n\n        if (!this.enableFullScreen || minWidth !== this._pixelsWidth || minHeight !== this._pixelsHeight)\n        {\n            minWidth = nextPow2(minWidth);\n            minHeight = nextPow2(minHeight);\n            key = (((minWidth & 0xFFFF) << 16) | (minHeight & 0xFFFF)) >>> 0;\n\n            if (multisample > 1)\n            {\n                key += multisample * 0x100000000;\n            }\n        }\n        else\n        {\n            key = multisample > 1 ? -multisample : -1;\n        }\n\n        if (!this.texturePool[key])\n        {\n            this.texturePool[key] = [];\n        }\n\n        let renderTexture = this.texturePool[key].pop();\n\n        if (!renderTexture)\n        {\n            renderTexture = this.createTexture(minWidth, minHeight, multisample);\n        }\n\n        renderTexture.filterPoolKey = key;\n        renderTexture.setResolution(resolution);\n\n        return renderTexture;\n    }\n\n    /**\n     * Gets extra texture of the same size as input renderTexture\n     *\n     * `getFilterTexture(input, 0.5)` or `getFilterTexture(0.5, input)`\n     * @param input - renderTexture from which size and resolution will be copied\n     * @param resolution - override resolution of the renderTexture\n     *  It overrides, it does not multiply\n     * @param multisample - number of samples of the renderTexture\n     */\n    getFilterTexture(input: RenderTexture, resolution?: number, multisample?: MSAA_QUALITY): RenderTexture\n    {\n        const filterTexture = this.getOptimalTexture(input.width, input.height, resolution || input.resolution,\n            multisample || MSAA_QUALITY.NONE);\n\n        filterTexture.filterFrame = input.filterFrame;\n\n        return filterTexture;\n    }\n\n    /**\n     * Place a render texture back into the pool.\n     * @param renderTexture - The renderTexture to free\n     */\n    returnTexture(renderTexture: RenderTexture): void\n    {\n        const key = renderTexture.filterPoolKey;\n\n        renderTexture.filterFrame = null;\n        this.texturePool[key].push(renderTexture);\n    }\n\n    /**\n     * Alias for returnTexture, to be compliant with FilterSystem interface.\n     * @param renderTexture - The renderTexture to free\n     */\n    returnFilterTexture(renderTexture: RenderTexture): void\n    {\n        this.returnTexture(renderTexture);\n    }\n\n    /**\n     * Clears the pool.\n     * @param destroyTextures - Destroy all stored textures.\n     */\n    clear(destroyTextures?: boolean): void\n    {\n        destroyTextures = destroyTextures !== false;\n        if (destroyTextures)\n        {\n            for (const i in this.texturePool)\n            {\n                const textures = this.texturePool[i];\n\n                if (textures)\n                {\n                    for (let j = 0; j < textures.length; j++)\n                    {\n                        textures[j].destroy(true);\n                    }\n                }\n            }\n        }\n\n        this.texturePool = {};\n    }\n\n    /**\n     * If screen size was changed, drops all screen-sized textures,\n     * sets new screen size, sets `enableFullScreen` to true\n     *\n     * Size is measured in pixels, `renderer.view` can be passed here, not `renderer.screen`\n     * @param size - Initial size of screen.\n     */\n    setScreenSize(size: ISize): void\n    {\n        if (size.width === this._pixelsWidth\n            && size.height === this._pixelsHeight)\n        {\n            return;\n        }\n\n        this.enableFullScreen = size.width > 0 && size.height > 0;\n\n        for (const i in this.texturePool)\n        {\n            if (!(Number(i) < 0))\n            {\n                continue;\n            }\n\n            const textures = this.texturePool[i];\n\n            if (textures)\n            {\n                for (let j = 0; j < textures.length; j++)\n                {\n                    textures[j].destroy(true);\n                }\n            }\n\n            this.texturePool[i] = [];\n        }\n\n        this._pixelsWidth = size.width;\n        this._pixelsHeight = size.height;\n    }\n\n    /**\n     * Key that is used to store fullscreen renderTextures in a pool\n     * @constant\n     */\n    static SCREEN_KEY = -1;\n}\n", "import { TYPES } from '@pixi/constants';\n\n/* eslint-disable max-len */\n\n/**\n * Holds the information for a single attribute structure required to render geometry.\n *\n * This does not contain the actual data, but instead has a buffer id that maps to a {@link PIXI.Buffer}\n * This can include anything from positions, uvs, normals, colors etc.\n * @memberof PIXI\n */\nexport class Attribute\n{\n    public buffer: number;\n    public size: number;\n    public normalized: boolean;\n    public type: TYPES;\n    public stride: number;\n    public start: number;\n    public instance: boolean;\n\n    /**\n     * @param buffer - the id of the buffer that this attribute will look for\n     * @param size - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2.\n     * @param normalized - should the data be normalized.\n     * @param {PIXI.TYPES} [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {@link PIXI.TYPES} to see the ones available\n     * @param [stride=0] - How far apart, in bytes, the start of each value is. (used for interleaving data)\n     * @param [start=0] - How far into the array to start reading values (used for interleaving data)\n     * @param [instance=false] - Whether the geometry is instanced.\n     */\n    constructor(buffer: number, size = 0, normalized = false, type = TYPES.FLOAT, stride?: number, start?: number, instance?: boolean)\n    {\n        this.buffer = buffer;\n        this.size = size;\n        this.normalized = normalized;\n        this.type = type;\n        this.stride = stride;\n        this.start = start;\n        this.instance = instance;\n    }\n\n    /** Destroys the Attribute. */\n    destroy(): void\n    {\n        this.buffer = null;\n    }\n\n    /**\n     * Helper function that creates an Attribute based on the information provided\n     * @param buffer - the id of the buffer that this attribute will look for\n     * @param [size=0] - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2\n     * @param [normalized=false] - should the data be normalized.\n     * @param [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {@link PIXI.TYPES} to see the ones available\n     * @param [stride=0] - How far apart, in bytes, the start of each value is. (used for interleaving data)\n     * @returns - A new {@link PIXI.Attribute} based on the information provided\n     */\n    static from(buffer: number, size?: number, normalized?: boolean, type?: TYPES, stride?: number): Attribute\n    {\n        return new Attribute(buffer, size, normalized, type, stride);\n    }\n}\n", "import { BUFFER_TYPE } from '@pixi/constants';\nimport { Runner } from '@pixi/runner';\nimport type { GLBuffer } from './GLBuffer';\n\nlet UID = 0;\n/* eslint-disable max-len */\n\n/**\n * Marks places in PixiJS where you can pass Float32Array, UInt32Array, any typed arrays, and ArrayBuffer\n *\n * Same as ArrayBuffer in typescript lib, defined here just for documentation\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IArrayBuffer extends ArrayBuffer\n{\n}\n\n/**\n * PixiJS classes use this type instead of ArrayBuffer and typed arrays\n * to support expressions like `geometry.buffers[0].data[0] = position.x`.\n *\n * Gives access to indexing and `length` field\n * * @popelyshev: If data is actually ArrayBuffer and throws Exception on indexing - its user problem :)\n */\nexport interface ITypedArray extends IArrayBuffer\n{\n    readonly length: number;\n    [index: number]: number;\n    readonly BYTES_PER_ELEMENT: number;\n}\n\n/**\n * A wrapper for data so that it can be used and uploaded by WebGL\n * @memberof PIXI\n */\nexport class Buffer\n{\n    /**\n     * The data in the buffer, as a typed array\n     * @type {PIXI.IArrayBuffer}\n     */\n    public data: ITypedArray;\n\n    /**\n     * The type of buffer this is, one of:\n     * + ELEMENT_ARRAY_BUFFER - used as an index buffer\n     * + ARRAY_BUFFER - used as an attribute buffer\n     * + UNIFORM_BUFFER - used as a uniform buffer (if available)\n     */\n    public type: BUFFER_TYPE;\n\n    public static: boolean;\n    public id: number;\n    disposeRunner: Runner;\n\n    /**\n     * A map of renderer IDs to webgl buffer\n     * @private\n     * @type {Object<number, GLBuffer>}\n     */\n    _glBuffers: {[key: number]: GLBuffer};\n    _updateID: number;\n\n    /**\n     * @param {PIXI.IArrayBuffer} data - the data to store in the buffer.\n     * @param _static - `true` for static buffer\n     * @param index - `true` for index buffer\n     */\n    constructor(data?: IArrayBuffer, _static = true, index = false)\n    {\n        this.data = (data || new Float32Array(1)) as ITypedArray;\n\n        this._glBuffers = {};\n        this._updateID = 0;\n\n        this.index = index;\n        this.static = _static;\n        this.id = UID++;\n\n        this.disposeRunner = new Runner('disposeBuffer');\n    }\n\n    // TODO could explore flagging only a partial upload?\n    /**\n     * Flags this buffer as requiring an upload to the GPU.\n     * @param {PIXI.IArrayBuffer|number[]} [data] - the data to update in the buffer.\n     */\n    update(data?: IArrayBuffer | Array<number>): void\n    {\n        if (data instanceof Array)\n        {\n            data = new Float32Array(data);\n        }\n        this.data = (data as ITypedArray) || this.data;\n        this._updateID++;\n    }\n\n    /** Disposes WebGL resources that are connected to this geometry. */\n    dispose(): void\n    {\n        this.disposeRunner.emit(this, false);\n    }\n\n    /** Destroys the buffer. */\n    destroy(): void\n    {\n        this.dispose();\n\n        this.data = null;\n    }\n\n    /**\n     * Flags whether this is an index buffer.\n     *\n     * Index buffers are of type `ELEMENT_ARRAY_BUFFER`. Note that setting this property to false will make\n     * the buffer of type `ARRAY_BUFFER`.\n     *\n     * For backwards compatibility.\n     */\n    set index(value: boolean)\n    {\n        this.type = value ? BUFFER_TYPE.ELEMENT_ARRAY_BUFFER : BUFFER_TYPE.ARRAY_BUFFER;\n    }\n\n    get index(): boolean\n    {\n        return this.type === BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;\n    }\n\n    /**\n     * Helper function that creates a buffer based on an array or TypedArray\n     * @param {ArrayBufferView | number[]} data - the TypedArray that the buffer will store. If this is a regular Array it will be converted to a Float32Array.\n     * @returns - A new Buffer based on the data provided.\n     */\n    static from(data: IArrayBuffer | number[]): Buffer\n    {\n        if (data instanceof Array)\n        {\n            data = new Float32Array(data);\n        }\n\n        return new Buffer(data);\n    }\n}\n", "import { getBufferType } from '@pixi/utils';\n\nimport type { ITypedArray } from '../Buffer';\nimport type { Dict } from '@pixi/utils';\n\n/* eslint-disable object-shorthand */\nconst map: Dict<any> = {\n    Float32Array: Float32Array,\n    Uint32Array: Uint32Array,\n    Int32Array: Int32Array,\n    Uint8Array: Uint8Array,\n};\n\nexport function interleaveTypedArrays(arrays: Array<ITypedArray>, sizes: Array<number>): Float32Array\n{\n    let outSize = 0;\n    let stride = 0;\n    const views: Dict<any> = {};\n\n    for (let i = 0; i < arrays.length; i++)\n    {\n        stride += sizes[i];\n        outSize += arrays[i].length;\n    }\n\n    const buffer = new ArrayBuffer(outSize * 4);\n\n    let out = null;\n    let littleOffset = 0;\n\n    for (let i = 0; i < arrays.length; i++)\n    {\n        const size = sizes[i];\n        const array = arrays[i];\n\n        const type = getBufferType(array);\n\n        if (!views[type])\n        {\n            views[type] = new map[type](buffer);\n        }\n\n        out = views[type];\n\n        for (let j = 0; j < array.length; j++)\n        {\n            const indexStart = ((j / size | 0) * stride) + littleOffset;\n            const index = j % size;\n\n            out[indexStart + index] = array[j];\n        }\n\n        littleOffset += size;\n    }\n\n    return new Float32Array(buffer);\n}\n", "import { Attribute } from './Attribute';\nimport { Buffer } from './Buffer';\nimport { interleaveTypedArrays } from './utils/interleaveTypedArrays';\nimport { getBufferType } from '@pixi/utils';\nimport { Runner } from '@pixi/runner';\n\nimport type { TYPES } from '@pixi/constants';\nimport { BUFFER_TYPE } from '@pixi/constants';\nimport type { IArrayBuffer } from './Buffer';\nimport type { Dict } from '@pixi/utils';\n\nconst byteSizeMap: {[key: number]: number} = { 5126: 4, 5123: 2, 5121: 1 };\nlet UID = 0;\n\n/* eslint-disable object-shorthand */\nconst map: Dict<any> = {\n    Float32Array: Float32Array,\n    Uint32Array: Uint32Array,\n    Int32Array: Int32Array,\n    Uint8Array: Uint8Array,\n    Uint16Array: Uint16Array,\n};\n\n/* eslint-disable max-len */\n\n/**\n * The Geometry represents a model. It consists of two components:\n * - GeometryStyle - The structure of the model such as the attributes layout\n * - GeometryData - the data of the model - this consists of buffers.\n * This can include anything from positions, uvs, normals, colors etc.\n *\n * Geometry can be defined without passing in a style or data if required (thats how I prefer!)\n *\n * ```js\n * let geometry = new PIXI.Geometry();\n *\n * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);\n * geometry.addAttribute('uvs', [0,0,1,0,1,1,0,1],2)\n * geometry.addIndex([0,1,2,1,3,2])\n * ```\n * @memberof PIXI\n */\nexport class Geometry\n{\n    public buffers: Array<Buffer>;\n    public indexBuffer: Buffer;\n    public attributes: {[key: string]: Attribute};\n    public id: number;\n\n    /** Whether the geometry is instanced. */\n    public instanced: boolean;\n\n    /**\n     * Number of instances in this geometry, pass it to `GeometrySystem.draw()`.\n     * @default 1\n     */\n    public instanceCount: number;\n\n    /**\n     * A map of renderer IDs to webgl VAOs\n     * @type {object}\n     */\n    glVertexArrayObjects: {[key: number]: {[key: string]: WebGLVertexArrayObject}};\n    disposeRunner: Runner;\n\n    /** Count of existing (not destroyed) meshes that reference this geometry. */\n    refCount: number;\n\n    /**\n     * @param buffers - An array of buffers. optional.\n     * @param attributes - Of the geometry, optional structure of the attributes layout\n     */\n    constructor(buffers: Array<Buffer> = [], attributes: {[key: string]: Attribute} = {})\n    {\n        this.buffers = buffers;\n\n        this.indexBuffer = null;\n\n        this.attributes = attributes;\n\n        this.glVertexArrayObjects = {};\n\n        this.id = UID++;\n\n        this.instanced = false;\n        this.instanceCount = 1;\n\n        this.disposeRunner = new Runner('disposeGeometry');\n        this.refCount = 0;\n    }\n\n    /**\n     *\n     * Adds an attribute to the geometry\n     * Note: `stride` and `start` should be `undefined` if you dont know them, not 0!\n     * @param id - the name of the attribute (matching up to a shader)\n     * @param {PIXI.Buffer|number[]} buffer - the buffer that holds the data of the attribute . You can also provide an Array and a buffer will be created from it.\n     * @param size - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2\n     * @param normalized - should the data be normalized.\n     * @param [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {PIXI.TYPES} to see the ones available\n     * @param [stride=0] - How far apart, in bytes, the start of each value is. (used for interleaving data)\n     * @param [start=0] - How far into the array to start reading values (used for interleaving data)\n     * @param instance - Instancing flag\n     * @returns - Returns self, useful for chaining.\n     */\n    addAttribute(id: string, buffer: Buffer | Float32Array | Uint32Array | Array<number>, size = 0, normalized = false,\n        type?: TYPES, stride?: number, start?: number, instance = false): this\n    {\n        if (!buffer)\n        {\n            throw new Error('You must pass a buffer when creating an attribute');\n        }\n\n        // check if this is a buffer!\n        if (!(buffer instanceof Buffer))\n        {\n            // its an array!\n            if (buffer instanceof Array)\n            {\n                buffer = new Float32Array(buffer);\n            }\n\n            buffer = new Buffer(buffer);\n        }\n\n        const ids = id.split('|');\n\n        if (ids.length > 1)\n        {\n            for (let i = 0; i < ids.length; i++)\n            {\n                this.addAttribute(ids[i], buffer, size, normalized, type);\n            }\n\n            return this;\n        }\n\n        let bufferIndex = this.buffers.indexOf(buffer);\n\n        if (bufferIndex === -1)\n        {\n            this.buffers.push(buffer);\n            bufferIndex = this.buffers.length - 1;\n        }\n\n        this.attributes[id] = new Attribute(bufferIndex, size, normalized, type, stride, start, instance);\n\n        // assuming that if there is instanced data then this will be drawn with instancing!\n        this.instanced = this.instanced || instance;\n\n        return this;\n    }\n\n    /**\n     * Returns the requested attribute.\n     * @param id - The name of the attribute required\n     * @returns - The attribute requested.\n     */\n    getAttribute(id: string): Attribute\n    {\n        return this.attributes[id];\n    }\n\n    /**\n     * Returns the requested buffer.\n     * @param id - The name of the buffer required.\n     * @returns - The buffer requested.\n     */\n    getBuffer(id: string): Buffer\n    {\n        return this.buffers[this.getAttribute(id).buffer];\n    }\n\n    /**\n     *\n     * Adds an index buffer to the geometry\n     * The index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.\n     * @param {PIXI.Buffer|number[]} [buffer] - The buffer that holds the data of the index buffer. You can also provide an Array and a buffer will be created from it.\n     * @returns - Returns self, useful for chaining.\n     */\n    addIndex(buffer?: Buffer | IArrayBuffer | number[]): Geometry\n    {\n        if (!(buffer instanceof Buffer))\n        {\n            // its an array!\n            if (buffer instanceof Array)\n            {\n                buffer = new Uint16Array(buffer);\n            }\n\n            buffer = new Buffer(buffer);\n        }\n\n        buffer.type = BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;\n\n        this.indexBuffer = buffer;\n\n        if (this.buffers.indexOf(buffer) === -1)\n        {\n            this.buffers.push(buffer);\n        }\n\n        return this;\n    }\n\n    /**\n     * Returns the index buffer\n     * @returns - The index buffer.\n     */\n    getIndex(): Buffer\n    {\n        return this.indexBuffer;\n    }\n\n    /**\n     * This function modifies the structure so that all current attributes become interleaved into a single buffer\n     * This can be useful if your model remains static as it offers a little performance boost\n     * @returns - Returns self, useful for chaining.\n     */\n    interleave(): Geometry\n    {\n        // a simple check to see if buffers are already interleaved..\n        if (this.buffers.length === 1 || (this.buffers.length === 2 && this.indexBuffer)) return this;\n\n        // assume already that no buffers are interleaved\n        const arrays = [];\n        const sizes = [];\n        const interleavedBuffer = new Buffer();\n        let i;\n\n        for (i in this.attributes)\n        {\n            const attribute = this.attributes[i];\n\n            const buffer = this.buffers[attribute.buffer];\n\n            arrays.push(buffer.data);\n\n            sizes.push((attribute.size * byteSizeMap[attribute.type]) / 4);\n\n            attribute.buffer = 0;\n        }\n\n        interleavedBuffer.data = interleaveTypedArrays(arrays, sizes);\n\n        for (i = 0; i < this.buffers.length; i++)\n        {\n            if (this.buffers[i] !== this.indexBuffer)\n            {\n                this.buffers[i].destroy();\n            }\n        }\n\n        this.buffers = [interleavedBuffer];\n\n        if (this.indexBuffer)\n        {\n            this.buffers.push(this.indexBuffer);\n        }\n\n        return this;\n    }\n\n    /** Get the size of the geometries, in vertices. */\n    getSize(): number\n    {\n        for (const i in this.attributes)\n        {\n            const attribute = this.attributes[i];\n            const buffer = this.buffers[attribute.buffer];\n\n            return (buffer.data as any).length / ((attribute.stride / 4) || attribute.size);\n        }\n\n        return 0;\n    }\n\n    /** Disposes WebGL resources that are connected to this geometry. */\n    dispose(): void\n    {\n        this.disposeRunner.emit(this, false);\n    }\n\n    /** Destroys the geometry. */\n    destroy(): void\n    {\n        this.dispose();\n\n        this.buffers = null;\n        this.indexBuffer = null;\n        this.attributes = null;\n    }\n\n    /**\n     * Returns a clone of the geometry.\n     * @returns - A new clone of this geometry.\n     */\n    clone(): Geometry\n    {\n        const geometry = new Geometry();\n\n        for (let i = 0; i < this.buffers.length; i++)\n        {\n            geometry.buffers[i] = new Buffer(this.buffers[i].data.slice(0));\n        }\n\n        for (const i in this.attributes)\n        {\n            const attrib = this.attributes[i];\n\n            geometry.attributes[i] = new Attribute(\n                attrib.buffer,\n                attrib.size,\n                attrib.normalized,\n                attrib.type,\n                attrib.stride,\n                attrib.start,\n                attrib.instance\n            );\n        }\n\n        if (this.indexBuffer)\n        {\n            geometry.indexBuffer = geometry.buffers[this.buffers.indexOf(this.indexBuffer)];\n            geometry.indexBuffer.type = BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;\n        }\n\n        return geometry;\n    }\n\n    /**\n     * Merges an array of geometries into a new single one.\n     *\n     * Geometry attribute styles must match for this operation to work.\n     * @param geometries - array of geometries to merge\n     * @returns - Shiny new geometry!\n     */\n    static merge(geometries: Array<Geometry>): Geometry\n    {\n        // todo add a geometry check!\n        // also a size check.. cant be too big!]\n\n        const geometryOut = new Geometry();\n\n        const arrays = [];\n        const sizes: Array<number> = [];\n        const offsets = [];\n\n        let geometry;\n\n        // pass one.. get sizes..\n        for (let i = 0; i < geometries.length; i++)\n        {\n            geometry = geometries[i];\n\n            for (let j = 0; j < geometry.buffers.length; j++)\n            {\n                sizes[j] = sizes[j] || 0;\n                sizes[j] += geometry.buffers[j].data.length;\n                offsets[j] = 0;\n            }\n        }\n\n        // build the correct size arrays..\n        for (let i = 0; i < geometry.buffers.length; i++)\n        {\n            // TODO types!\n            arrays[i] = new map[getBufferType(geometry.buffers[i].data)](sizes[i]);\n            geometryOut.buffers[i] = new Buffer(arrays[i]);\n        }\n\n        // pass to set data..\n        for (let i = 0; i < geometries.length; i++)\n        {\n            geometry = geometries[i];\n\n            for (let j = 0; j < geometry.buffers.length; j++)\n            {\n                arrays[j].set(geometry.buffers[j].data, offsets[j]);\n                offsets[j] += geometry.buffers[j].data.length;\n            }\n        }\n\n        geometryOut.attributes = geometry.attributes;\n\n        if (geometry.indexBuffer)\n        {\n            geometryOut.indexBuffer = geometryOut.buffers[geometry.buffers.indexOf(geometry.indexBuffer)];\n            geometryOut.indexBuffer.type = BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;\n\n            let offset = 0;\n            let stride = 0;\n            let offset2 = 0;\n            let bufferIndexToCount = 0;\n\n            // get a buffer\n            for (let i = 0; i < geometry.buffers.length; i++)\n            {\n                if (geometry.buffers[i] !== geometry.indexBuffer)\n                {\n                    bufferIndexToCount = i;\n                    break;\n                }\n            }\n\n            // figure out the stride of one buffer..\n            for (const i in geometry.attributes)\n            {\n                const attribute = geometry.attributes[i];\n\n                if ((attribute.buffer | 0) === bufferIndexToCount)\n                {\n                    stride += ((attribute.size * byteSizeMap[attribute.type]) / 4);\n                }\n            }\n\n            // time to off set all indexes..\n            for (let i = 0; i < geometries.length; i++)\n            {\n                const indexBufferData = geometries[i].indexBuffer.data;\n\n                for (let j = 0; j < indexBufferData.length; j++)\n                {\n                    geometryOut.indexBuffer.data[j + offset2] += offset;\n                }\n\n                offset += geometries[i].buffers[bufferIndexToCount].data.length / (stride);\n                offset2 += indexBufferData.length;\n            }\n        }\n\n        return geometryOut;\n    }\n}\n", "import { Geometry } from '../geometry/Geometry';\n\n/**\n * Helper class to create a quad\n * @memberof PIXI\n */\nexport class Quad extends Geometry\n{\n    constructor()\n    {\n        super();\n\n        this.addAttribute('aVertexPosition', new Float32Array([\n            0, 0,\n            1, 0,\n            1, 1,\n            0, 1,\n        ]))\n            .addIndex([0, 1, 3, 2]);\n    }\n}\n", "import { Geometry } from '../geometry/Geometry';\nimport { Buffer } from '../geometry/Buffer';\n\nimport type { Rectangle } from '@pixi/math';\n\n/**\n * Helper class to create a quad with uvs like in v4\n * @memberof PIXI\n */\nexport class QuadUv extends Geometry\n{\n    vertexBuffer: Buffer;\n    uvBuffer: Buffer;\n\n    /** An array of vertices. */\n    vertices: Float32Array;\n\n    /** The Uvs of the quad. */\n    uvs: Float32Array;\n\n    constructor()\n    {\n        super();\n\n        this.vertices = new Float32Array([\n            -1, -1,\n            1, -1,\n            1, 1,\n            -1, 1,\n        ]);\n\n        this.uvs = new Float32Array([\n            0, 0,\n            1, 0,\n            1, 1,\n            0, 1,\n        ]);\n\n        this.vertexBuffer = new Buffer(this.vertices);\n        this.uvBuffer = new Buffer(this.uvs);\n\n        this.addAttribute('aVertexPosition', this.vertexBuffer)\n            .addAttribute('aTextureCoord', this.uvBuffer)\n            .addIndex([0, 1, 2, 0, 2, 3]);\n    }\n\n    /**\n     * Maps two Rectangle to the quad.\n     * @param targetTextureFrame - The first rectangle\n     * @param destinationFrame - The second rectangle\n     * @returns - Returns itself.\n     */\n    map(targetTextureFrame: Rectangle, destinationFrame: Rectangle): this\n    {\n        let x = 0; // destinationFrame.x / targetTextureFrame.width;\n        let y = 0; // destinationFrame.y / targetTextureFrame.height;\n\n        this.uvs[0] = x;\n        this.uvs[1] = y;\n\n        this.uvs[2] = x + (destinationFrame.width / targetTextureFrame.width);\n        this.uvs[3] = y;\n\n        this.uvs[4] = x + (destinationFrame.width / targetTextureFrame.width);\n        this.uvs[5] = y + (destinationFrame.height / targetTextureFrame.height);\n\n        this.uvs[6] = x;\n        this.uvs[7] = y + (destinationFrame.height / targetTextureFrame.height);\n\n        x = destinationFrame.x;\n        y = destinationFrame.y;\n\n        this.vertices[0] = x;\n        this.vertices[1] = y;\n\n        this.vertices[2] = x + destinationFrame.width;\n        this.vertices[3] = y;\n\n        this.vertices[4] = x + destinationFrame.width;\n        this.vertices[5] = y + destinationFrame.height;\n\n        this.vertices[6] = x;\n        this.vertices[7] = y + destinationFrame.height;\n\n        this.invalidate();\n\n        return this;\n    }\n\n    /**\n     * Legacy upload method, just marks buffers dirty.\n     * @returns - Returns itself.\n     */\n    invalidate(): this\n    {\n        this.vertexBuffer._updateID++;\n        this.uvBuffer._updateID++;\n\n        return this;\n    }\n}\n", "import { BUFFER_TYPE } from '@pixi/constants';\nimport type { Dict } from '@pixi/utils';\nimport { Buffer } from '../geometry/Buffer';\nimport type { UniformsSyncCallback } from './utils';\n\nlet UID = 0;\n\n/**\n * Uniform group holds uniform map and some ID's for work\n *\n * `UniformGroup` has two modes:\n *\n * 1: Normal mode\n * Normal mode will upload the uniforms with individual function calls as required\n *\n * 2: Uniform buffer mode\n * This mode will treat the uniforms as a uniform buffer. You can pass in either a buffer that you manually handle, or\n * or a generic object that PixiJS will automatically map to a buffer for you.\n * For maximum benefits, make Ubo UniformGroups static, and only update them each frame.\n *\n * Rules of UBOs:\n * - UBOs only work with WebGL2, so make sure you have a fallback!\n * - Only floats are supported (including vec[2,3,4], mat[2,3,4])\n * - Samplers cannot be used in ubo's (a GPU limitation)\n * - You must ensure that the object you pass in exactly matches in the shader ubo structure.\n * Otherwise, weirdness will ensue!\n * - The name of the ubo object added to the group must match exactly the name of the ubo in the shader.\n *\n * ```\n * // ubo in shader:\n * uniform myCoolData { // declaring a ubo..\n * mat4 uCoolMatrix;\n * float uFloatyMcFloatFace\n *\n *\n * // a new uniform buffer object..\n * const myCoolData = new UniformBufferGroup({\n *   uCoolMatrix: new Matrix(),\n *   uFloatyMcFloatFace: 23,\n * }}\n *\n * // build a shader...\n * const shader = Shader.from(srcVert, srcFrag, {\n *   myCoolData // name matches the ubo name in the shader. will be processed accordingly.\n * })\n *\n *  ```\n * @memberof PIXI\n */\nexport class UniformGroup<LAYOUT = Dict<any>>\n{\n    /**\n     * Uniform values\n     * @member {object}\n     */\n    public readonly uniforms: LAYOUT;\n\n    /**\n     * Its a group and not a single uniforms.\n     * @default true\n     */\n    public readonly group: boolean;\n\n    /**\n     * unique id\n     * @protected\n     */\n    public id: number;\n    syncUniforms: Dict<UniformsSyncCallback>;\n\n    /**\n     * Dirty version\n     * @protected\n     */\n    dirtyId: number;\n\n    /** Flag for if uniforms wont be changed after creation. */\n    static: boolean;\n\n    /** Flags whether this group is treated like a uniform buffer object. */\n    ubo: boolean;\n    buffer?: Buffer;\n    autoManage: boolean;\n\n    /**\n     * @param {object | Buffer} [uniforms] - Custom uniforms to use to augment the built-in ones. Or a pixi buffer.\n     * @param isStatic - Uniforms wont be changed after creation.\n     * @param isUbo - If true, will treat this uniform group as a uniform buffer object.\n     */\n    constructor(uniforms: LAYOUT | Buffer, isStatic?: boolean, isUbo?: boolean)\n    {\n        this.group = true;\n\n        // lets generate this when the shader ?\n        this.syncUniforms = {};\n        this.dirtyId = 0;\n        this.id = UID++;\n        this.static = !!isStatic;\n        this.ubo = !!isUbo;\n\n        if (uniforms instanceof Buffer)\n        {\n            this.buffer = uniforms;\n            this.buffer.type = BUFFER_TYPE.UNIFORM_BUFFER;\n            this.autoManage = false;\n            this.ubo = true;\n        }\n        else\n        {\n            this.uniforms = uniforms;\n\n            if (this.ubo)\n            {\n                this.buffer = new Buffer(new Float32Array(1));\n                this.buffer.type = BUFFER_TYPE.UNIFORM_BUFFER;\n                this.autoManage = true;\n            }\n        }\n    }\n\n    update(): void\n    {\n        this.dirtyId++;\n\n        if (!this.autoManage && this.buffer)\n        {\n            this.buffer.update();\n        }\n    }\n\n    add(name: string, uniforms: Dict<any>, _static?: boolean): void\n    {\n        if (!this.ubo)\n        {\n            (this.uniforms as any)[name] = new UniformGroup(uniforms, _static);\n        }\n        else\n        {\n            // eslint-disable-next-line max-len\n            throw new Error('[UniformGroup] uniform groups in ubo mode cannot be modified, or have uniform groups nested in them');\n        }\n    }\n\n    static from(uniforms: Dict<any> | Buffer, _static?: boolean, _ubo?: boolean): UniformGroup\n    {\n        return new UniformGroup(uniforms, _static, _ubo);\n    }\n\n    /**\n     * A short hand function for creating a static UBO UniformGroup.\n     * @param uniforms - the ubo item\n     * @param _static - should this be updated each time it is used? defaults to true here!\n     */\n    static uboFrom(uniforms: Dict<any> | Buffer, _static?: boolean): UniformGroup\n    {\n        return new UniformGroup(uniforms, _static ?? true, true);\n    }\n}\n", "import type { Matrix } from '@pixi/math';\nimport { Rectangle } from '@pixi/math';\nimport { MSAA_QUALITY } from '@pixi/constants';\n\nimport type { Filter } from './Filter';\nimport type { IFilterTarget } from './IFilterTarget';\nimport type { RenderTexture } from '../renderTexture/RenderTexture';\n\n/**\n * System plugin to the renderer to manage filter states.\n * @ignore\n */\nexport class FilterState\n{\n    renderTexture: RenderTexture;\n\n    /**\n     * Target of the filters\n     * We store for case when custom filter wants to know the element it was applied on\n     * @member {PIXI.DisplayObject}\n     */\n    target: IFilterTarget;\n\n    /**\n     * Compatibility with PixiJS v4 filters\n     * @default false\n     */\n    legacy: boolean;\n\n    /**\n     * Resolution of filters\n     * @default 1\n     */\n    resolution: number;\n\n    /**\n     * Number of samples\n     * @default MSAA_QUALITY.NONE\n     */\n    multisample: MSAA_QUALITY;\n\n    /** Source frame. */\n    sourceFrame: Rectangle;\n\n    /** Destination frame. */\n    destinationFrame: Rectangle;\n\n    /** Original render-target source frame. */\n    bindingSourceFrame: Rectangle;\n\n    /** Original render-target destination frame. */\n    bindingDestinationFrame: Rectangle;\n\n    /** Collection of filters. */\n    filters: Array<Filter>;\n\n    /** Projection system transform saved by link. */\n    transform: Matrix;\n\n    constructor()\n    {\n        this.renderTexture = null;\n\n        this.target = null;\n        this.legacy = false;\n        this.resolution = 1;\n        this.multisample = MSAA_QUALITY.NONE;\n\n        // next three fields are created only for root\n        // re-assigned for everything else\n\n        this.sourceFrame = new Rectangle();\n        this.destinationFrame = new Rectangle();\n        this.bindingSourceFrame = new Rectangle();\n        this.bindingDestinationFrame = new Rectangle();\n        this.filters = [];\n        this.transform = null;\n    }\n\n    /** Clears the state */\n    clear(): void\n    {\n        this.target = null;\n        this.filters = null;\n        this.renderTexture = null;\n    }\n}\n", "import { RenderTexturePool } from '../renderTexture/RenderTexturePool';\nimport { Quad } from '../utils/Quad';\nimport { QuadUv } from '../utils/QuadUv';\nimport { Rectangle, Matrix, Point } from '@pixi/math';\nimport { UniformGroup } from '../shader/UniformGroup';\nimport { DRAW_MODES, CLEAR_MODES, MSAA_QUALITY } from '@pixi/constants';\nimport { FilterState } from './FilterState';\n\nimport type { ISystem } from '../ISystem';\nimport type { Filter } from './Filter';\nimport type { IFilterTarget } from './IFilterTarget';\nimport type { ISpriteMaskTarget } from './spriteMask/SpriteMaskFilter';\nimport type { RenderTexture } from '../renderTexture/RenderTexture';\nimport type { Renderer } from '../Renderer';\n\nconst tempPoints = [new Point(), new Point(), new Point(), new Point()];\nconst tempMatrix = new Matrix();\n\n/**\n * System plugin to the renderer to manage filters.\n *\n * ## Pipeline\n *\n * The FilterSystem executes the filtering pipeline by rendering the display-object into a texture, applying its\n * [filters]{@link PIXI.Filter} in series, and the last filter outputs into the final render-target.\n *\n * The filter-frame is the rectangle in world space being filtered, and those contents are mapped into\n * `(0, 0, filterFrame.width, filterFrame.height)` into the filter render-texture. The filter-frame is also called\n * the source-frame, as it is used to bind the filter render-textures. The last filter outputs to the `filterFrame`\n * in the final render-target.\n *\n * ## Usage\n *\n * {@link PIXI.Container#renderAdvanced} is an example of how to use the filter system. It is a 3 step process:\n *\n * **push**: Use {@link PIXI.FilterSystem#push} to push the set of filters to be applied on a filter-target.\n * **render**: Render the contents to be filtered using the renderer. The filter-system will only capture the contents\n *      inside the bounds of the filter-target. NOTE: Using {@link PIXI.Renderer#render} is\n *      illegal during an existing render cycle, and it may reset the filter system.\n * **pop**: Use {@link PIXI.FilterSystem#pop} to pop & execute the filters you initially pushed. It will apply them\n *      serially and output to the bounds of the filter-target.\n * @memberof PIXI\n */\nexport class FilterSystem implements ISystem\n{\n    /**\n     * List of filters for the FilterSystem\n     * @member {object[]}\n     */\n    public readonly defaultFilterStack: Array<FilterState>;\n\n    /** A pool for storing filter states, save us creating new ones each tick. */\n    public statePool: Array<FilterState>;\n\n    /** Stores a bunch of POT textures used for filtering. */\n    public texturePool: RenderTexturePool;\n\n    /** Whether to clear output renderTexture in AUTO/BLIT mode. See {@link PIXI.CLEAR_MODES}. */\n    public forceClear: boolean;\n\n    /**\n     * Old padding behavior is to use the max amount instead of sum padding.\n     * Use this flag if you need the old behavior.\n     * @default false\n     */\n    public useMaxPadding: boolean;\n\n    /** A very simple geometry used when drawing a filter effect to the screen. */\n    protected quad: Quad;\n\n    /** Quad UVs */\n    protected quadUv: QuadUv;\n\n    /**\n     * Active state\n     * @member {object}\n     */\n    protected activeState: FilterState;\n\n    /**\n     * This uniform group is attached to filter uniforms when used.\n     * @property {PIXI.Rectangle} outputFrame -\n     * @property {Float32Array} inputSize -\n     * @property {Float32Array} inputPixel -\n     * @property {Float32Array} inputClamp -\n     * @property {number} resolution -\n     * @property {Float32Array} filterArea -\n     * @property {Float32Array} filterClamp -\n     */\n    protected globalUniforms: UniformGroup;\n\n    /** Temporary rect for math. */\n    private tempRect: Rectangle;\n    public renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        this.defaultFilterStack = [{}] as any;\n\n        this.texturePool = new RenderTexturePool();\n        this.texturePool.setScreenSize(renderer.view);\n        this.statePool = [];\n\n        this.quad = new Quad();\n        this.quadUv = new QuadUv();\n        this.tempRect = new Rectangle();\n        this.activeState = {} as any;\n\n        this.globalUniforms = new UniformGroup({\n            outputFrame: new Rectangle(),\n            inputSize: new Float32Array(4),\n            inputPixel: new Float32Array(4),\n            inputClamp: new Float32Array(4),\n            resolution: 1,\n\n            // legacy variables\n            filterArea: new Float32Array(4),\n            filterClamp: new Float32Array(4),\n        }, true);\n\n        this.forceClear = false;\n        this.useMaxPadding = false;\n    }\n\n    /**\n     * Pushes a set of filters to be applied later to the system. This will redirect further rendering into an\n     * input render-texture for the rest of the filtering pipeline.\n     * @param {PIXI.DisplayObject} target - The target of the filter to render.\n     * @param filters - The filters to apply.\n     */\n    push(target: IFilterTarget, filters: Array<Filter>): void\n    {\n        const renderer = this.renderer;\n        const filterStack = this.defaultFilterStack;\n        const state = this.statePool.pop() || new FilterState();\n        const renderTextureSystem = this.renderer.renderTexture;\n\n        let resolution = filters[0].resolution;\n        let multisample = filters[0].multisample;\n        let padding = filters[0].padding;\n        let autoFit = filters[0].autoFit;\n        // We don't know whether it's a legacy filter until it was bound for the first time,\n        // therefore we have to assume that it is if legacy is undefined.\n        let legacy = filters[0].legacy ?? true;\n\n        for (let i = 1; i < filters.length; i++)\n        {\n            const filter = filters[i];\n\n            // let's use the lowest resolution\n            resolution = Math.min(resolution, filter.resolution);\n            // let's use the lowest number of samples\n            multisample = Math.min(multisample, filter.multisample);\n            // figure out the padding required for filters\n            padding = this.useMaxPadding\n                // old behavior: use largest amount of padding!\n                ? Math.max(padding, filter.padding)\n                // new behavior: sum the padding\n                : padding + filter.padding;\n            // only auto fit if all filters are autofit\n            autoFit = autoFit && filter.autoFit;\n\n            legacy = legacy || (filter.legacy ?? true);\n        }\n\n        if (filterStack.length === 1)\n        {\n            this.defaultFilterStack[0].renderTexture = renderTextureSystem.current;\n        }\n\n        filterStack.push(state);\n\n        state.resolution = resolution;\n        state.multisample = multisample;\n\n        state.legacy = legacy;\n\n        state.target = target;\n        state.sourceFrame.copyFrom(target.filterArea || target.getBounds(true));\n\n        state.sourceFrame.pad(padding);\n\n        const sourceFrameProjected = this.tempRect.copyFrom(renderTextureSystem.sourceFrame);\n\n        // Project source frame into world space (if projection is applied)\n        if (renderer.projection.transform)\n        {\n            this.transformAABB(\n                tempMatrix.copyFrom(renderer.projection.transform).invert(),\n                sourceFrameProjected\n            );\n        }\n\n        if (autoFit)\n        {\n            state.sourceFrame.fit(sourceFrameProjected);\n\n            if (state.sourceFrame.width <= 0 || state.sourceFrame.height <= 0)\n            {\n                state.sourceFrame.width = 0;\n                state.sourceFrame.height = 0;\n            }\n        }\n        else if (!state.sourceFrame.intersects(sourceFrameProjected))\n        {\n            state.sourceFrame.width = 0;\n            state.sourceFrame.height = 0;\n        }\n\n        // Round sourceFrame in screen space based on render-texture.\n        this.roundFrame(\n            state.sourceFrame,\n            renderTextureSystem.current ? renderTextureSystem.current.resolution : renderer.resolution,\n            renderTextureSystem.sourceFrame,\n            renderTextureSystem.destinationFrame,\n            renderer.projection.transform,\n        );\n\n        state.renderTexture = this.getOptimalFilterTexture(state.sourceFrame.width, state.sourceFrame.height,\n            resolution, multisample);\n        state.filters = filters;\n\n        state.destinationFrame.width = state.renderTexture.width;\n        state.destinationFrame.height = state.renderTexture.height;\n\n        const destinationFrame = this.tempRect;\n\n        destinationFrame.x = 0;\n        destinationFrame.y = 0;\n        destinationFrame.width = state.sourceFrame.width;\n        destinationFrame.height = state.sourceFrame.height;\n\n        state.renderTexture.filterFrame = state.sourceFrame;\n        state.bindingSourceFrame.copyFrom(renderTextureSystem.sourceFrame);\n        state.bindingDestinationFrame.copyFrom(renderTextureSystem.destinationFrame);\n\n        state.transform = renderer.projection.transform;\n        renderer.projection.transform = null;\n        renderTextureSystem.bind(state.renderTexture, state.sourceFrame, destinationFrame);\n        renderer.framebuffer.clear(0, 0, 0, 0);\n    }\n\n    /** Pops off the filter and applies it. */\n    pop(): void\n    {\n        const filterStack = this.defaultFilterStack;\n        const state = filterStack.pop();\n        const filters = state.filters;\n\n        this.activeState = state;\n\n        const globalUniforms = this.globalUniforms.uniforms;\n\n        globalUniforms.outputFrame = state.sourceFrame;\n        globalUniforms.resolution = state.resolution;\n\n        const inputSize = globalUniforms.inputSize;\n        const inputPixel = globalUniforms.inputPixel;\n        const inputClamp = globalUniforms.inputClamp;\n\n        inputSize[0] = state.destinationFrame.width;\n        inputSize[1] = state.destinationFrame.height;\n        inputSize[2] = 1.0 / inputSize[0];\n        inputSize[3] = 1.0 / inputSize[1];\n\n        inputPixel[0] = Math.round(inputSize[0] * state.resolution);\n        inputPixel[1] = Math.round(inputSize[1] * state.resolution);\n        inputPixel[2] = 1.0 / inputPixel[0];\n        inputPixel[3] = 1.0 / inputPixel[1];\n\n        inputClamp[0] = 0.5 * inputPixel[2];\n        inputClamp[1] = 0.5 * inputPixel[3];\n        inputClamp[2] = (state.sourceFrame.width * inputSize[2]) - (0.5 * inputPixel[2]);\n        inputClamp[3] = (state.sourceFrame.height * inputSize[3]) - (0.5 * inputPixel[3]);\n\n        // only update the rect if its legacy..\n        if (state.legacy)\n        {\n            const filterArea = globalUniforms.filterArea;\n\n            filterArea[0] = state.destinationFrame.width;\n            filterArea[1] = state.destinationFrame.height;\n            filterArea[2] = state.sourceFrame.x;\n            filterArea[3] = state.sourceFrame.y;\n\n            globalUniforms.filterClamp = globalUniforms.inputClamp;\n        }\n\n        this.globalUniforms.update();\n\n        const lastState = filterStack[filterStack.length - 1];\n\n        this.renderer.framebuffer.blit();\n\n        if (filters.length === 1)\n        {\n            filters[0].apply(this, state.renderTexture, lastState.renderTexture, CLEAR_MODES.BLEND, state);\n\n            this.returnFilterTexture(state.renderTexture);\n        }\n        else\n        {\n            let flip = state.renderTexture;\n            let flop = this.getOptimalFilterTexture(\n                flip.width,\n                flip.height,\n                state.resolution\n            );\n\n            flop.filterFrame = flip.filterFrame;\n\n            let i = 0;\n\n            for (i = 0; i < filters.length - 1; ++i)\n            {\n                if (i === 1 && state.multisample > 1)\n                {\n                    flop = this.getOptimalFilterTexture(\n                        flip.width,\n                        flip.height,\n                        state.resolution\n                    );\n\n                    flop.filterFrame = flip.filterFrame;\n                }\n\n                filters[i].apply(this, flip, flop, CLEAR_MODES.CLEAR, state);\n\n                const t = flip;\n\n                flip = flop;\n                flop = t;\n            }\n\n            filters[i].apply(this, flip, lastState.renderTexture, CLEAR_MODES.BLEND, state);\n\n            if (i > 1 && state.multisample > 1)\n            {\n                this.returnFilterTexture(state.renderTexture);\n            }\n\n            this.returnFilterTexture(flip);\n            this.returnFilterTexture(flop);\n        }\n\n        // lastState.renderTexture is blitted when lastState is popped\n\n        state.clear();\n        this.statePool.push(state);\n    }\n\n    /**\n     * Binds a renderTexture with corresponding `filterFrame`, clears it if mode corresponds.\n     * @param filterTexture - renderTexture to bind, should belong to filter pool or filter stack\n     * @param clearMode - clearMode, by default its CLEAR/YES. See {@link PIXI.CLEAR_MODES}\n     */\n    bindAndClear(filterTexture: RenderTexture, clearMode: CLEAR_MODES = CLEAR_MODES.CLEAR): void\n    {\n        const {\n            renderTexture: renderTextureSystem,\n            state: stateSystem,\n        } = this.renderer;\n\n        if (filterTexture === this.defaultFilterStack[this.defaultFilterStack.length - 1].renderTexture)\n        {\n            // Restore projection transform if rendering into the output render-target.\n            this.renderer.projection.transform = this.activeState.transform;\n        }\n        else\n        {\n            // Prevent projection within filtering pipeline.\n            this.renderer.projection.transform = null;\n        }\n\n        if (filterTexture && filterTexture.filterFrame)\n        {\n            const destinationFrame = this.tempRect;\n\n            destinationFrame.x = 0;\n            destinationFrame.y = 0;\n            destinationFrame.width = filterTexture.filterFrame.width;\n            destinationFrame.height = filterTexture.filterFrame.height;\n\n            renderTextureSystem.bind(filterTexture, filterTexture.filterFrame, destinationFrame);\n        }\n        else if (filterTexture !== this.defaultFilterStack[this.defaultFilterStack.length - 1].renderTexture)\n        {\n            renderTextureSystem.bind(filterTexture);\n        }\n        else\n        {\n            // Restore binding for output render-target.\n            this.renderer.renderTexture.bind(\n                filterTexture,\n                this.activeState.bindingSourceFrame,\n                this.activeState.bindingDestinationFrame\n            );\n        }\n\n        // Clear the texture in BLIT mode if blending is disabled or the forceClear flag is set. The blending\n        // is stored in the 0th bit of the state.\n        const autoClear = (stateSystem.stateId & 1) || this.forceClear;\n\n        if (clearMode === CLEAR_MODES.CLEAR\n            || (clearMode === CLEAR_MODES.BLIT && autoClear))\n        {\n            // Use framebuffer.clear because we want to clear the whole filter texture, not just the filtering\n            // area over which the shaders are run. This is because filters may sampling outside of it (e.g. blur)\n            // instead of clamping their arithmetic.\n            this.renderer.framebuffer.clear(0, 0, 0, 0);\n        }\n    }\n\n    /**\n     * Draws a filter using the default rendering process.\n     *\n     * This should be called only by {@link Filter#apply}.\n     * @param filter - The filter to draw.\n     * @param input - The input render target.\n     * @param output - The target to output to.\n     * @param clearMode - Should the output be cleared before rendering to it\n     */\n    applyFilter(filter: Filter, input: RenderTexture, output: RenderTexture, clearMode?: CLEAR_MODES): void\n    {\n        const renderer = this.renderer;\n\n        // Set state before binding, so bindAndClear gets the blend mode.\n        renderer.state.set(filter.state);\n        this.bindAndClear(output, clearMode);\n\n        // set the uniforms..\n        filter.uniforms.uSampler = input;\n        filter.uniforms.filterGlobals = this.globalUniforms;\n\n        // TODO make it so that the order of this does not matter..\n        // because it does at the moment cos of global uniforms.\n        // they need to get resynced\n        renderer.shader.bind(filter);\n\n        // check to see if the filter is a legacy one..\n        filter.legacy = !!filter.program.attributeData.aTextureCoord;\n\n        if (filter.legacy)\n        {\n            this.quadUv.map(input._frame, input.filterFrame);\n\n            renderer.geometry.bind(this.quadUv);\n            renderer.geometry.draw(DRAW_MODES.TRIANGLES);\n        }\n        else\n        {\n            renderer.geometry.bind(this.quad);\n            renderer.geometry.draw(DRAW_MODES.TRIANGLE_STRIP);\n        }\n    }\n\n    /**\n     * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n     *\n     * Use `outputMatrix * vTextureCoord` in the shader.\n     * @param outputMatrix - The matrix to output to.\n     * @param {PIXI.Sprite} sprite - The sprite to map to.\n     * @returns The mapped matrix.\n     */\n    calculateSpriteMatrix(outputMatrix: Matrix, sprite: ISpriteMaskTarget): Matrix\n    {\n        const { sourceFrame, destinationFrame } = this.activeState;\n        const { orig } = sprite._texture;\n        const mappedMatrix = outputMatrix.set(destinationFrame.width, 0, 0,\n            destinationFrame.height, sourceFrame.x, sourceFrame.y);\n        const worldTransform = sprite.worldTransform.copyTo(Matrix.TEMP_MATRIX);\n\n        worldTransform.invert();\n        mappedMatrix.prepend(worldTransform);\n        mappedMatrix.scale(1.0 / orig.width, 1.0 / orig.height);\n        mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n\n        return mappedMatrix;\n    }\n\n    /** Destroys this Filter System. */\n    destroy(): void\n    {\n        this.renderer = null;\n\n        // Those textures has to be destroyed by RenderTextureSystem or FramebufferSystem\n        this.texturePool.clear(false);\n    }\n\n    /**\n     * Gets a Power-of-Two render texture or fullScreen texture\n     * @param minWidth - The minimum width of the render texture in real pixels.\n     * @param minHeight - The minimum height of the render texture in real pixels.\n     * @param resolution - The resolution of the render texture.\n     * @param multisample - Number of samples of the render texture.\n     * @returns - The new render texture.\n     */\n    protected getOptimalFilterTexture(minWidth: number, minHeight: number, resolution = 1,\n        multisample: MSAA_QUALITY = MSAA_QUALITY.NONE): RenderTexture\n    {\n        return this.texturePool.getOptimalTexture(minWidth, minHeight, resolution, multisample);\n    }\n\n    /**\n     * Gets extra render texture to use inside current filter\n     * To be compliant with older filters, you can use params in any order\n     * @param input - renderTexture from which size and resolution will be copied\n     * @param resolution - override resolution of the renderTexture\n     * @param multisample - number of samples of the renderTexture\n     */\n    getFilterTexture(input?: RenderTexture, resolution?: number, multisample?: MSAA_QUALITY): RenderTexture\n    {\n        if (typeof input === 'number')\n        {\n            const swap = input;\n\n            input = resolution as any;\n            resolution = swap;\n        }\n\n        input = input || this.activeState.renderTexture;\n\n        const filterTexture = this.texturePool.getOptimalTexture(input.width, input.height, resolution || input.resolution,\n            multisample || MSAA_QUALITY.NONE);\n\n        filterTexture.filterFrame = input.filterFrame;\n\n        return filterTexture;\n    }\n\n    /**\n     * Frees a render texture back into the pool.\n     * @param renderTexture - The renderTarget to free\n     */\n    returnFilterTexture(renderTexture: RenderTexture): void\n    {\n        this.texturePool.returnTexture(renderTexture);\n    }\n\n    /** Empties the texture pool. */\n    emptyPool(): void\n    {\n        this.texturePool.clear(true);\n    }\n\n    /** Calls `texturePool.resize()`, affects fullScreen renderTextures. */\n    resize(): void\n    {\n        this.texturePool.setScreenSize(this.renderer.view);\n    }\n\n    /**\n     * @param matrix - first param\n     * @param rect - second param\n     */\n    private transformAABB(matrix: Matrix, rect: Rectangle): void\n    {\n        const lt = tempPoints[0];\n        const lb = tempPoints[1];\n        const rt = tempPoints[2];\n        const rb = tempPoints[3];\n\n        lt.set(rect.left, rect.top);\n        lb.set(rect.left, rect.bottom);\n        rt.set(rect.right, rect.top);\n        rb.set(rect.right, rect.bottom);\n\n        matrix.apply(lt, lt);\n        matrix.apply(lb, lb);\n        matrix.apply(rt, rt);\n        matrix.apply(rb, rb);\n\n        const x0 = Math.min(lt.x, lb.x, rt.x, rb.x);\n        const y0 = Math.min(lt.y, lb.y, rt.y, rb.y);\n        const x1 = Math.max(lt.x, lb.x, rt.x, rb.x);\n        const y1 = Math.max(lt.y, lb.y, rt.y, rb.y);\n\n        rect.x = x0;\n        rect.y = y0;\n        rect.width = x1 - x0;\n        rect.height = y1 - y0;\n    }\n\n    private roundFrame(\n        frame: Rectangle,\n        resolution: number,\n        bindingSourceFrame: Rectangle,\n        bindingDestinationFrame: Rectangle,\n        transform?: Matrix\n    )\n    {\n        if (frame.width <= 0 || frame.height <= 0 || bindingSourceFrame.width <= 0 || bindingSourceFrame.height <= 0)\n        {\n            return;\n        }\n\n        if (transform)\n        {\n            const { a, b, c, d } = transform;\n\n            // Skip if skew/rotation present in matrix, except for multiple of 90° rotation. If rotation\n            // is a multiple of 90°, then either pair of (b,c) or (a,d) will be (0,0).\n            if ((Math.abs(b) > 1e-4 || Math.abs(c) > 1e-4)\n                && (Math.abs(a) > 1e-4 || Math.abs(d) > 1e-4))\n            {\n                return;\n            }\n        }\n\n        transform = transform ? tempMatrix.copyFrom(transform) : tempMatrix.identity();\n\n        // Get forward transform from world space to screen space\n        transform\n            .translate(-bindingSourceFrame.x, -bindingSourceFrame.y)\n            .scale(\n                bindingDestinationFrame.width / bindingSourceFrame.width,\n                bindingDestinationFrame.height / bindingSourceFrame.height)\n            .translate(bindingDestinationFrame.x, bindingDestinationFrame.y);\n\n        // Convert frame to screen space\n        this.transformAABB(transform, frame);\n\n        // Round frame in screen space\n        frame.ceil(resolution);\n\n        // Project back into world space.\n        this.transformAABB(transform.invert(), frame);\n    }\n}\n", "import type { ISystem } from '../ISystem';\nimport type { Renderer } from '../Renderer';\n\n/**\n * Base for a common object renderer that can be used as a\n * system renderer plugin.\n * @memberof PIXI\n */\nexport class ObjectRenderer implements ISystem\n{\n    /** The renderer this manager works for. */\n    protected renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this manager works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /** Stub method that should be used to empty the current batch by rendering objects now. */\n    flush(): void\n    {\n        // flush!\n    }\n\n    /** Generic destruction method that frees all resources. This should be called by subclasses. */\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n\n    /**\n     * Stub method that initializes any state required before\n     * rendering starts. It is different from the `prerender`\n     * signal, which occurs every frame, in that it is called\n     * whenever an object requests _this_ renderer specifically.\n     */\n    start(): void\n    {\n        // set the shader..\n    }\n\n    /** Stops the renderer. It should free up any state and become dormant. */\n    stop(): void\n    {\n        this.flush();\n    }\n\n    /**\n     * Keeps the object to render. It doesn't have to be\n     * rendered immediately.\n     * @param {PIXI.DisplayObject} _object - The object to render.\n     */\n    render(_object: any): void // eslint-disable-line @typescript-eslint/explicit-module-boundary-types\n    {\n        // render the object\n    }\n}\n", "import { ObjectRenderer } from './ObjectRenderer';\n\nimport type { ISystem } from '../ISystem';\nimport type { Renderer } from '../Renderer';\nimport type { BaseTexture } from '../textures/BaseTexture';\nimport type { BatchTextureArray } from './BatchTextureArray';\n\n/**\n * System plugin to the renderer to manage batching.\n * @memberof PIXI\n */\nexport class BatchSystem implements ISystem\n{\n    /** An empty renderer. */\n    public readonly emptyRenderer: ObjectRenderer;\n\n    /** The currently active ObjectRenderer. */\n    public currentRenderer: ObjectRenderer;\n    private renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n        this.emptyRenderer = new ObjectRenderer(renderer);\n        this.currentRenderer = this.emptyRenderer;\n    }\n\n    /**\n     * Changes the current renderer to the one given in parameter\n     * @param objectRenderer - The object renderer to use.\n     */\n    setObjectRenderer(objectRenderer: ObjectRenderer): void\n    {\n        if (this.currentRenderer === objectRenderer)\n        {\n            return;\n        }\n\n        this.currentRenderer.stop();\n        this.currentRenderer = objectRenderer;\n\n        this.currentRenderer.start();\n    }\n\n    /**\n     * This should be called if you wish to do some custom rendering\n     * It will basically render anything that may be batched up such as sprites\n     */\n    flush(): void\n    {\n        this.setObjectRenderer(this.emptyRenderer);\n    }\n\n    /** Reset the system to an empty renderer */\n    reset(): void\n    {\n        this.setObjectRenderer(this.emptyRenderer);\n    }\n\n    /**\n     * Handy function for batch renderers: copies bound textures in first maxTextures locations to array\n     * sets actual _batchLocation for them\n     * @param arr - arr copy destination\n     * @param maxTextures - number of copied elements\n     */\n    copyBoundTextures(arr: BaseTexture[], maxTextures: number): void\n    {\n        const { boundTextures } = this.renderer.texture;\n\n        for (let i = maxTextures - 1; i >= 0; --i)\n        {\n            arr[i] = boundTextures[i] || null;\n            if (arr[i])\n            {\n                arr[i]._batchLocation = i;\n            }\n        }\n    }\n\n    /**\n     * Assigns batch locations to textures in array based on boundTextures state.\n     * All textures in texArray should have `_batchEnabled = _batchId`,\n     * and their count should be less than `maxTextures`.\n     * @param texArray - textures to bound\n     * @param boundTextures - current state of bound textures\n     * @param batchId - marker for _batchEnabled param of textures in texArray\n     * @param maxTextures - number of texture locations to manipulate\n     */\n    boundArray(texArray: BatchTextureArray, boundTextures: Array<BaseTexture>,\n        batchId: number, maxTextures: number): void\n    {\n        const { elements, ids, count } = texArray;\n        let j = 0;\n\n        for (let i = 0; i < count; i++)\n        {\n            const tex = elements[i];\n            const loc = tex._batchLocation;\n\n            if (loc >= 0 && loc < maxTextures\n                && boundTextures[loc] === tex)\n            {\n                ids[i] = loc;\n                continue;\n            }\n\n            while (j < maxTextures)\n            {\n                const bound = boundTextures[j];\n\n                if (bound && bound._batchEnabled === batchId\n                    && bound._batchLocation === j)\n                {\n                    j++;\n                    continue;\n                }\n\n                ids[i] = j;\n                tex._batchLocation = j;\n                boundTextures[j] = tex;\n                break;\n            }\n        }\n    }\n\n    /**\n     * @ignore\n     */\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n", "import { ENV } from '@pixi/constants';\nimport { settings } from '../settings';\n\nimport type { ISystem } from '../ISystem';\nimport type { IRenderingContext } from '../IRenderingContext';\nimport type { Renderer } from '../Renderer';\nimport type { WebGLExtensions } from './WebGLExtensions';\n\nlet CONTEXT_UID_COUNTER = 0;\n\nexport interface ISupportDict\n{\n    uint32Indices: boolean;\n}\n\n/**\n * System plugin to the renderer to manage the context.\n * @memberof PIXI\n */\nexport class ContextSystem implements ISystem\n{\n    /**\n     * Either 1 or 2 to reflect the WebGL version being used.\n     * @readonly\n     */\n    public webGLVersion: number;\n\n    /**\n     * Features supported by current context.\n     * @type {object}\n     * @readonly\n     * @property {boolean} uint32Indices - Support for 32-bit indices buffer.\n     */\n    readonly supports: ISupportDict;\n\n    protected CONTEXT_UID: number;\n    protected gl: IRenderingContext;\n\n    /**\n     * Extensions available.\n     * @type {object}\n     * @readonly\n     * @property {WEBGL_draw_buffers} drawBuffers - WebGL v1 extension\n     * @property {WEBGL_depth_texture} depthTexture - WebGL v1 extension\n     * @property {OES_texture_float} floatTexture - WebGL v1 extension\n     * @property {WEBGL_lose_context} loseContext - WebGL v1 extension\n     * @property {OES_vertex_array_object} vertexArrayObject - WebGL v1 extension\n     * @property {EXT_texture_filter_anisotropic} anisotropicFiltering - WebGL v1 and v2 extension\n     */\n    public extensions: WebGLExtensions;\n\n    private renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        this.webGLVersion = 1;\n        this.extensions = {};\n\n        this.supports = {\n            uint32Indices: false,\n        };\n\n        // Bind functions\n        this.handleContextLost = this.handleContextLost.bind(this);\n        this.handleContextRestored = this.handleContextRestored.bind(this);\n\n        (renderer.view as any).addEventListener('webglcontextlost', this.handleContextLost, false);\n        renderer.view.addEventListener('webglcontextrestored', this.handleContextRestored, false);\n    }\n\n    /**\n     * `true` if the context is lost\n     * @readonly\n     */\n    get isLost(): boolean\n    {\n        return (!this.gl || this.gl.isContextLost());\n    }\n\n    /**\n     * Handles the context change event.\n     * @param {WebGLRenderingContext} gl - New WebGL context.\n     */\n    protected contextChange(gl: IRenderingContext): void\n    {\n        this.gl = gl;\n        this.renderer.gl = gl;\n        this.renderer.CONTEXT_UID = CONTEXT_UID_COUNTER++;\n    }\n\n    /**\n     * Initializes the context.\n     * @protected\n     * @param {WebGLRenderingContext} gl - WebGL context\n     */\n    initFromContext(gl: IRenderingContext): void\n    {\n        this.gl = gl;\n        this.validateContext(gl);\n        this.renderer.gl = gl;\n        this.renderer.CONTEXT_UID = CONTEXT_UID_COUNTER++;\n        this.renderer.runners.contextChange.emit(gl);\n    }\n\n    /**\n     * Initialize from context options\n     * @protected\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\n     * @param {object} options - context attributes\n     */\n    initFromOptions(options: WebGLContextAttributes): void\n    {\n        const gl = this.createContext(this.renderer.view, options);\n\n        this.initFromContext(gl);\n    }\n\n    /**\n     * Helper class to create a WebGL Context\n     * @param canvas - the canvas element that we will get the context from\n     * @param options - An options object that gets passed in to the canvas element containing the\n     *    context attributes\n     * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext\n     * @returns {WebGLRenderingContext} the WebGL context\n     */\n    createContext(canvas: HTMLCanvasElement, options: WebGLContextAttributes): IRenderingContext\n    {\n        let gl;\n\n        if (settings.PREFER_ENV >= ENV.WEBGL2)\n        {\n            gl = canvas.getContext('webgl2', options);\n        }\n\n        if (gl)\n        {\n            this.webGLVersion = 2;\n        }\n        else\n        {\n            this.webGLVersion = 1;\n\n            gl = canvas.getContext('webgl', options) || canvas.getContext('experimental-webgl', options);\n\n            if (!gl)\n            {\n                // fail, not able to get a context\n                throw new Error('This browser does not support WebGL. Try using the canvas renderer');\n            }\n        }\n\n        this.gl = gl as IRenderingContext;\n\n        this.getExtensions();\n\n        return this.gl;\n    }\n\n    /** Auto-populate the {@link PIXI.ContextSystem.extensions extensions}. */\n    protected getExtensions(): void\n    {\n        // time to set up default extensions that Pixi uses.\n        const { gl } = this;\n\n        const common = {\n            loseContext: gl.getExtension('WEBGL_lose_context'),\n            anisotropicFiltering: gl.getExtension('EXT_texture_filter_anisotropic'),\n            floatTextureLinear: gl.getExtension('OES_texture_float_linear'),\n\n            s3tc: gl.getExtension('WEBGL_compressed_texture_s3tc'),\n            s3tc_sRGB: gl.getExtension('WEBGL_compressed_texture_s3tc_srgb'), // eslint-disable-line camelcase\n            etc: gl.getExtension('WEBGL_compressed_texture_etc'),\n            etc1: gl.getExtension('WEBGL_compressed_texture_etc1'),\n            pvrtc: gl.getExtension('WEBGL_compressed_texture_pvrtc')\n                || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),\n            atc: gl.getExtension('WEBGL_compressed_texture_atc'),\n            astc: gl.getExtension('WEBGL_compressed_texture_astc')\n        };\n\n        if (this.webGLVersion === 1)\n        {\n            Object.assign(this.extensions, common, {\n                drawBuffers: gl.getExtension('WEBGL_draw_buffers'),\n                depthTexture: gl.getExtension('WEBGL_depth_texture'),\n                vertexArrayObject: gl.getExtension('OES_vertex_array_object')\n                    || gl.getExtension('MOZ_OES_vertex_array_object')\n                    || gl.getExtension('WEBKIT_OES_vertex_array_object'),\n                uint32ElementIndex: gl.getExtension('OES_element_index_uint'),\n                // Floats and half-floats\n                floatTexture: gl.getExtension('OES_texture_float'),\n                floatTextureLinear: gl.getExtension('OES_texture_float_linear'),\n                textureHalfFloat: gl.getExtension('OES_texture_half_float'),\n                textureHalfFloatLinear: gl.getExtension('OES_texture_half_float_linear'),\n            });\n        }\n        else if (this.webGLVersion === 2)\n        {\n            Object.assign(this.extensions, common, {\n                // Floats and half-floats\n                colorBufferFloat: gl.getExtension('EXT_color_buffer_float')\n            });\n        }\n    }\n\n    /**\n     * Handles a lost webgl context\n     * @param {WebGLContextEvent} event - The context lost event.\n     */\n    protected handleContextLost(event: WebGLContextEvent): void\n    {\n        // Prevent default to be able to restore the context\n        event.preventDefault();\n\n        // Restore the context after this event has exited\n        setTimeout(() =>\n        {\n            if (this.gl.isContextLost() && this.extensions.loseContext)\n            {\n                this.extensions.loseContext.restoreContext();\n            }\n        }, 0);\n    }\n\n    /** Handles a restored webgl context. */\n    protected handleContextRestored(): void\n    {\n        this.renderer.runners.contextChange.emit(this.gl);\n    }\n\n    destroy(): void\n    {\n        const view = this.renderer.view;\n\n        this.renderer = null;\n\n        // remove listeners\n        (view as any).removeEventListener('webglcontextlost', this.handleContextLost);\n        view.removeEventListener('webglcontextrestored', this.handleContextRestored);\n\n        this.gl.useProgram(null);\n\n        if (this.extensions.loseContext)\n        {\n            this.extensions.loseContext.loseContext();\n        }\n    }\n\n    /** Handle the post-render runner event. */\n    protected postrender(): void\n    {\n        if (this.renderer.renderingToScreen)\n        {\n            this.gl.flush();\n        }\n    }\n\n    /**\n     * Validate context.\n     * @param {WebGLRenderingContext} gl - Render context.\n     */\n    protected validateContext(gl: IRenderingContext): void\n    {\n        const attributes = gl.getContextAttributes();\n\n        const isWebGl2 = 'WebGL2RenderingContext' in globalThis && gl instanceof globalThis.WebGL2RenderingContext;\n\n        if (isWebGl2)\n        {\n            this.webGLVersion = 2;\n        }\n\n        // this is going to be fairly simple for now.. but at least we have room to grow!\n        if (attributes && !attributes.stencil)\n        {\n            /* eslint-disable max-len, no-console */\n            console.warn('Provided WebGL context does not have a stencil buffer, masks may not render correctly');\n            /* eslint-enable max-len, no-console */\n        }\n\n        const hasuint32 = isWebGl2 || !!(gl as WebGLRenderingContext).getExtension('OES_element_index_uint');\n\n        this.supports.uint32Indices = hasuint32;\n\n        if (!hasuint32)\n        {\n            /* eslint-disable max-len, no-console */\n            console.warn('Provided WebGL context does not support 32 index buffer, complex graphics may not render correctly');\n            /* eslint-enable max-len, no-console */\n        }\n    }\n}\n", "import { MSAA_QUALITY } from '@pixi/constants';\n\nimport type { Framebuffer } from './Framebuffer';\n\n/**\n * Internal framebuffer for WebGL context.\n * @memberof PIXI\n */\nexport class GLFramebuffer\n{\n    /** The WebGL framebuffer. */\n    public framebuffer: WebGLFramebuffer;\n\n    /** Stencil+depth , usually costs 32bits per pixel. */\n    public stencil: WebGLRenderbuffer;\n\n    /** Detected AA samples number. */\n    public multisample: MSAA_QUALITY;\n\n    /** In case MSAA, we use this Renderbuffer instead of colorTextures[0] when we write info. */\n    public msaaBuffer: WebGLRenderbuffer;\n\n    /**\n     * In case we use MSAA, this is actual framebuffer that has colorTextures[0]\n     * The contents of that framebuffer are read when we use that renderTexture in sprites\n     */\n    public blitFramebuffer: Framebuffer;\n\n    /** Latest known version of framebuffer. */\n    dirtyId: number;\n\n    /** Latest known version of framebuffer format. */\n    dirtyFormat: number;\n\n    /** Latest known version of framebuffer size. */\n    dirtySize: number;\n\n    /** Store the current mipmap of the textures the framebuffer will write too. */\n    mipLevel: number;\n\n    constructor(framebuffer: WebGLTexture)\n    {\n        this.framebuffer = framebuffer;\n        this.stencil = null;\n        this.dirtyId = -1;\n        this.dirtyFormat = -1;\n        this.dirtySize = -1;\n        this.multisample = MSAA_QUALITY.NONE;\n        this.msaaBuffer = null;\n        this.blitFramebuffer = null;\n        this.mipLevel = 0;\n    }\n}\n", "import { Rectangle } from '@pixi/math';\nimport { ENV, BUFFER_BITS, MSAA_QUALITY } from '@pixi/constants';\nimport { settings } from '../settings';\nimport { Framebuffer } from './Framebuffer';\nimport { GLFramebuffer } from './GLFramebuffer';\n\nimport type { ISystem } from '../ISystem';\nimport type { Renderer } from '../Renderer';\nimport type { IRenderingContext } from '../IRenderingContext';\n\nconst tempRectangle = new Rectangle();\n\n/**\n * System plugin to the renderer to manage framebuffers.\n * @memberof PIXI\n */\nexport class FramebufferSystem implements ISystem\n{\n    /** A list of managed framebuffers. */\n    public readonly managedFramebuffers: Array<Framebuffer>;\n    public current: Framebuffer;\n    public viewport: Rectangle;\n    public hasMRT: boolean;\n    public writeDepthTexture: boolean;\n    protected CONTEXT_UID: number;\n    protected gl: IRenderingContext;\n\n    /** Framebuffer value that shows that we don't know what is bound. */\n    protected unknownFramebuffer: Framebuffer;\n    protected msaaSamples: Array<number>;\n    public renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n        this.managedFramebuffers = [];\n        this.unknownFramebuffer = new Framebuffer(10, 10);\n\n        this.msaaSamples = null;\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    protected contextChange(): void\n    {\n        this.disposeAll(true);\n\n        const gl = this.gl = this.renderer.gl;\n\n        this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n        this.current = this.unknownFramebuffer;\n        this.viewport = new Rectangle();\n        this.hasMRT = true;\n        this.writeDepthTexture = true;\n\n        // webgl2\n        if (this.renderer.context.webGLVersion === 1)\n        {\n            // webgl 1!\n            let nativeDrawBuffersExtension = this.renderer.context.extensions.drawBuffers;\n            let nativeDepthTextureExtension = this.renderer.context.extensions.depthTexture;\n\n            if (settings.PREFER_ENV === ENV.WEBGL_LEGACY)\n            {\n                nativeDrawBuffersExtension = null;\n                nativeDepthTextureExtension = null;\n            }\n\n            if (nativeDrawBuffersExtension)\n            {\n                gl.drawBuffers = (activeTextures: number[]): void =>\n                    nativeDrawBuffersExtension.drawBuffersWEBGL(activeTextures);\n            }\n            else\n            {\n                this.hasMRT = false;\n                gl.drawBuffers = (): void =>\n                {\n                    // empty\n                };\n            }\n\n            if (!nativeDepthTextureExtension)\n            {\n                this.writeDepthTexture = false;\n            }\n        }\n        else\n        {\n            // WebGL2\n            // cache possible MSAA samples\n            this.msaaSamples = gl.getInternalformatParameter(gl.RENDERBUFFER, gl.RGBA8, gl.SAMPLES);\n        }\n    }\n\n    /**\n     * Bind a framebuffer.\n     * @param framebuffer\n     * @param frame - frame, default is framebuffer size\n     * @param mipLevel - optional mip level to set on the framebuffer - defaults to 0\n     */\n    bind(framebuffer?: Framebuffer, frame?: Rectangle, mipLevel = 0): void\n    {\n        const { gl } = this;\n\n        if (framebuffer)\n        {\n            // TODO caching layer!\n\n            const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID] || this.initFramebuffer(framebuffer);\n\n            if (this.current !== framebuffer)\n            {\n                this.current = framebuffer;\n                gl.bindFramebuffer(gl.FRAMEBUFFER, fbo.framebuffer);\n            }\n            // make sure all textures are unbound..\n\n            if (fbo.mipLevel !== mipLevel)\n            {\n                framebuffer.dirtyId++;\n                framebuffer.dirtyFormat++;\n                fbo.mipLevel = mipLevel;\n            }\n\n            // now check for updates...\n            if (fbo.dirtyId !== framebuffer.dirtyId)\n            {\n                fbo.dirtyId = framebuffer.dirtyId;\n\n                if (fbo.dirtyFormat !== framebuffer.dirtyFormat)\n                {\n                    fbo.dirtyFormat = framebuffer.dirtyFormat;\n                    fbo.dirtySize = framebuffer.dirtySize;\n                    this.updateFramebuffer(framebuffer, mipLevel);\n                }\n                else if (fbo.dirtySize !== framebuffer.dirtySize)\n                {\n                    fbo.dirtySize = framebuffer.dirtySize;\n                    this.resizeFramebuffer(framebuffer);\n                }\n            }\n\n            for (let i = 0; i < framebuffer.colorTextures.length; i++)\n            {\n                const tex = framebuffer.colorTextures[i];\n\n                this.renderer.texture.unbind(tex.parentTextureArray || tex);\n            }\n\n            if (framebuffer.depthTexture)\n            {\n                this.renderer.texture.unbind(framebuffer.depthTexture);\n            }\n\n            if (frame)\n            {\n                const mipWidth = (frame.width >> mipLevel);\n                const mipHeight = (frame.height >> mipLevel);\n\n                const scale = mipWidth / frame.width;\n\n                this.setViewport(\n                    frame.x * scale,\n                    frame.y * scale,\n                    mipWidth,\n                    mipHeight\n                );\n            }\n            else\n            {\n                const mipWidth = (framebuffer.width >> mipLevel);\n                const mipHeight = (framebuffer.height >> mipLevel);\n\n                this.setViewport(0, 0, mipWidth, mipHeight);\n            }\n        }\n        else\n        {\n            if (this.current)\n            {\n                this.current = null;\n                gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n            }\n\n            if (frame)\n            {\n                this.setViewport(frame.x, frame.y, frame.width, frame.height);\n            }\n            else\n            {\n                this.setViewport(0, 0, this.renderer.width, this.renderer.height);\n            }\n        }\n    }\n\n    /**\n     * Set the WebGLRenderingContext's viewport.\n     * @param x - X position of viewport\n     * @param y - Y position of viewport\n     * @param width - Width of viewport\n     * @param height - Height of viewport\n     */\n    setViewport(x: number, y: number, width: number, height: number): void\n    {\n        const v = this.viewport;\n\n        x = Math.round(x);\n        y = Math.round(y);\n        width = Math.round(width);\n        height = Math.round(height);\n\n        if (v.width !== width || v.height !== height || v.x !== x || v.y !== y)\n        {\n            v.x = x;\n            v.y = y;\n            v.width = width;\n            v.height = height;\n\n            this.gl.viewport(x, y, width, height);\n        }\n    }\n\n    /**\n     * Get the size of the current width and height. Returns object with `width` and `height` values.\n     * @readonly\n     */\n    get size(): { x: number; y: number; width: number; height: number }\n    {\n        if (this.current)\n        {\n            // TODO store temp\n            return { x: 0, y: 0, width: this.current.width, height: this.current.height };\n        }\n\n        return { x: 0, y: 0, width: this.renderer.width, height: this.renderer.height };\n    }\n\n    /**\n     * Clear the color of the context\n     * @param r - Red value from 0 to 1\n     * @param g - Green value from 0 to 1\n     * @param b - Blue value from 0 to 1\n     * @param a - Alpha value from 0 to 1\n     * @param {PIXI.BUFFER_BITS} [mask=BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH] - Bitwise OR of masks\n     *  that indicate the buffers to be cleared, by default COLOR and DEPTH buffers.\n     */\n    clear(r: number, g: number, b: number, a: number, mask: BUFFER_BITS = BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH): void\n    {\n        const { gl } = this;\n\n        // TODO clear color can be set only one right?\n        gl.clearColor(r, g, b, a);\n        gl.clear(mask);\n    }\n\n    /**\n     * Initialize framebuffer for this context\n     * @protected\n     * @param framebuffer\n     * @returns - created GLFramebuffer\n     */\n    initFramebuffer(framebuffer: Framebuffer): GLFramebuffer\n    {\n        const { gl } = this;\n        const fbo = new GLFramebuffer(gl.createFramebuffer());\n\n        fbo.multisample = this.detectSamples(framebuffer.multisample);\n        framebuffer.glFramebuffers[this.CONTEXT_UID] = fbo;\n\n        this.managedFramebuffers.push(framebuffer);\n        framebuffer.disposeRunner.add(this);\n\n        return fbo;\n    }\n\n    /**\n     * Resize the framebuffer\n     * @param framebuffer\n     * @protected\n     */\n    resizeFramebuffer(framebuffer: Framebuffer): void\n    {\n        const { gl } = this;\n\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        if (fbo.msaaBuffer)\n        {\n            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer);\n            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample,\n                gl.RGBA8, framebuffer.width, framebuffer.height);\n        }\n\n        if (fbo.stencil)\n        {\n            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);\n\n            if (fbo.msaaBuffer)\n            {\n                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample,\n                    gl.DEPTH24_STENCIL8, framebuffer.width, framebuffer.height);\n            }\n            else\n            {\n                gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);\n            }\n        }\n\n        const colorTextures = framebuffer.colorTextures;\n\n        let count = colorTextures.length;\n\n        if (!gl.drawBuffers)\n        {\n            count = Math.min(count, 1);\n        }\n\n        for (let i = 0; i < count; i++)\n        {\n            const texture = colorTextures[i];\n            const parentTexture = texture.parentTextureArray || texture;\n\n            this.renderer.texture.bind(parentTexture, 0);\n        }\n\n        if (framebuffer.depthTexture && this.writeDepthTexture)\n        {\n            this.renderer.texture.bind(framebuffer.depthTexture, 0);\n        }\n    }\n\n    /**\n     * Update the framebuffer\n     * @param framebuffer\n     * @param mipLevel\n     * @protected\n     */\n    updateFramebuffer(framebuffer: Framebuffer, mipLevel: number): void\n    {\n        const { gl } = this;\n\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        // bind the color texture\n        const colorTextures = framebuffer.colorTextures;\n\n        let count = colorTextures.length;\n\n        if (!gl.drawBuffers)\n        {\n            count = Math.min(count, 1);\n        }\n\n        if (fbo.multisample > 1 && this.canMultisampleFramebuffer(framebuffer))\n        {\n            fbo.msaaBuffer = fbo.msaaBuffer || gl.createRenderbuffer();\n            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer);\n            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample,\n                gl.RGBA8, framebuffer.width, framebuffer.height);\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, fbo.msaaBuffer);\n        }\n        else if (fbo.msaaBuffer)\n        {\n            gl.deleteRenderbuffer(fbo.msaaBuffer);\n            fbo.msaaBuffer = null;\n\n            if (fbo.blitFramebuffer)\n            {\n                fbo.blitFramebuffer.dispose();\n                fbo.blitFramebuffer = null;\n            }\n        }\n\n        const activeTextures = [];\n\n        for (let i = 0; i < count; i++)\n        {\n            const texture = colorTextures[i];\n            const parentTexture = texture.parentTextureArray || texture;\n\n            this.renderer.texture.bind(parentTexture, 0);\n\n            if (i === 0 && fbo.msaaBuffer)\n            {\n                continue;\n            }\n\n            gl.framebufferTexture2D(gl.FRAMEBUFFER,\n                gl.COLOR_ATTACHMENT0 + i,\n                texture.target,\n                parentTexture._glTextures[this.CONTEXT_UID].texture,\n                mipLevel);\n\n            activeTextures.push(gl.COLOR_ATTACHMENT0 + i);\n        }\n\n        if (activeTextures.length > 1)\n        {\n            gl.drawBuffers(activeTextures);\n        }\n\n        if (framebuffer.depthTexture)\n        {\n            const writeDepthTexture = this.writeDepthTexture;\n\n            if (writeDepthTexture)\n            {\n                const depthTexture = framebuffer.depthTexture;\n\n                this.renderer.texture.bind(depthTexture, 0);\n\n                gl.framebufferTexture2D(gl.FRAMEBUFFER,\n                    gl.DEPTH_ATTACHMENT,\n                    gl.TEXTURE_2D,\n                    depthTexture._glTextures[this.CONTEXT_UID].texture,\n                    mipLevel);\n            }\n        }\n\n        if ((framebuffer.stencil || framebuffer.depth) && !(framebuffer.depthTexture && this.writeDepthTexture))\n        {\n            fbo.stencil = fbo.stencil || gl.createRenderbuffer();\n\n            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);\n\n            if (fbo.msaaBuffer)\n            {\n                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample,\n                    gl.DEPTH24_STENCIL8, framebuffer.width, framebuffer.height);\n            }\n            else\n            {\n                gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);\n            }\n\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, fbo.stencil);\n        }\n        else if (fbo.stencil)\n        {\n            gl.deleteRenderbuffer(fbo.stencil);\n            fbo.stencil = null;\n        }\n    }\n\n    /**\n     * Returns true if the frame buffer can be multisampled.\n     * @param framebuffer\n     */\n    protected canMultisampleFramebuffer(framebuffer: Framebuffer): boolean\n    {\n        return this.renderer.context.webGLVersion !== 1\n            && framebuffer.colorTextures.length <= 1 && !framebuffer.depthTexture;\n    }\n\n    /**\n     * Detects number of samples that is not more than a param but as close to it as possible\n     * @param samples - number of samples\n     * @returns - recommended number of samples\n     */\n    protected detectSamples(samples: MSAA_QUALITY): MSAA_QUALITY\n    {\n        const { msaaSamples } = this;\n        let res: number = MSAA_QUALITY.NONE;\n\n        if (samples <= 1 || msaaSamples === null)\n        {\n            return res;\n        }\n        for (let i = 0; i < msaaSamples.length; i++)\n        {\n            if (msaaSamples[i] <= samples)\n            {\n                res = msaaSamples[i];\n                break;\n            }\n        }\n\n        if (res === 1)\n        {\n            res = MSAA_QUALITY.NONE;\n        }\n\n        return res;\n    }\n\n    /**\n     * Only works with WebGL2\n     *\n     * blits framebuffer to another of the same or bigger size\n     * after that target framebuffer is bound\n     *\n     * Fails with WebGL warning if blits multisample framebuffer to different size\n     * @param framebuffer - by default it blits \"into itself\", from renderBuffer to texture.\n     * @param sourcePixels - source rectangle in pixels\n     * @param destPixels - dest rectangle in pixels, assumed to be the same as sourcePixels\n     */\n    public blit(framebuffer?: Framebuffer, sourcePixels?: Rectangle, destPixels?: Rectangle): void\n    {\n        const { current, renderer, gl, CONTEXT_UID } = this;\n\n        if (renderer.context.webGLVersion !== 2)\n        {\n            return;\n        }\n\n        if (!current)\n        {\n            return;\n        }\n        const fbo = current.glFramebuffers[CONTEXT_UID];\n\n        if (!fbo)\n        {\n            return;\n        }\n        if (!framebuffer)\n        {\n            if (!fbo.msaaBuffer)\n            {\n                return;\n            }\n\n            const colorTexture = current.colorTextures[0];\n\n            if (!colorTexture)\n            {\n                return;\n            }\n\n            if (!fbo.blitFramebuffer)\n            {\n                fbo.blitFramebuffer = new Framebuffer(current.width, current.height);\n                fbo.blitFramebuffer.addColorTexture(0, colorTexture);\n            }\n\n            framebuffer = fbo.blitFramebuffer;\n\n            if (framebuffer.colorTextures[0] !== colorTexture)\n            {\n                framebuffer.colorTextures[0] = colorTexture;\n                framebuffer.dirtyId++;\n                framebuffer.dirtyFormat++;\n            }\n\n            if (framebuffer.width !== current.width || framebuffer.height !== current.height)\n            {\n                framebuffer.width = current.width;\n                framebuffer.height = current.height;\n                framebuffer.dirtyId++;\n                framebuffer.dirtySize++;\n            }\n        }\n\n        if (!sourcePixels)\n        {\n            sourcePixels = tempRectangle;\n            sourcePixels.width = current.width;\n            sourcePixels.height = current.height;\n        }\n        if (!destPixels)\n        {\n            destPixels = sourcePixels;\n        }\n\n        const sameSize = sourcePixels.width === destPixels.width && sourcePixels.height === destPixels.height;\n\n        this.bind(framebuffer);\n        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo.framebuffer);\n        gl.blitFramebuffer(\n            sourcePixels.left, sourcePixels.top, sourcePixels.right, sourcePixels.bottom,\n            destPixels.left, destPixels.top, destPixels.right, destPixels.bottom,\n            gl.COLOR_BUFFER_BIT, sameSize ? gl.NEAREST : gl.LINEAR\n        );\n    }\n\n    /**\n     * Disposes framebuffer.\n     * @param framebuffer - framebuffer that has to be disposed of\n     * @param contextLost - If context was lost, we suppress all delete function calls\n     */\n    disposeFramebuffer(framebuffer: Framebuffer, contextLost?: boolean): void\n    {\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n        const gl = this.gl;\n\n        if (!fbo)\n        {\n            return;\n        }\n\n        delete framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        const index = this.managedFramebuffers.indexOf(framebuffer);\n\n        if (index >= 0)\n        {\n            this.managedFramebuffers.splice(index, 1);\n        }\n\n        framebuffer.disposeRunner.remove(this);\n\n        if (!contextLost)\n        {\n            gl.deleteFramebuffer(fbo.framebuffer);\n\n            if (fbo.msaaBuffer)\n            {\n                gl.deleteRenderbuffer(fbo.msaaBuffer);\n            }\n\n            if (fbo.stencil)\n            {\n                gl.deleteRenderbuffer(fbo.stencil);\n            }\n        }\n\n        if (fbo.blitFramebuffer)\n        {\n            fbo.blitFramebuffer.dispose();\n        }\n    }\n\n    /**\n     * Disposes all framebuffers, but not textures bound to them.\n     * @param [contextLost=false] - If context was lost, we suppress all delete function calls\n     */\n    disposeAll(contextLost?: boolean): void\n    {\n        const list = this.managedFramebuffers;\n\n        (this.managedFramebuffers as any) = [];\n\n        for (let i = 0; i < list.length; i++)\n        {\n            this.disposeFramebuffer(list[i], contextLost);\n        }\n    }\n\n    /**\n     * Forcing creation of stencil buffer for current framebuffer, if it wasn't done before.\n     * Used by MaskSystem, when its time to use stencil mask for Graphics element.\n     *\n     * Its an alternative for public lazy `framebuffer.enableStencil`, in case we need stencil without rebind.\n     * @private\n     */\n    forceStencil(): void\n    {\n        const framebuffer = this.current;\n\n        if (!framebuffer)\n        {\n            return;\n        }\n\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        if (!fbo || fbo.stencil)\n        {\n            return;\n        }\n\n        framebuffer.stencil = true;\n\n        const w = framebuffer.width;\n        const h = framebuffer.height;\n        const gl = this.gl;\n        const stencil = gl.createRenderbuffer();\n\n        gl.bindRenderbuffer(gl.RENDERBUFFER, stencil);\n\n        if (fbo.msaaBuffer)\n        {\n            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, gl.DEPTH24_STENCIL8, w, h);\n        }\n        else\n        {\n            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, w, h);\n        }\n\n        fbo.stencil = stencil;\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, stencil);\n    }\n\n    /** Resets framebuffer stored state, binds screen framebuffer. Should be called before renderTexture reset(). */\n    reset(): void\n    {\n        this.current = this.unknownFramebuffer;\n        this.viewport = new Rectangle();\n    }\n\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n", "import type { GLBuffer } from './GLBuffer';\nimport { ENV } from '@pixi/constants';\nimport { settings } from '../settings';\n\nimport type { ISystem } from '../ISystem';\nimport type { DRAW_MODES } from '@pixi/constants';\nimport type { Renderer } from '../Renderer';\nimport type { IRenderingContext } from '../IRenderingContext';\nimport type { Geometry } from './Geometry';\nimport type { Shader } from '../shader/Shader';\nimport type { Program } from '../shader/Program';\nimport type { Dict } from '@pixi/utils';\n\nconst byteSizeMap: {[key: number]: number} = { 5126: 4, 5123: 2, 5121: 1 };\n\n/**\n * System plugin to the renderer to manage geometry.\n * @memberof PIXI\n */\nexport class GeometrySystem implements ISystem\n{\n    /**\n     * `true` if we has `*_vertex_array_object` extension.\n     * @readonly\n     */\n    public hasVao: boolean;\n\n    /**\n     * `true` if has `ANGLE_instanced_arrays` extension.\n     * @readonly\n     */\n    public hasInstance: boolean;\n\n    /**\n     * `true` if support `gl.UNSIGNED_INT` in `gl.drawElements` or `gl.drawElementsInstanced`.\n     * @readonly\n     */\n    public canUseUInt32ElementIndex: boolean;\n\n    protected CONTEXT_UID: number;\n    protected gl: IRenderingContext;\n    protected _activeGeometry: Geometry;\n    protected _activeVao: WebGLVertexArrayObject;\n    protected _boundBuffer: GLBuffer;\n\n    /** Cache for all geometries by id, used in case renderer gets destroyed or for profiling. */\n    readonly managedGeometries: {[key: number]: Geometry};\n\n    /** Renderer that owns this {@link GeometrySystem}. */\n    private renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n        this._activeGeometry = null;\n        this._activeVao = null;\n\n        this.hasVao = true;\n        this.hasInstance = true;\n        this.canUseUInt32ElementIndex = false;\n        this.managedGeometries = {};\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    protected contextChange(): void\n    {\n        this.disposeAll(true);\n\n        const gl = this.gl = this.renderer.gl;\n        const context = this.renderer.context;\n\n        this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n\n        // webgl2\n        if (context.webGLVersion !== 2)\n        {\n            // webgl 1!\n            let nativeVaoExtension = this.renderer.context.extensions.vertexArrayObject;\n\n            if (settings.PREFER_ENV === ENV.WEBGL_LEGACY)\n            {\n                nativeVaoExtension = null;\n            }\n\n            if (nativeVaoExtension)\n            {\n                gl.createVertexArray = (): WebGLVertexArrayObject =>\n                    nativeVaoExtension.createVertexArrayOES();\n\n                gl.bindVertexArray = (vao): void =>\n                    nativeVaoExtension.bindVertexArrayOES(vao);\n\n                gl.deleteVertexArray = (vao): void =>\n                    nativeVaoExtension.deleteVertexArrayOES(vao);\n            }\n            else\n            {\n                this.hasVao = false;\n                gl.createVertexArray = (): WebGLVertexArrayObject =>\n                    null;\n\n                gl.bindVertexArray = (): void =>\n                    null;\n\n                gl.deleteVertexArray = (): void =>\n                    null;\n            }\n        }\n\n        if (context.webGLVersion !== 2)\n        {\n            const instanceExt = gl.getExtension('ANGLE_instanced_arrays');\n\n            if (instanceExt)\n            {\n                gl.vertexAttribDivisor = (a, b): void =>\n                    instanceExt.vertexAttribDivisorANGLE(a, b);\n\n                gl.drawElementsInstanced = (a, b, c, d, e): void =>\n                    instanceExt.drawElementsInstancedANGLE(a, b, c, d, e);\n\n                gl.drawArraysInstanced = (a, b, c, d): void =>\n                    instanceExt.drawArraysInstancedANGLE(a, b, c, d);\n            }\n            else\n            {\n                this.hasInstance = false;\n            }\n        }\n\n        this.canUseUInt32ElementIndex = context.webGLVersion === 2 || !!context.extensions.uint32ElementIndex;\n    }\n\n    /**\n     * Binds geometry so that is can be drawn. Creating a Vao if required\n     * @param geometry - Instance of geometry to bind.\n     * @param shader - Instance of shader to use vao for.\n     */\n    bind(geometry?: Geometry, shader?: Shader): void\n    {\n        shader = shader || this.renderer.shader.shader;\n\n        const { gl } = this;\n\n        // not sure the best way to address this..\n        // currently different shaders require different VAOs for the same geometry\n        // Still mulling over the best way to solve this one..\n        // will likely need to modify the shader attribute locations at run time!\n        let vaos = geometry.glVertexArrayObjects[this.CONTEXT_UID];\n        let incRefCount = false;\n\n        if (!vaos)\n        {\n            this.managedGeometries[geometry.id] = geometry;\n            geometry.disposeRunner.add(this);\n            geometry.glVertexArrayObjects[this.CONTEXT_UID] = vaos = {};\n            incRefCount = true;\n        }\n\n        const vao = vaos[shader.program.id] || this.initGeometryVao(geometry, shader, incRefCount);\n\n        this._activeGeometry = geometry;\n\n        if (this._activeVao !== vao)\n        {\n            this._activeVao = vao;\n\n            if (this.hasVao)\n            {\n                gl.bindVertexArray(vao);\n            }\n            else\n            {\n                this.activateVao(geometry, shader.program);\n            }\n        }\n\n        // TODO - optimise later!\n        // don't need to loop through if nothing changed!\n        // maybe look to add an 'autoupdate' to geometry?\n        this.updateBuffers();\n    }\n\n    /** Reset and unbind any active VAO and geometry. */\n    reset(): void\n    {\n        this.unbind();\n    }\n\n    /** Update buffers of the currently bound geometry. */\n    updateBuffers(): void\n    {\n        const geometry = this._activeGeometry;\n\n        const bufferSystem = this.renderer.buffer;\n\n        for (let i = 0; i < geometry.buffers.length; i++)\n        {\n            const buffer = geometry.buffers[i];\n\n            bufferSystem.update(buffer);\n        }\n    }\n\n    /**\n     * Check compatibility between a geometry and a program\n     * @param geometry - Geometry instance.\n     * @param program - Program instance.\n     */\n    protected checkCompatibility(geometry: Geometry, program: Program): void\n    {\n        // geometry must have at least all the attributes that the shader requires.\n        const geometryAttributes = geometry.attributes;\n        const shaderAttributes = program.attributeData;\n\n        for (const j in shaderAttributes)\n        {\n            if (!geometryAttributes[j])\n            {\n                throw new Error(`shader and geometry incompatible, geometry missing the \"${j}\" attribute`);\n            }\n        }\n    }\n\n    /**\n     * Takes a geometry and program and generates a unique signature for them.\n     * @param geometry - To get signature from.\n     * @param program - To test geometry against.\n     * @returns - Unique signature of the geometry and program\n     */\n    protected getSignature(geometry: Geometry, program: Program): string\n    {\n        const attribs = geometry.attributes;\n        const shaderAttributes = program.attributeData;\n\n        const strings = ['g', geometry.id];\n\n        for (const i in attribs)\n        {\n            if (shaderAttributes[i])\n            {\n                strings.push(i, shaderAttributes[i].location);\n            }\n        }\n\n        return strings.join('-');\n    }\n\n    /**\n     * Creates or gets Vao with the same structure as the geometry and stores it on the geometry.\n     * If vao is created, it is bound automatically. We use a shader to infer what and how to set up the\n     * attribute locations.\n     * @param geometry - Instance of geometry to to generate Vao for.\n     * @param shader - Instance of the shader.\n     * @param incRefCount - Increment refCount of all geometry buffers.\n     */\n    protected initGeometryVao(geometry: Geometry, shader: Shader, incRefCount = true): WebGLVertexArrayObject\n    {\n        const gl = this.gl;\n        const CONTEXT_UID = this.CONTEXT_UID;\n        const bufferSystem = this.renderer.buffer;\n        const program = shader.program;\n\n        if (!program.glPrograms[CONTEXT_UID])\n        {\n            this.renderer.shader.generateProgram(shader);\n        }\n\n        this.checkCompatibility(geometry, program);\n\n        const signature = this.getSignature(geometry, program);\n\n        const vaoObjectHash = geometry.glVertexArrayObjects[this.CONTEXT_UID];\n\n        let vao = vaoObjectHash[signature];\n\n        if (vao)\n        {\n            // this will give us easy access to the vao\n            vaoObjectHash[program.id] = vao;\n\n            return vao;\n        }\n\n        const buffers = geometry.buffers;\n        const attributes = geometry.attributes;\n        const tempStride: Dict<number> = {};\n        const tempStart: Dict<number> = {};\n\n        for (const j in buffers)\n        {\n            tempStride[j] = 0;\n            tempStart[j] = 0;\n        }\n\n        for (const j in attributes)\n        {\n            if (!attributes[j].size && program.attributeData[j])\n            {\n                attributes[j].size = program.attributeData[j].size;\n            }\n            else if (!attributes[j].size)\n            {\n                console.warn(`PIXI Geometry attribute '${j}' size cannot be determined (likely the bound shader does not have the attribute)`);  // eslint-disable-line\n            }\n\n            tempStride[attributes[j].buffer] += attributes[j].size * byteSizeMap[attributes[j].type];\n        }\n\n        for (const j in attributes)\n        {\n            const attribute = attributes[j];\n            const attribSize = attribute.size;\n\n            if (attribute.stride === undefined)\n            {\n                if (tempStride[attribute.buffer] === attribSize * byteSizeMap[attribute.type])\n                {\n                    attribute.stride = 0;\n                }\n                else\n                {\n                    attribute.stride = tempStride[attribute.buffer];\n                }\n            }\n\n            if (attribute.start === undefined)\n            {\n                attribute.start = tempStart[attribute.buffer];\n\n                tempStart[attribute.buffer] += attribSize * byteSizeMap[attribute.type];\n            }\n        }\n\n        vao = gl.createVertexArray();\n\n        gl.bindVertexArray(vao);\n\n        // first update - and create the buffers!\n        // only create a gl buffer if it actually gets\n        for (let i = 0; i < buffers.length; i++)\n        {\n            const buffer = buffers[i];\n\n            bufferSystem.bind(buffer);\n\n            if (incRefCount)\n            {\n                buffer._glBuffers[CONTEXT_UID].refCount++;\n            }\n        }\n\n        // TODO - maybe make this a data object?\n        // lets wait to see if we need to first!\n\n        this.activateVao(geometry, program);\n\n        this._activeVao = vao;\n\n        // add it to the cache!\n        vaoObjectHash[program.id] = vao;\n        vaoObjectHash[signature] = vao;\n\n        return vao;\n    }\n\n    /**\n     * Disposes geometry.\n     * @param geometry - Geometry with buffers. Only VAO will be disposed\n     * @param [contextLost=false] - If context was lost, we suppress deleteVertexArray\n     */\n    disposeGeometry(geometry: Geometry, contextLost?: boolean): void\n    {\n        if (!this.managedGeometries[geometry.id])\n        {\n            return;\n        }\n\n        delete this.managedGeometries[geometry.id];\n\n        const vaos = geometry.glVertexArrayObjects[this.CONTEXT_UID];\n        const gl = this.gl;\n        const buffers = geometry.buffers;\n        const bufferSystem = this.renderer?.buffer;\n\n        geometry.disposeRunner.remove(this);\n\n        if (!vaos)\n        {\n            return;\n        }\n\n        // bufferSystem may have already been destroyed..\n        // if this is the case, there is no need to destroy the geometry buffers...\n        // they already have been!\n        if (bufferSystem)\n        {\n            for (let i = 0; i < buffers.length; i++)\n            {\n                const buf = buffers[i]._glBuffers[this.CONTEXT_UID];\n\n                // my be null as context may have changed right before the dispose is called\n                if (buf)\n                {\n                    buf.refCount--;\n                    if (buf.refCount === 0 && !contextLost)\n                    {\n                        bufferSystem.dispose(buffers[i], contextLost);\n                    }\n                }\n            }\n        }\n\n        if (!contextLost)\n        {\n            for (const vaoId in vaos)\n            {\n                // delete only signatures, everything else are copies\n                if (vaoId[0] === 'g')\n                {\n                    const vao = vaos[vaoId];\n\n                    if (this._activeVao === vao)\n                    {\n                        this.unbind();\n                    }\n                    gl.deleteVertexArray(vao);\n                }\n            }\n        }\n\n        delete geometry.glVertexArrayObjects[this.CONTEXT_UID];\n    }\n\n    /**\n     * Dispose all WebGL resources of all managed geometries.\n     * @param [contextLost=false] - If context was lost, we suppress `gl.delete` calls\n     */\n    disposeAll(contextLost?: boolean): void\n    {\n        const all: Array<any> = Object.keys(this.managedGeometries);\n\n        for (let i = 0; i < all.length; i++)\n        {\n            this.disposeGeometry(this.managedGeometries[all[i]], contextLost);\n        }\n    }\n\n    /**\n     * Activate vertex array object.\n     * @param geometry - Geometry instance.\n     * @param program - Shader program instance.\n     */\n    protected activateVao(geometry: Geometry, program: Program): void\n    {\n        const gl = this.gl;\n        const CONTEXT_UID = this.CONTEXT_UID;\n        const bufferSystem = this.renderer.buffer;\n        const buffers = geometry.buffers;\n        const attributes = geometry.attributes;\n\n        if (geometry.indexBuffer)\n        {\n            // first update the index buffer if we have one..\n            bufferSystem.bind(geometry.indexBuffer);\n        }\n\n        let lastBuffer = null;\n\n        // add a new one!\n        for (const j in attributes)\n        {\n            const attribute = attributes[j];\n            const buffer = buffers[attribute.buffer];\n            const glBuffer = buffer._glBuffers[CONTEXT_UID];\n\n            if (program.attributeData[j])\n            {\n                if (lastBuffer !== glBuffer)\n                {\n                    bufferSystem.bind(buffer);\n\n                    lastBuffer = glBuffer;\n                }\n\n                const location = program.attributeData[j].location;\n\n                // TODO introduce state again\n                // we can optimise this for older devices that have no VAOs\n                gl.enableVertexAttribArray(location);\n\n                gl.vertexAttribPointer(location,\n                    attribute.size,\n                    attribute.type || gl.FLOAT,\n                    attribute.normalized,\n                    attribute.stride,\n                    attribute.start);\n\n                if (attribute.instance)\n                {\n                    // TODO calculate instance count based of this...\n                    if (this.hasInstance)\n                    {\n                        gl.vertexAttribDivisor(location, 1);\n                    }\n                    else\n                    {\n                        throw new Error('geometry error, GPU Instancing is not supported on this device');\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Draws the currently bound geometry.\n     * @param type - The type primitive to render.\n     * @param size - The number of elements to be rendered. If not specified, all vertices after the\n     *  starting vertex will be drawn.\n     * @param start - The starting vertex in the geometry to start drawing from. If not specified,\n     *  drawing will start from the first vertex.\n     * @param instanceCount - The number of instances of the set of elements to execute. If not specified,\n     *  all instances will be drawn.\n     */\n    draw(type: DRAW_MODES, size?: number, start?: number, instanceCount?: number): this\n    {\n        const { gl } = this;\n        const geometry = this._activeGeometry;\n\n        // TODO.. this should not change so maybe cache the function?\n\n        if (geometry.indexBuffer)\n        {\n            const byteSize = geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n            const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n\n            if (byteSize === 2 || (byteSize === 4 && this.canUseUInt32ElementIndex))\n            {\n                if (geometry.instanced)\n                {\n                    /* eslint-disable max-len */\n                    gl.drawElementsInstanced(type, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize, instanceCount || 1);\n                    /* eslint-enable max-len */\n                }\n                else\n                {\n                    /* eslint-disable max-len */\n                    gl.drawElements(type, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize);\n                    /* eslint-enable max-len */\n                }\n            }\n            else\n            {\n                console.warn('unsupported index buffer type: uint32');\n            }\n        }\n        else if (geometry.instanced)\n        {\n            // TODO need a better way to calculate size..\n            gl.drawArraysInstanced(type, start, size || geometry.getSize(), instanceCount || 1);\n        }\n        else\n        {\n            gl.drawArrays(type, start, size || geometry.getSize());\n        }\n\n        return this;\n    }\n\n    /** Unbind/reset everything. */\n    protected unbind(): void\n    {\n        this.gl.bindVertexArray(null);\n        this._activeVao = null;\n        this._activeGeometry = null;\n    }\n\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n", "import { MASK_TYPES } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\nimport type { ISpriteMaskFilter } from '@pixi/core';\n\nimport type { COLOR_MASK_BITS, MSAA_QUALITY } from '@pixi/constants';\nimport type { Rectangle, Matrix } from '@pixi/math';\nimport type { IFilterTarget } from '../filters/IFilterTarget';\nimport type { Renderer } from '../Renderer';\n\nexport interface IMaskTarget extends IFilterTarget\n{\n    renderable: boolean;\n    isSprite?: boolean;\n    worldTransform: Matrix;\n    isFastRect?(): boolean;\n    getBounds(skipUpdate?: boolean, rect?: Rectangle): Rectangle;\n    render(renderer: Renderer): void;\n}\n/**\n * Component for masked elements.\n *\n * Holds mask mode and temporary data about current mask.\n * @memberof PIXI\n */\nexport class MaskData\n{\n    /** Mask type */\n    public type: MASK_TYPES;\n\n    /**\n     * Whether we know the mask type beforehand\n     * @default true\n     */\n    public autoDetect: boolean;\n\n    /**\n     * Which element we use to mask\n     * @member {PIXI.DisplayObject}\n     */\n    public maskObject: IMaskTarget;\n\n    /** Whether it belongs to MaskSystem pool */\n    public pooled: boolean;\n\n    /** Indicator of the type (always true for {@link MaskData} objects) */\n    public isMaskData: boolean;// webdoc crashes if the type is true because reasons... (will fix)\n\n    /**\n     * Resolution of the sprite mask filter.\n     * If set to `null` or `0`, the resolution of the current render target is used.\n     * @default null\n     */\n    public resolution: number;\n\n    /**\n     * Number of samples of the sprite mask filter.\n     * If set to `null`, the sample count of the current render target is used.\n     * @default PIXI.settings.FILTER_MULTISAMPLE\n     */\n    public multisample: MSAA_QUALITY;\n\n    /** If enabled is true the mask is applied, if false it will not. */\n    public enabled: boolean;\n\n    /** Color mask. */\n    public colorMask: COLOR_MASK_BITS;\n\n    /**\n     * The sprite mask filter wrapped in an array.\n     * @private\n     */\n    _filters: ISpriteMaskFilter[];\n\n    /**\n     * Stencil counter above the mask in stack\n     * @private\n     */\n    _stencilCounter: number;\n\n    /**\n     * Scissor counter above the mask in stack\n     * @private\n     */\n    _scissorCounter: number;\n\n    /**\n     * Scissor operation above the mask in stack.\n     * Null if _scissorCounter is zero, rectangle instance if positive.\n     * @private\n     */\n    _scissorRect: Rectangle;\n\n    /**\n     * pre-computed scissor rect\n     * does become _scissorRect when mask is actually pushed\n     * @private\n     */\n    _scissorRectLocal: Rectangle;\n\n    /**\n     * pre-computed color mask\n     * @private\n     */\n    _colorMask: number;\n\n    /**\n     * Targeted element. Temporary variable set by MaskSystem\n     * @member {PIXI.DisplayObject}\n     * @private\n     */\n    _target: IMaskTarget;\n\n    /**\n     * Create MaskData\n     * @param {PIXI.DisplayObject} [maskObject=null] - object that describes the mask\n     */\n    constructor(maskObject: IMaskTarget = null)\n    {\n        this.type = MASK_TYPES.NONE;\n        this.autoDetect = true;\n        this.maskObject = maskObject || null;\n        this.pooled = false;\n        this.isMaskData = true;\n        this.resolution = null;\n        this.multisample = settings.FILTER_MULTISAMPLE;\n        this.enabled = true;\n        this.colorMask = 0xf;\n        this._filters = null;\n        this._stencilCounter = 0;\n        this._scissorCounter = 0;\n        this._scissorRect = null;\n        this._scissorRectLocal = null;\n        this._colorMask = 0xf;\n        this._target = null;\n    }\n\n    /**\n     * The sprite mask filter.\n     * If set to `null`, the default sprite mask filter is used.\n     * @default null\n     */\n    get filter(): ISpriteMaskFilter\n    {\n        return this._filters ? this._filters[0] : null;\n    }\n\n    set filter(value: ISpriteMaskFilter)\n    {\n        if (value)\n        {\n            if (this._filters)\n            {\n                this._filters[0] = value;\n            }\n            else\n            {\n                this._filters = [value];\n            }\n        }\n        else\n        {\n            this._filters = null;\n        }\n    }\n\n    /** Resets the mask data after popMask(). */\n    reset(): void\n    {\n        if (this.pooled)\n        {\n            this.maskObject = null;\n\n            this.type = MASK_TYPES.NONE;\n\n            this.autoDetect = true;\n        }\n\n        this._target = null;\n        this._scissorRectLocal = null;\n    }\n\n    /**\n     * Copies counters from maskData above, called from pushMask().\n     * @param maskAbove\n     */\n    copyCountersOrReset(maskAbove?: MaskData): void\n    {\n        if (maskAbove)\n        {\n            this._stencilCounter = maskAbove._stencilCounter;\n            this._scissorCounter = maskAbove._scissorCounter;\n            this._scissorRect = maskAbove._scissorRect;\n        }\n        else\n        {\n            this._stencilCounter = 0;\n            this._scissorCounter = 0;\n            this._scissorRect = null;\n        }\n    }\n}\n", "/**\n * @private\n * @param {WebGLRenderingContext} gl - The current WebGL context {WebGLProgram}\n * @param {number} type - the type, can be either VERTEX_SHADER or FRAGMENT_SHADER\n * @param {string} src - The vertex shader source as an array of strings.\n * @returns {WebGLShader} the shader\n */\nexport function compileShader(gl: WebGLRenderingContextBase, type: number, src: string): WebGLShader\n{\n    const shader = gl.createShader(type);\n\n    gl.shaderSource(shader, src);\n    gl.compileShader(shader);\n\n    return shader;\n}\n", "/**\n * will log a shader error highlighting the lines with the error\n * also will add numbers along the side.\n * @param gl - the WebGLContext\n * @param shader - the shader to log errors for\n */\nfunction logPrettyShaderError(gl: WebGLRenderingContext, shader: WebGLShader): void\n{\n    const shaderSrc = gl.getShaderSource(shader)\n        .split('\\n')\n        .map((line, index) => `${index}: ${line}`);\n\n    const shaderLog = gl.getShaderInfoLog(shader);\n    const splitShader = shaderLog.split('\\n');\n\n    const dedupe: Record<number, boolean> = {};\n\n    const lineNumbers = splitShader.map((line) => parseFloat(line.replace(/^ERROR\\: 0\\:([\\d]+)\\:.*$/, '$1')))\n        .filter((n) =>\n        {\n            if (n && !dedupe[n])\n            {\n                dedupe[n] = true;\n\n                return true;\n            }\n\n            return false;\n        });\n\n    const logArgs = [''];\n\n    lineNumbers.forEach((number) =>\n    {\n        shaderSrc[number - 1] = `%c${shaderSrc[number - 1]}%c`;\n        logArgs.push('background: #FF0000; color:#FFFFFF; font-size: 10px', 'font-size: 10px');\n    });\n\n    const fragmentSourceToLog = shaderSrc\n        .join('\\n');\n\n    logArgs[0] = fragmentSourceToLog;\n\n    console.error(shaderLog);\n\n    // eslint-disable-next-line no-console\n    console.groupCollapsed('click to view full shader code');\n    console.warn(...logArgs);\n    // eslint-disable-next-line no-console\n    console.groupEnd();\n}\n\n/**\n *\n * logs out any program errors\n * @param gl - The current WebGL context\n * @param program - the WebGL program to display errors for\n * @param vertexShader  - the fragment WebGL shader program\n * @param fragmentShader - the vertex WebGL shader program\n */\nexport function logProgramError(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram,\n    vertexShader: WebGLShader,\n    fragmentShader: WebGLShader\n): void\n{\n    // if linking fails, then log and cleanup\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n    {\n        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS))\n        {\n            logPrettyShaderError(gl, vertexShader);\n        }\n\n        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS))\n        {\n            logPrettyShaderError(gl, fragmentShader);\n        }\n\n        console.error('PixiJS Error: Could not initialize shader.');\n\n        // if there is a program info log, log it\n        if (gl.getProgramInfoLog(program) !== '')\n        {\n            console.warn('PixiJS Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(program));\n        }\n    }\n}\n", "function booleanArray(size: number): Array<boolean>\n{\n    const array = new Array(size);\n\n    for (let i = 0; i < array.length; i++)\n    {\n        array[i] = false;\n    }\n\n    return array;\n}\n\n/**\n * @method defaultValue\n * @memberof PIXI.glCore.shader\n * @param {string} type - Type of value\n * @param {number} size\n * @private\n */\nexport function defaultValue(\n    type: string,\n    size: number\n): number | Float32Array | Int32Array | Uint32Array | boolean | boolean[]\n{\n    switch (type)\n    {\n        case 'float':\n            return 0;\n\n        case 'vec2':\n            return new Float32Array(2 * size);\n\n        case 'vec3':\n            return new Float32Array(3 * size);\n\n        case 'vec4':\n            return new Float32Array(4 * size);\n\n        case 'int':\n        case 'uint':\n        case 'sampler2D':\n        case 'sampler2DArray':\n            return 0;\n\n        case 'ivec2':\n            return new Int32Array(2 * size);\n\n        case 'ivec3':\n            return new Int32Array(3 * size);\n\n        case 'ivec4':\n            return new Int32Array(4 * size);\n\n        case 'uvec2':\n            return new Uint32Array(2 * size);\n\n        case 'uvec3':\n            return new Uint32Array(3 * size);\n\n        case 'uvec4':\n            return new Uint32Array(4 * size);\n\n        case 'bool':\n            return false;\n\n        case 'bvec2':\n\n            return booleanArray(2 * size);\n\n        case 'bvec3':\n            return booleanArray(3 * size);\n\n        case 'bvec4':\n            return booleanArray(4 * size);\n\n        case 'mat2':\n            return new Float32Array([1, 0,\n                0, 1]);\n\n        case 'mat3':\n            return new Float32Array([1, 0, 0,\n                0, 1, 0,\n                0, 0, 1]);\n\n        case 'mat4':\n            return new Float32Array([1, 0, 0, 0,\n                0, 1, 0, 0,\n                0, 0, 1, 0,\n                0, 0, 0, 1]);\n    }\n\n    return null;\n}\n", "import { settings } from '../../settings';\nimport { ENV } from '@pixi/constants';\n\nconst unknownContext = {};\nlet context: WebGLRenderingContext | WebGL2RenderingContext = unknownContext as any;\n\n/**\n * returns a little WebGL context to use for program inspection.\n * @static\n * @private\n * @returns {WebGLRenderingContext} a gl context to test with\n */\nexport function getTestContext(): WebGLRenderingContext | WebGL2RenderingContext\n{\n    if (context === unknownContext || (context && context.isContextLost()))\n    {\n        const canvas = settings.ADAPTER.createCanvas();\n\n        let gl: WebGLRenderingContext | WebGL2RenderingContext;\n\n        if (settings.PREFER_ENV >= ENV.WEBGL2)\n        {\n            gl = canvas.getContext('webgl2', {});\n        }\n\n        if (!gl)\n        {\n            gl = (canvas.getContext('webgl', {})\n                || (canvas.getContext('experimental-webgl', {}) as WebGLRenderingContext));\n\n            if (!gl)\n            {\n                // fail, not able to get a context\n                gl = null;\n            }\n            else\n            {\n                // for shader testing..\n                gl.getExtension('WEBGL_draw_buffers');\n            }\n        }\n\n        context = gl;\n    }\n\n    return context;\n}\n", "import { getTestContext } from './getTestContext';\nimport { PRECISION } from '@pixi/constants';\n\nlet maxFragmentPrecision: PRECISION;\n\nexport function getMaxFragmentPrecision(): PRECISION\n{\n    if (!maxFragmentPrecision)\n    {\n        maxFragmentPrecision = PRECISION.MEDIUM;\n        const gl = getTestContext();\n\n        if (gl)\n        {\n            if (gl.getShaderPrecisionFormat)\n            {\n                const shaderFragment = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);\n\n                maxFragmentPrecision = shaderFragment.precision ? PRECISION.HIGH : PRECISION.MEDIUM;\n            }\n        }\n    }\n\n    return maxFragmentPrecision;\n}\n", "import { PRECISION } from '@pixi/constants';\n\n/**\n * Sets the float precision on the shader, ensuring the device supports the request precision.\n * If the precision is already present, it just ensures that the device is able to handle it.\n * @private\n * @param {string} src - The shader source\n * @param {PIXI.PRECISION} requestedPrecision - The request float precision of the shader.\n * @param {PIXI.PRECISION} maxSupportedPrecision - The maximum precision the shader supports.\n * @returns {string} modified shader source\n */\nexport function setPrecision(src: string, requestedPrecision: PRECISION, maxSupportedPrecision: PRECISION): string\n{\n    if (src.substring(0, 9) !== 'precision')\n    {\n        // no precision supplied, so PixiJS will add the requested level.\n        let precision = requestedPrecision;\n\n        // If highp is requested but not supported, downgrade precision to a level all devices support.\n        if (requestedPrecision === PRECISION.HIGH && maxSupportedPrecision !== PRECISION.HIGH)\n        {\n            precision = PRECISION.MEDIUM;\n        }\n\n        return `precision ${precision} float;\\n${src}`;\n    }\n    else if (maxSupportedPrecision !== PRECISION.HIGH && src.substring(0, 15) === 'precision highp')\n    {\n        // precision was supplied, but at a level this device does not support, so downgrading to mediump.\n        return src.replace('precision highp', 'precision mediump');\n    }\n\n    return src;\n}\n", "import type { Dict } from '@pixi/utils';\n\nconst GLSL_TO_SIZE: Dict<number> = {\n    float:    1,\n    vec2:     2,\n    vec3:     3,\n    vec4:     4,\n\n    int:      1,\n    ivec2:    2,\n    ivec3:    3,\n    ivec4:    4,\n\n    uint:     1,\n    uvec2:    2,\n    uvec3:    3,\n    uvec4:    4,\n\n    bool:     1,\n    bvec2:    2,\n    bvec3:    3,\n    bvec4:    4,\n\n    mat2:     4,\n    mat3:     9,\n    mat4:     16,\n\n    sampler2D:  1,\n};\n\n/**\n * @private\n * @method mapSize\n * @memberof PIXI.glCore.shader\n * @param {string} type\n */\nexport function mapSize(type: string): number\n{\n    return GLSL_TO_SIZE[type];\n}\n", "import type { Dict } from '@pixi/utils';\n\nlet GL_TABLE: Dict<string> = null;\n\nconst GL_TO_GLSL_TYPES: Dict<string> = {\n    FLOAT:       'float',\n    FLOAT_VEC2:  'vec2',\n    FLOAT_VEC3:  'vec3',\n    FLOAT_VEC4:  'vec4',\n\n    INT:         'int',\n    INT_VEC2:    'ivec2',\n    INT_VEC3:    'ivec3',\n    INT_VEC4:    'ivec4',\n\n    UNSIGNED_INT:         'uint',\n    UNSIGNED_INT_VEC2:    'uvec2',\n    UNSIGNED_INT_VEC3:    'uvec3',\n    UNSIGNED_INT_VEC4:    'uvec4',\n\n    BOOL:        'bool',\n    BOOL_VEC2:   'bvec2',\n    BOOL_VEC3:   'bvec3',\n    BOOL_VEC4:   'bvec4',\n\n    FLOAT_MAT2:  'mat2',\n    FLOAT_MAT3:  'mat3',\n    FLOAT_MAT4:  'mat4',\n\n    SAMPLER_2D:              'sampler2D',\n    INT_SAMPLER_2D:          'sampler2D',\n    UNSIGNED_INT_SAMPLER_2D: 'sampler2D',\n    SAMPLER_CUBE:              'samplerCube',\n    INT_SAMPLER_CUBE:          'samplerCube',\n    UNSIGNED_INT_SAMPLER_CUBE: 'samplerCube',\n    SAMPLER_2D_ARRAY:              'sampler2DArray',\n    INT_SAMPLER_2D_ARRAY:          'sampler2DArray',\n    UNSIGNED_INT_SAMPLER_2D_ARRAY: 'sampler2DArray',\n};\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function mapType(gl: any, type: number): string\n{\n    if (!GL_TABLE)\n    {\n        const typeNames = Object.keys(GL_TO_GLSL_TYPES);\n\n        GL_TABLE = {};\n\n        for (let i = 0; i < typeNames.length; ++i)\n        {\n            const tn = typeNames[i];\n\n            GL_TABLE[gl[tn]] = GL_TO_GLSL_TYPES[tn];\n        }\n    }\n\n    return GL_TABLE[type];\n}\n", "/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n// Parsers, each one of these will take a look at the type of shader property and uniform.\n// if they pass the test function then the code function is called that returns a the shader upload code for that uniform.\n// Shader upload code is automagically generated with these parsers.\n// If no parser is valid then the default upload functions are used.\n// exposing Parsers means that custom upload logic can be added to pixi's shaders.\n// A good example would be a pixi rectangle can be directly set on a uniform.\n// If the shader sees it it knows how to upload the rectangle structure as a vec4\n// format is as follows:\n//\n// {\n//     test: (data, uniform) => {} <--- test is this code should be used for this uniform\n//     code: (name, uniform) => {} <--- returns the string of the piece of code that uploads the uniform\n//     codeUbo: (name, uniform) => {} <--- returns the string of the piece of code that uploads the\n//                                         uniform to a uniform buffer\n// }\n\nexport interface IUniformParser\n{\n    test(data: unknown, uniform: any): boolean;\n    code(name: string, uniform: any): string;\n    codeUbo?(name: string, uniform: any): string;\n}\n\nexport const uniformParsers: IUniformParser[] = [\n\n    // a float cache layer\n    {\n        test: (data: any): boolean =>\n            data.type === 'float' && data.size === 1 && !data.isArray,\n        code: (name: string): string =>\n            `\n            if(uv[\"${name}\"] !== ud[\"${name}\"].value)\n            {\n                ud[\"${name}\"].value = uv[\"${name}\"]\n                gl.uniform1f(ud[\"${name}\"].location, uv[\"${name}\"])\n            }\n            `,\n    },\n    // handling samplers\n    {\n        test: (data: any, uniform: any): boolean =>\n            // eslint-disable-next-line max-len,no-eq-null,eqeqeq\n            (data.type === 'sampler2D' || data.type === 'samplerCube' || data.type === 'sampler2DArray') && data.size === 1 && !data.isArray && (uniform == null || uniform.castToBaseTexture !== undefined),\n        code: (name: string): string => `t = syncData.textureCount++;\n\n            renderer.texture.bind(uv[\"${name}\"], t);\n\n            if(ud[\"${name}\"].value !== t)\n            {\n                ud[\"${name}\"].value = t;\n                gl.uniform1i(ud[\"${name}\"].location, t);\\n; // eslint-disable-line max-len\n            }`,\n    },\n    // uploading pixi matrix object to mat3\n    {\n        test: (data: any, uniform: any): boolean =>\n            data.type === 'mat3' && data.size === 1 && !data.isArray && uniform.a !== undefined,\n        code: (name: string): string =>\n\n            // TODO and some smart caching dirty ids here!\n            `\n            gl.uniformMatrix3fv(ud[\"${name}\"].location, false, uv[\"${name}\"].toArray(true));\n            `,\n        codeUbo: (name: string): string =>\n            `\n                var ${name}_matrix = uv.${name}.toArray(true);\n\n                data[offset] = ${name}_matrix[0];\n                data[offset+1] = ${name}_matrix[1];\n                data[offset+2] = ${name}_matrix[2];\n        \n                data[offset + 4] = ${name}_matrix[3];\n                data[offset + 5] = ${name}_matrix[4];\n                data[offset + 6] = ${name}_matrix[5];\n        \n                data[offset + 8] = ${name}_matrix[6];\n                data[offset + 9] = ${name}_matrix[7];\n                data[offset + 10] = ${name}_matrix[8];\n            `\n        ,\n\n    },\n    // uploading a pixi point as a vec2 with caching layer\n    {\n        test: (data: any, uniform: any): boolean =>\n            data.type === 'vec2' && data.size === 1 && !data.isArray && uniform.x !== undefined,\n        code: (name: string): string =>\n            `\n                cv = ud[\"${name}\"].value;\n                v = uv[\"${name}\"];\n\n                if(cv[0] !== v.x || cv[1] !== v.y)\n                {\n                    cv[0] = v.x;\n                    cv[1] = v.y;\n                    gl.uniform2f(ud[\"${name}\"].location, v.x, v.y);\n                }`,\n        codeUbo: (name: string): string =>\n            `\n                v = uv.${name};\n\n                data[offset] = v.x;\n                data[offset+1] = v.y;\n            `\n    },\n    // caching layer for a vec2\n    {\n        test: (data: any): boolean =>\n            data.type === 'vec2' && data.size === 1 && !data.isArray,\n        code: (name: string): string =>\n            `\n                cv = ud[\"${name}\"].value;\n                v = uv[\"${name}\"];\n\n                if(cv[0] !== v[0] || cv[1] !== v[1])\n                {\n                    cv[0] = v[0];\n                    cv[1] = v[1];\n                    gl.uniform2f(ud[\"${name}\"].location, v[0], v[1]);\n                }\n            `,\n    },\n    // upload a pixi rectangle as a vec4 with caching layer\n    {\n        test: (data: any, uniform: any): boolean =>\n            data.type === 'vec4' && data.size === 1 && !data.isArray && uniform.width !== undefined,\n\n        code: (name: string): string =>\n            `\n                cv = ud[\"${name}\"].value;\n                v = uv[\"${name}\"];\n\n                if(cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height)\n                {\n                    cv[0] = v.x;\n                    cv[1] = v.y;\n                    cv[2] = v.width;\n                    cv[3] = v.height;\n                    gl.uniform4f(ud[\"${name}\"].location, v.x, v.y, v.width, v.height)\n                }`,\n        codeUbo: (name: string): string =>\n            `\n                    v = uv.${name};\n\n                    data[offset] = v.x;\n                    data[offset+1] = v.y;\n                    data[offset+2] = v.width;\n                    data[offset+3] = v.height;\n                `\n    },\n    // a caching layer for vec4 uploading\n    {\n        test: (data: any): boolean =>\n            data.type === 'vec4' && data.size === 1 && !data.isArray,\n        code: (name: string): string =>\n            `\n                cv = ud[\"${name}\"].value;\n                v = uv[\"${name}\"];\n\n                if(cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n                {\n                    cv[0] = v[0];\n                    cv[1] = v[1];\n                    cv[2] = v[2];\n                    cv[3] = v[3];\n\n                    gl.uniform4f(ud[\"${name}\"].location, v[0], v[1], v[2], v[3])\n                }`,\n    },\n];\n\n", "import { uniformParsers } from './uniformParsers';\n\nimport type { UniformGroup } from '../UniformGroup';\nimport type { Dict } from '@pixi/utils';\n\nexport type UniformsSyncCallback = (...args: any[]) => void;\n\n// cu = Cached value's uniform data field\n// cv = Cached value\n// v = value to upload\n// ud = uniformData\n// uv = uniformValue\n// l = location\nconst GLSL_TO_SINGLE_SETTERS_CACHED: Dict<string> = {\n\n    float: `\n    if (cv !== v)\n    {\n        cu.value = v;\n        gl.uniform1f(location, v);\n    }`,\n\n    vec2: `\n    if (cv[0] !== v[0] || cv[1] !== v[1])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n\n        gl.uniform2f(location, v[0], v[1])\n    }`,\n\n    vec3: `\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n\n        gl.uniform3f(location, v[0], v[1], v[2])\n    }`,\n\n    vec4: `\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n        cv[3] = v[3];\n\n        gl.uniform4f(location, v[0], v[1], v[2], v[3]);\n    }`,\n\n    int: `\n    if (cv !== v)\n    {\n        cu.value = v;\n\n        gl.uniform1i(location, v);\n    }`,\n    ivec2: `\n    if (cv[0] !== v[0] || cv[1] !== v[1])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n\n        gl.uniform2i(location, v[0], v[1]);\n    }`,\n    ivec3: `\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n\n        gl.uniform3i(location, v[0], v[1], v[2]);\n    }`,\n    ivec4: `\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n        cv[3] = v[3];\n\n        gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n    }`,\n\n    uint: `\n    if (cv !== v)\n    {\n        cu.value = v;\n\n        gl.uniform1ui(location, v);\n    }`,\n    uvec2: `\n    if (cv[0] !== v[0] || cv[1] !== v[1])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n\n        gl.uniform2ui(location, v[0], v[1]);\n    }`,\n    uvec3: `\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n\n        gl.uniform3ui(location, v[0], v[1], v[2]);\n    }`,\n    uvec4: `\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n        cv[3] = v[3];\n\n        gl.uniform4ui(location, v[0], v[1], v[2], v[3]);\n    }`,\n\n    bool: `\n    if (cv !== v)\n    {\n        cu.value = v;\n        gl.uniform1i(location, v);\n    }`,\n    bvec2: `\n    if (cv[0] != v[0] || cv[1] != v[1])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n\n        gl.uniform2i(location, v[0], v[1]);\n    }`,\n    bvec3: `\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n\n        gl.uniform3i(location, v[0], v[1], v[2]);\n    }`,\n    bvec4: `\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n        cv[3] = v[3];\n\n        gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n    }`,\n\n    mat2:     'gl.uniformMatrix2fv(location, false, v)',\n    mat3:     'gl.uniformMatrix3fv(location, false, v)',\n    mat4:     'gl.uniformMatrix4fv(location, false, v)',\n\n    sampler2D: `\n    if (cv !== v)\n    {\n        cu.value = v;\n\n        gl.uniform1i(location, v);\n    }`,\n    samplerCube: `\n    if (cv !== v)\n    {\n        cu.value = v;\n\n        gl.uniform1i(location, v);\n    }`,\n    sampler2DArray: `\n    if (cv !== v)\n    {\n        cu.value = v;\n\n        gl.uniform1i(location, v);\n    }`,\n};\n\nconst GLSL_TO_ARRAY_SETTERS: Dict<string> = {\n\n    float:    `gl.uniform1fv(location, v)`,\n\n    vec2:     `gl.uniform2fv(location, v)`,\n    vec3:     `gl.uniform3fv(location, v)`,\n    vec4:     'gl.uniform4fv(location, v)',\n\n    mat4:     'gl.uniformMatrix4fv(location, false, v)',\n    mat3:     'gl.uniformMatrix3fv(location, false, v)',\n    mat2:     'gl.uniformMatrix2fv(location, false, v)',\n\n    int:      'gl.uniform1iv(location, v)',\n    ivec2:    'gl.uniform2iv(location, v)',\n    ivec3:    'gl.uniform3iv(location, v)',\n    ivec4:    'gl.uniform4iv(location, v)',\n\n    uint:     'gl.uniform1uiv(location, v)',\n    uvec2:    'gl.uniform2uiv(location, v)',\n    uvec3:    'gl.uniform3uiv(location, v)',\n    uvec4:    'gl.uniform4uiv(location, v)',\n\n    bool:     'gl.uniform1iv(location, v)',\n    bvec2:    'gl.uniform2iv(location, v)',\n    bvec3:    'gl.uniform3iv(location, v)',\n    bvec4:    'gl.uniform4iv(location, v)',\n\n    sampler2D:      'gl.uniform1iv(location, v)',\n    samplerCube:    'gl.uniform1iv(location, v)',\n    sampler2DArray: 'gl.uniform1iv(location, v)',\n};\n\nexport function generateUniformsSync(group: UniformGroup, uniformData: Dict<any>): UniformsSyncCallback\n{\n    const funcFragments = [`\n        var v = null;\n        var cv = null;\n        var cu = null;\n        var t = 0;\n        var gl = renderer.gl;\n    `];\n\n    for (const i in group.uniforms)\n    {\n        const data = uniformData[i];\n\n        if (!data)\n        {\n            if (group.uniforms[i]?.group)\n            {\n                if (group.uniforms[i].ubo)\n                {\n                    funcFragments.push(`\n                        renderer.shader.syncUniformBufferGroup(uv.${i}, '${i}');\n                    `);\n                }\n                else\n                {\n                    funcFragments.push(`\n                        renderer.shader.syncUniformGroup(uv.${i}, syncData);\n                    `);\n                }\n            }\n\n            continue;\n        }\n\n        const uniform = group.uniforms[i];\n\n        let parsed = false;\n\n        for (let j = 0; j < uniformParsers.length; j++)\n        {\n            if (uniformParsers[j].test(data, uniform))\n            {\n                funcFragments.push(uniformParsers[j].code(i, uniform));\n                parsed = true;\n\n                break;\n            }\n        }\n\n        if (!parsed)\n        {\n            const templateType = data.size === 1 && !data.isArray ? GLSL_TO_SINGLE_SETTERS_CACHED : GLSL_TO_ARRAY_SETTERS;\n            const template = templateType[data.type].replace('location', `ud[\"${i}\"].location`);\n\n            funcFragments.push(`\n            cu = ud[\"${i}\"];\n            cv = cu.value;\n            v = uv[\"${i}\"];\n            ${template};`);\n        }\n    }\n\n    /*\n     * the introduction of syncData is to solve an issue where textures in uniform groups are not set correctly\n     * the texture count was always starting from 0 in each group. This needs to increment each time a texture is used\n     * no matter which group is being used\n     *\n     */\n    // eslint-disable-next-line no-new-func\n    return new Function('ud', 'uv', 'renderer', 'syncData', funcFragments.join('\\n')) as UniformsSyncCallback;\n}\n", "import type { IRenderingContext } from '../../IRenderingContext';\n\nconst fragTemplate = [\n    'precision mediump float;',\n    'void main(void){',\n    'float test = 0.1;',\n    '%forloop%',\n    'gl_FragColor = vec4(0.0);',\n    '}',\n].join('\\n');\n\nfunction generateIfTestSrc(maxIfs: number): string\n{\n    let src = '';\n\n    for (let i = 0; i < maxIfs; ++i)\n    {\n        if (i > 0)\n        {\n            src += '\\nelse ';\n        }\n\n        if (i < maxIfs - 1)\n        {\n            src += `if(test == ${i}.0){}`;\n        }\n    }\n\n    return src;\n}\n\nexport function checkMaxIfStatementsInShader(maxIfs: number, gl: IRenderingContext): number\n{\n    if (maxIfs === 0)\n    {\n        throw new Error('Invalid value of `0` passed to `checkMaxIfStatementsInShader`');\n    }\n\n    const shader = gl.createShader(gl.FRAGMENT_SHADER);\n\n    while (true) // eslint-disable-line no-constant-condition\n    {\n        const fragmentSrc = fragTemplate.replace(/%forloop%/gi, generateIfTestSrc(maxIfs));\n\n        gl.shaderSource(shader, fragmentSrc);\n        gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            maxIfs = (maxIfs / 2) | 0;\n        }\n        else\n        {\n            // valid!\n            break;\n        }\n    }\n\n    return maxIfs;\n}\n", "// Cache the result to prevent running this over and over\nlet unsafeEval: boolean;\n\n/**\n * Not all platforms allow to generate function code (e.g., `new Function`).\n * this provides the platform-level detection.\n * @private\n * @returns {boolean} `true` if `new Function` is supported.\n */\nexport function unsafeEvalSupported(): boolean\n{\n    if (typeof unsafeEval === 'boolean')\n    {\n        return unsafeEval;\n    }\n\n    try\n    {\n        /* eslint-disable no-new-func */\n        const func = new Function('param1', 'param2', 'param3', 'return param1[param2] === param3;');\n        /* eslint-enable no-new-func */\n\n        unsafeEval = func({ a: 'b' }, 'a', 'b') === true;\n    }\n    catch (e)\n    {\n        unsafeEval = false;\n    }\n\n    return unsafeEval;\n}\n", "import { setPrecision,\n    getMaxFragmentPrecision } from './utils';\nimport { ProgramCache } from '@pixi/utils';\nimport defaultFragment from './defaultProgram.frag';\nimport defaultVertex from './defaultProgram.vert';\nimport { settings } from '@pixi/settings';\nimport { PRECISION } from '@pixi/constants';\n\nimport type { GLProgram } from './GLProgram';\n\nlet UID = 0;\n\nconst nameCache: { [key: string]: number } = {};\n\nexport interface IAttributeData\n{\n    type: string;\n    size: number;\n    location: number;\n    name: string;\n}\n\nexport interface IUniformData\n{\n    index: number;\n    type: string;\n    size: number;\n    isArray: boolean;\n    value: any;\n    name: string;\n}\n\n/**\n * Helper class to create a shader program.\n * @memberof PIXI\n */\nexport class Program\n{\n    public id: number;\n\n    /** Source code for the vertex shader. */\n    public vertexSrc: string;\n\n    /** Source code for the fragment shader. */\n    public fragmentSrc: string;\n\n    nameCache: any;\n    glPrograms: { [ key: number ]: GLProgram};\n    syncUniforms: any;\n\n    /** Assigned when a program is first bound to the shader system. */\n    attributeData: { [key: string]: IAttributeData};\n\n    /** Assigned when a program is first bound to the shader system. */\n    uniformData: {[key: string]: IUniformData};\n\n    /**\n     * @param vertexSrc - The source of the vertex shader.\n     * @param fragmentSrc - The source of the fragment shader.\n     * @param name - Name for shader\n     */\n    constructor(vertexSrc?: string, fragmentSrc?: string, name = 'pixi-shader')\n    {\n        this.id = UID++;\n        this.vertexSrc = vertexSrc || Program.defaultVertexSrc;\n        this.fragmentSrc = fragmentSrc || Program.defaultFragmentSrc;\n\n        this.vertexSrc = this.vertexSrc.trim();\n        this.fragmentSrc = this.fragmentSrc.trim();\n\n        if (this.vertexSrc.substring(0, 8) !== '#version')\n        {\n            name = name.replace(/\\s+/g, '-');\n\n            if (nameCache[name])\n            {\n                nameCache[name]++;\n                name += `-${nameCache[name]}`;\n            }\n            else\n            {\n                nameCache[name] = 1;\n            }\n\n            this.vertexSrc = `#define SHADER_NAME ${name}\\n${this.vertexSrc}`;\n            this.fragmentSrc = `#define SHADER_NAME ${name}\\n${this.fragmentSrc}`;\n\n            this.vertexSrc = setPrecision(this.vertexSrc, settings.PRECISION_VERTEX, PRECISION.HIGH);\n            this.fragmentSrc = setPrecision(this.fragmentSrc, settings.PRECISION_FRAGMENT, getMaxFragmentPrecision());\n        }\n\n        // currently this does not extract structs only default types\n        // this is where we store shader references..\n        this.glPrograms = {};\n\n        this.syncUniforms = null;\n    }\n\n    /**\n     * The default vertex shader source.\n     * @constant\n     */\n    static get defaultVertexSrc(): string\n    {\n        return defaultVertex;\n    }\n\n    /**\n     * The default fragment shader source.\n     * @constant\n     */\n    static get defaultFragmentSrc(): string\n    {\n        return defaultFragment;\n    }\n\n    /**\n     * A short hand function to create a program based of a vertex and fragment shader.\n     *\n     * This method will also check to see if there is a cached program.\n     * @param vertexSrc - The source of the vertex shader.\n     * @param fragmentSrc - The source of the fragment shader.\n     * @param name - Name for shader\n     * @returns A shiny new PixiJS shader program!\n     */\n    static from(vertexSrc?: string, fragmentSrc?: string, name?: string): Program\n    {\n        const key = vertexSrc + fragmentSrc;\n\n        let program = ProgramCache[key];\n\n        if (!program)\n        {\n            ProgramCache[key] = program = new Program(vertexSrc, fragmentSrc, name);\n        }\n\n        return program;\n    }\n}\n", "import { Program } from './Program';\nimport { UniformGroup } from './UniformGroup';\n\nimport type { Dict } from '@pixi/utils';\nimport { Runner } from '@pixi/runner';\n\n/**\n * A helper class for shaders.\n * @memberof PIXI\n */\nexport class Shader\n{\n    /** Program that the shader uses. */\n    public program: Program;\n    public uniformGroup: UniformGroup;\n\n    /**\n     * Used internally to bind uniform buffer objects.\n     * @ignore\n     */\n    uniformBindCount = 0;\n\n    disposeRunner: Runner;\n\n    /**\n     * @param program - The program the shader will use.\n     * @param uniforms - Custom uniforms to use to augment the built-in ones.\n     */\n    constructor(program: Program, uniforms?: Dict<any>)\n    {\n        this.program = program;\n\n        // lets see whats been passed in\n        // uniforms should be converted to a uniform group\n        if (uniforms)\n        {\n            if (uniforms instanceof UniformGroup)\n            {\n                this.uniformGroup = uniforms;\n            }\n            else\n            {\n                this.uniformGroup = new UniformGroup(uniforms);\n            }\n        }\n        else\n        {\n            this.uniformGroup = new UniformGroup({});\n        }\n\n        this.disposeRunner = new Runner('disposeShader');\n    }\n\n    // TODO move to shader system..\n    checkUniformExists(name: string, group: UniformGroup): boolean\n    {\n        if (group.uniforms[name])\n        {\n            return true;\n        }\n\n        for (const i in group.uniforms)\n        {\n            const uniform = group.uniforms[i];\n\n            if (uniform.group)\n            {\n                if (this.checkUniformExists(name, uniform))\n                {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    destroy(): void\n    {\n        // usage count on programs?\n        // remove if not used!\n        this.uniformGroup = null;\n\n        this.disposeRunner.emit(this);\n        this.disposeRunner.destroy();\n    }\n\n    /**\n     * Shader uniform values, shortcut for `uniformGroup.uniforms`.\n     * @readonly\n     */\n    get uniforms(): Dict<any>\n    {\n        return this.uniformGroup.uniforms;\n    }\n\n    /**\n     * A short hand function to create a shader based of a vertex and fragment shader.\n     * @param vertexSrc - The source of the vertex shader.\n     * @param fragmentSrc - The source of the fragment shader.\n     * @param uniforms - Custom uniforms to use to augment the built-in ones.\n     * @returns A shiny new PixiJS shader!\n     */\n    static from(vertexSrc?: string, fragmentSrc?: string, uniforms?: Dict<any>): Shader\n    {\n        const program = Program.from(vertexSrc, fragmentSrc);\n\n        return new Shader(program, uniforms);\n    }\n}\n", "import { BLEND_MODES } from '@pixi/constants';\n\n/* eslint-disable max-len */\n\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\n\n/**\n * This is a WebGL state, and is is passed to {@link PIXI.StateSystem}.\n *\n * Each mesh rendered may require WebGL to be in a different state.\n * For example you may want different blend mode or to enable polygon offsets\n * @memberof PIXI\n */\nexport class State\n{\n    data: number;\n    _blendMode: BLEND_MODES;\n    _polygonOffset: number;\n\n    constructor()\n    {\n        this.data = 0;\n\n        this.blendMode = BLEND_MODES.NORMAL;\n        this.polygonOffset = 0;\n\n        this.blend = true;\n        this.depthMask = true;\n        //  this.depthTest = true;\n    }\n\n    /**\n     * Activates blending of the computed fragment color values.\n     * @default true\n     */\n    get blend(): boolean\n    {\n        return !!(this.data & (1 << BLEND));\n    }\n\n    set blend(value: boolean)\n    {\n        if (!!(this.data & (1 << BLEND)) !== value)\n        {\n            this.data ^= (1 << BLEND);\n        }\n    }\n\n    /**\n     * Activates adding an offset to depth values of polygon's fragments\n     * @default false\n     */\n    get offsets(): boolean\n    {\n        return !!(this.data & (1 << OFFSET));\n    }\n\n    set offsets(value: boolean)\n    {\n        if (!!(this.data & (1 << OFFSET)) !== value)\n        {\n            this.data ^= (1 << OFFSET);\n        }\n    }\n\n    /**\n     * Activates culling of polygons.\n     * @default false\n     */\n    get culling(): boolean\n    {\n        return !!(this.data & (1 << CULLING));\n    }\n\n    set culling(value: boolean)\n    {\n        if (!!(this.data & (1 << CULLING)) !== value)\n        {\n            this.data ^= (1 << CULLING);\n        }\n    }\n\n    /**\n     * Activates depth comparisons and updates to the depth buffer.\n     * @default false\n     */\n    get depthTest(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_TEST));\n    }\n\n    set depthTest(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_TEST)) !== value)\n        {\n            this.data ^= (1 << DEPTH_TEST);\n        }\n    }\n\n    /**\n     * Enables or disables writing to the depth buffer.\n     * @default true\n     */\n    get depthMask(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_MASK));\n    }\n\n    set depthMask(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_MASK)) !== value)\n        {\n            this.data ^= (1 << DEPTH_MASK);\n        }\n    }\n\n    /**\n     * Specifies whether or not front or back-facing polygons can be culled.\n     * @default false\n     */\n    get clockwiseFrontFace(): boolean\n    {\n        return !!(this.data & (1 << WINDING));\n    }\n\n    set clockwiseFrontFace(value: boolean)\n    {\n        if (!!(this.data & (1 << WINDING)) !== value)\n        {\n            this.data ^= (1 << WINDING);\n        }\n    }\n\n    /**\n     * The blend mode to be applied when this state is set. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this._blendMode;\n    }\n\n    set blendMode(value: BLEND_MODES)\n    {\n        this.blend = (value !== BLEND_MODES.NONE);\n        this._blendMode = value;\n    }\n\n    /**\n     * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n     * @default 0\n     */\n    get polygonOffset(): number\n    {\n        return this._polygonOffset;\n    }\n\n    set polygonOffset(value: number)\n    {\n        this.offsets = !!value;\n        this._polygonOffset = value;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/core:State `\n            + `blendMode=${this.blendMode} `\n            + `clockwiseFrontFace=${this.clockwiseFrontFace} `\n            + `culling=${this.culling} `\n            + `depthMask=${this.depthMask} `\n            + `polygonOffset=${this.polygonOffset}`\n            + `]`;\n    }\n    // #endif\n\n    static for2d(): State\n    {\n        const state = new State();\n\n        state.depthTest = false;\n        state.blend = true;\n\n        return state;\n    }\n}\n\n", "import { settings } from '@pixi/settings';\nimport { Program } from '../shader/Program';\nimport { Shader } from '../shader/Shader';\nimport { State } from '../state/State';\nimport defaultFragment from './defaultFilter.frag';\nimport defaultVertex from './defaultFilter.vert';\n\nimport type { MSAA_QUALITY, BLEND_MODES, CLEAR_MODES } from '@pixi/constants';\nimport type { Dict } from '@pixi/utils';\nimport type { RenderTexture } from '../renderTexture/RenderTexture';\nimport type { FilterState } from './FilterState';\nimport type { FilterSystem } from './FilterSystem';\n\n/**\n * A filter is a special shader that applies post-processing effects to an input texture and writes into an output\n * render-target.\n *\n * {@link http://pixijs.io/examples/#/filters/blur-filter.js Example} of the\n * {@link PIXI.filters.BlurFilter BlurFilter}.\n *\n * ### Usage\n * Filters can be applied to any DisplayObject or Container.\n * PixiJS' `FilterSystem` renders the container into temporary Framebuffer,\n * then filter renders it to the screen.\n * Multiple filters can be added to the `filters` array property and stacked on each other.\n *\n * ```\n * const filter = new PIXI.Filter(myShaderVert, myShaderFrag, { myUniform: 0.5 });\n * const container = new PIXI.Container();\n * container.filters = [filter];\n * ```\n *\n * ### Previous Version Differences\n *\n * In PixiJS **v3**, a filter was always applied to _whole screen_.\n *\n * In PixiJS **v4**, a filter can be applied _only part of the screen_.\n * Developers had to create a set of uniforms to deal with coordinates.\n *\n * In PixiJS **v5** combines _both approaches_.\n * Developers can use normal coordinates of v3 and then allow filter to use partial Framebuffers,\n * bringing those extra uniforms into account.\n *\n * Also be aware that we have changed default vertex shader, please consult\n * {@link https://github.com/pixijs/pixi.js/wiki/v5-Creating-filters Wiki}.\n *\n * ### Frames\n *\n * The following table summarizes the coordinate spaces used in the filtering pipeline:\n *\n * <table>\n * <thead>\n *   <tr>\n *     <th>Coordinate Space</th>\n *     <th>Description</th>\n *   </tr>\n * </thead>\n * <tbody>\n *   <tr>\n *     <td>Texture Coordinates</td>\n *     <td>\n *         The texture (or UV) coordinates in the input base-texture's space. These are normalized into the (0,1) range along\n *         both axes.\n *     </td>\n *   </tr>\n *   <tr>\n *     <td>World Space</td>\n *     <td>\n *         A point in the same space as the world bounds of any display-object (i.e. in the scene graph's space).\n *     </td>\n *   </tr>\n *   <tr>\n *     <td>Physical Pixels</td>\n *     <td>\n *         This is base-texture's space with the origin on the top-left. You can calculate these by multiplying the texture\n *         coordinates by the dimensions of the texture.\n *     </td>\n *   </tr>\n * </tbody>\n * </table>\n *\n * ### Built-in Uniforms\n *\n * PixiJS viewport uses screen (CSS) coordinates, `(0, 0, renderer.screen.width, renderer.screen.height)`,\n * and `projectionMatrix` uniform maps it to the gl viewport.\n *\n * **uSampler**\n *\n * The most important uniform is the input texture that container was rendered into.\n * _Important note: as with all Framebuffers in PixiJS, both input and output are\n * premultiplied by alpha._\n *\n * By default, input normalized coordinates are passed to fragment shader with `vTextureCoord`.\n * Use it to sample the input.\n *\n * ```\n * const fragment = `\n * varying vec2 vTextureCoord;\n * uniform sampler2D uSampler;\n * void main(void)\n * {\n *    gl_FragColor = texture2D(uSampler, vTextureCoord);\n * }\n * `;\n *\n * const myFilter = new PIXI.Filter(null, fragment);\n * ```\n *\n * This filter is just one uniform less than {@link PIXI.filters.AlphaFilter AlphaFilter}.\n *\n * **outputFrame**\n *\n * The `outputFrame` holds the rectangle where filter is applied in screen (CSS) coordinates.\n * It's the same as `renderer.screen` for a fullscreen filter.\n * Only a part of  `outputFrame.zw` size of temporary Framebuffer is used,\n * `(0, 0, outputFrame.width, outputFrame.height)`,\n *\n * Filters uses this quad to normalized (0-1) space, its passed into `aVertexPosition` attribute.\n * To calculate vertex position in screen space using normalized (0-1) space:\n *\n * ```\n * vec4 filterVertexPosition( void )\n * {\n *     vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n *     return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n * }\n * ```\n *\n * **inputSize**\n *\n * Temporary framebuffer is different, it can be either the size of screen, either power-of-two.\n * The `inputSize.xy` are size of temporary framebuffer that holds input.\n * The `inputSize.zw` is inverted, it's a shortcut to evade division inside the shader.\n *\n * Set `inputSize.xy = outputFrame.zw` for a fullscreen filter.\n *\n * To calculate input normalized coordinate, you have to map it to filter normalized space.\n * Multiply by `outputFrame.zw` to get input coordinate.\n * Divide by `inputSize.xy` to get input normalized coordinate.\n *\n * ```\n * vec2 filterTextureCoord( void )\n * {\n *     return aVertexPosition * (outputFrame.zw * inputSize.zw); // same as /inputSize.xy\n * }\n * ```\n * **resolution**\n *\n * The `resolution` is the ratio of screen (CSS) pixels to real pixels.\n *\n * **inputPixel**\n *\n * `inputPixel.xy` is the size of framebuffer in real pixels, same as `inputSize.xy * resolution`\n * `inputPixel.zw` is inverted `inputPixel.xy`.\n *\n * It's handy for filters that use neighbour pixels, like {@link PIXI.filters.FXAAFilter FXAAFilter}.\n *\n * **inputClamp**\n *\n * If you try to get info from outside of used part of Framebuffer - you'll get undefined behaviour.\n * For displacements, coordinates has to be clamped.\n *\n * The `inputClamp.xy` is left-top pixel center, you may ignore it, because we use left-top part of Framebuffer\n * `inputClamp.zw` is bottom-right pixel center.\n *\n * ```\n * vec4 color = texture2D(uSampler, clamp(modifiedTextureCoord, inputClamp.xy, inputClamp.zw))\n * ```\n * OR\n * ```\n * vec4 color = texture2D(uSampler, min(modifigedTextureCoord, inputClamp.zw))\n * ```\n *\n * ### Additional Information\n *\n * Complete documentation on Filter usage is located in the\n * {@link https://github.com/pixijs/pixi.js/wiki/v5-Creating-filters Wiki}.\n *\n * Since PixiJS only had a handful of built-in filters, additional filters can be downloaded\n * {@link https://github.com/pixijs/pixi-filters here} from the PixiJS Filters repository.\n * @memberof PIXI\n */\nexport class Filter extends Shader\n{\n    /**\n     * The padding of the filter. Some filters require extra space to breath such as a blur.\n     * Increasing this will add extra width and height to the bounds of the object that the\n     * filter is applied to.\n     */\n    public padding: number;\n\n    /** The samples of the filter. */\n    public multisample: MSAA_QUALITY;\n\n    /** If enabled is true the filter is applied, if false it will not. */\n    public enabled: boolean;\n\n    /**\n     * If enabled, PixiJS will fit the filter area into boundaries for better performance.\n     * Switch it off if it does not work for specific shader.\n     * @default true\n     */\n    public autoFit: boolean;\n\n    /**\n     * Legacy filters use position and uvs from attributes (set by filter system)\n     * @readonly\n     */\n    public legacy: boolean;\n\n    /** The WebGL state the filter requires to render. */\n    state: State;\n\n    protected _resolution: number;\n\n    /**\n     * @param vertexSrc - The source of the vertex shader.\n     * @param fragmentSrc - The source of the fragment shader.\n     * @param uniforms - Custom uniforms to use to augment the built-in ones.\n     */\n    constructor(vertexSrc?: string, fragmentSrc?: string, uniforms?: Dict<any>)\n    {\n        const program = Program.from(vertexSrc || Filter.defaultVertexSrc,\n            fragmentSrc || Filter.defaultFragmentSrc);\n\n        super(program, uniforms);\n\n        this.padding = 0;\n        this.resolution = settings.FILTER_RESOLUTION;\n        this.multisample = settings.FILTER_MULTISAMPLE;\n        this.enabled = true;\n        this.autoFit = true;\n        this.state = new State();\n    }\n\n    /**\n     * Applies the filter\n     * @param {PIXI.FilterSystem} filterManager - The renderer to retrieve the filter from\n     * @param {PIXI.RenderTexture} input - The input render target.\n     * @param {PIXI.RenderTexture} output - The target to output to.\n     * @param {PIXI.CLEAR_MODES} [clearMode] - Should the output be cleared before rendering to it.\n     * @param {object} [_currentState] - It's current state of filter.\n     *        There are some useful properties in the currentState :\n     *        target, filters, sourceFrame, destinationFrame, renderTarget, resolution\n     */\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode?: CLEAR_MODES,\n        _currentState?: FilterState): void\n    {\n        // do as you please!\n\n        filterManager.applyFilter(this, input, output, clearMode);\n\n        // or just do a regular render..\n    }\n\n    /**\n     * Sets the blend mode of the filter.\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this.state.blendMode;\n    }\n\n    set blendMode(value: BLEND_MODES)\n    {\n        this.state.blendMode = value;\n    }\n\n    /**\n     * The resolution of the filter. Setting this to be lower will lower the quality but\n     * increase the performance of the filter.\n     */\n    get resolution(): number\n    {\n        return this._resolution;\n    }\n\n    set resolution(value: number)\n    {\n        this._resolution = value;\n    }\n\n    /**\n     * The default vertex shader source\n     * @constant\n     */\n    static get defaultVertexSrc(): string\n    {\n        return defaultVertex;\n    }\n\n    /**\n     * The default fragment shader source\n     * @constant\n     */\n    static get defaultFragmentSrc(): string\n    {\n        return defaultFragment;\n    }\n\n    /** Used for caching shader IDs. */\n    static SOURCE_KEY_MAP: Dict<string>;\n}\n", "import { Matrix } from '@pixi/math';\n\nimport type { Texture } from './Texture';\n\nconst tempMat = new Matrix();\n\n/**\n * Class controls uv mapping from Texture normal space to BaseTexture normal space.\n *\n * Takes `trim` and `rotate` into account. May contain clamp settings for Meshes and TilingSprite.\n *\n * Can be used in Texture `uvMatrix` field, or separately, you can use different clamp settings on the same texture.\n * If you want to add support for texture region of certain feature or filter, that's what you're looking for.\n *\n * Takes track of Texture changes through `_lastTextureID` private field.\n * Use `update()` method call to track it from outside.\n * @see PIXI.Texture\n * @see PIXI.Mesh\n * @see PIXI.TilingSprite\n * @memberof PIXI\n */\nexport class TextureMatrix\n{\n    /**\n     * Matrix operation that converts texture region coords to texture coords\n     * @readonly\n     */\n    public mapCoord: Matrix;\n\n    /**\n     * Changes frame clamping\n     * Works with TilingSprite and Mesh\n     * Change to 1.5 if you texture has repeated right and bottom lines, that leads to smoother borders\n     * @default 0\n     */\n    public clampOffset: number;\n\n    /**\n     * Changes frame clamping\n     * Works with TilingSprite and Mesh\n     * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas\n     * @default 0.5\n     */\n    public clampMargin: number;\n\n    /**\n     * Clamp region for normalized coords, left-top pixel center in xy , bottom-right in zw.\n     * Calculated based on clampOffset.\n     */\n    readonly uClampFrame: Float32Array;\n\n    /** Normalized clamp offset. Calculated based on clampOffset. */\n    readonly uClampOffset: Float32Array;\n\n    /**\n     * Tracks Texture frame changes.\n     * @protected\n     */\n    _textureID: number;\n\n    /**\n     * Tracks Texture frame changes.\n     * @protected\n     */\n    _updateID: number;\n    _texture: Texture;\n\n    /**\n     * If texture size is the same as baseTexture.\n     * @default false\n     * @readonly\n     */\n    isSimple: boolean;\n\n    /**\n     * @param texture - observed texture\n     * @param clampMargin - Changes frame clamping, 0.5 by default. Use -0.5 for extra border.\n     */\n    constructor(texture: Texture, clampMargin?: number)\n    {\n        this._texture = texture;\n\n        this.mapCoord = new Matrix();\n        this.uClampFrame = new Float32Array(4);\n        this.uClampOffset = new Float32Array(2);\n        this._textureID = -1;\n        this._updateID = 0;\n\n        this.clampOffset = 0;\n        this.clampMargin = (typeof clampMargin === 'undefined') ? 0.5 : clampMargin;\n        this.isSimple = false;\n    }\n\n    /** Texture property. */\n    get texture(): Texture\n    {\n        return this._texture;\n    }\n\n    set texture(value: Texture)\n    {\n        this._texture = value;\n        this._textureID = -1;\n    }\n\n    /**\n     * Multiplies uvs array to transform\n     * @param uvs - mesh uvs\n     * @param [out=uvs] - output\n     * @returns - output\n     */\n    multiplyUvs(uvs: Float32Array, out?: Float32Array): Float32Array\n    {\n        if (out === undefined)\n        {\n            out = uvs;\n        }\n\n        const mat = this.mapCoord;\n\n        for (let i = 0; i < uvs.length; i += 2)\n        {\n            const x = uvs[i];\n            const y = uvs[i + 1];\n\n            out[i] = (x * mat.a) + (y * mat.c) + mat.tx;\n            out[i + 1] = (x * mat.b) + (y * mat.d) + mat.ty;\n        }\n\n        return out;\n    }\n\n    /**\n     * Updates matrices if texture was changed.\n     * @param [forceUpdate=false] - if true, matrices will be updated any case\n     * @returns - Whether or not it was updated\n     */\n    update(forceUpdate?: boolean): boolean\n    {\n        const tex = this._texture;\n\n        if (!tex || !tex.valid)\n        {\n            return false;\n        }\n\n        if (!forceUpdate\n            && this._textureID === tex._updateID)\n        {\n            return false;\n        }\n\n        this._textureID = tex._updateID;\n        this._updateID++;\n\n        const uvs = tex._uvs;\n\n        this.mapCoord.set(uvs.x1 - uvs.x0, uvs.y1 - uvs.y0, uvs.x3 - uvs.x0, uvs.y3 - uvs.y0, uvs.x0, uvs.y0);\n\n        const orig = tex.orig;\n        const trim = tex.trim;\n\n        if (trim)\n        {\n            tempMat.set(orig.width / trim.width, 0, 0, orig.height / trim.height,\n                -trim.x / trim.width, -trim.y / trim.height);\n            this.mapCoord.append(tempMat);\n        }\n\n        const texBase = tex.baseTexture;\n        const frame = this.uClampFrame;\n        const margin = this.clampMargin / texBase.resolution;\n        const offset = this.clampOffset;\n\n        frame[0] = (tex._frame.x + margin + offset) / texBase.width;\n        frame[1] = (tex._frame.y + margin + offset) / texBase.height;\n        frame[2] = (tex._frame.x + tex._frame.width - margin + offset) / texBase.width;\n        frame[3] = (tex._frame.y + tex._frame.height - margin + offset) / texBase.height;\n        this.uClampOffset[0] = offset / texBase.realWidth;\n        this.uClampOffset[1] = offset / texBase.realHeight;\n\n        this.isSimple = tex._frame.width === texBase.width\n            && tex._frame.height === texBase.height\n            && tex.rotate === 0;\n\n        return true;\n    }\n}\n", "import { Filter } from '../Filter';\nimport type { Point } from '@pixi/math';\nimport { Matrix } from '@pixi/math';\nimport type { CLEAR_MODES } from '@pixi/constants';\nimport vertex from './spriteMaskFilter.vert';\nimport fragment from './spriteMaskFilter.frag';\nimport { TextureMatrix } from '../../textures/TextureMatrix';\n\nimport type { FilterSystem } from '../FilterSystem';\nimport type { IMaskTarget } from '../../mask/MaskData';\nimport type { Texture } from '../../textures/Texture';\nimport type { RenderTexture } from '../../renderTexture/RenderTexture';\nimport type { Dict } from '@pixi/utils';\n\nexport interface ISpriteMaskTarget extends IMaskTarget\n{\n    _texture: Texture;\n    worldAlpha: number;\n    anchor: Point;\n}\n\nexport interface ISpriteMaskFilter extends Filter\n{\n    maskSprite: IMaskTarget;\n}\n\n/**\n * This handles a Sprite acting as a mask, as opposed to a Graphic.\n *\n * WebGL only.\n * @memberof PIXI\n */\nexport class SpriteMaskFilter extends Filter\n{\n    /** @private */\n    _maskSprite: IMaskTarget;\n\n    /** Mask matrix */\n    maskMatrix: Matrix;\n\n    /**\n     * @param {PIXI.Sprite} sprite - The target sprite.\n     */\n    constructor(sprite: IMaskTarget);\n\n    /**\n     * @param vertexSrc - The source of the vertex shader.\n     * @param fragmentSrc - The source of the fragment shader.\n     * @param uniforms - Custom uniforms to use to augment the built-in ones.\n     */\n    constructor(vertexSrc?: string, fragmentSrc?: string, uniforms?: Dict<any>);\n\n    /** @ignore */\n    constructor(vertexSrc?: string | IMaskTarget, fragmentSrc?: string, uniforms?: Dict<any>)\n    {\n        let sprite = null;\n\n        if (typeof vertexSrc !== 'string' && fragmentSrc === undefined && uniforms === undefined)\n        {\n            sprite = vertexSrc as IMaskTarget;\n            vertexSrc = undefined;\n            fragmentSrc = undefined;\n            uniforms = undefined;\n        }\n\n        super(vertexSrc as string || vertex, fragmentSrc || fragment, uniforms);\n\n        this.maskSprite = sprite;\n        this.maskMatrix = new Matrix();\n    }\n\n    /**\n     * Sprite mask\n     * @type {PIXI.DisplayObject}\n     */\n    get maskSprite(): IMaskTarget\n    {\n        return this._maskSprite;\n    }\n\n    set maskSprite(value: IMaskTarget)\n    {\n        this._maskSprite = value;\n\n        if (this._maskSprite)\n        {\n            this._maskSprite.renderable = false;\n        }\n    }\n\n    /**\n     * Applies the filter\n     * @param filterManager - The renderer to retrieve the filter from\n     * @param input - The input render target.\n     * @param output - The target to output to.\n     * @param clearMode - Should the output be cleared before rendering to it.\n     */\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode: CLEAR_MODES): void\n    {\n        const maskSprite = this._maskSprite as ISpriteMaskTarget;\n        const tex = maskSprite._texture;\n\n        if (!tex.valid)\n        {\n            return;\n        }\n        if (!tex.uvMatrix)\n        {\n            // margin = 0.0, let it bleed a bit, shader code becomes easier\n            // assuming that atlas textures were made with 1-pixel padding\n            tex.uvMatrix = new TextureMatrix(tex, 0.0);\n        }\n        tex.uvMatrix.update();\n\n        this.uniforms.npmAlpha = tex.baseTexture.alphaMode ? 0.0 : 1.0;\n        this.uniforms.mask = tex;\n        // get _normalized sprite texture coords_ and convert them to _normalized atlas texture coords_ with `prepend`\n        this.uniforms.otherMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, maskSprite)\n            .prepend(tex.uvMatrix.mapCoord);\n        this.uniforms.alpha = maskSprite.worldAlpha;\n        this.uniforms.maskClamp = tex.uvMatrix.uClampFrame;\n\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n}\n", "import { MaskData } from './MaskData';\nimport { SpriteMaskFilter } from '../filters/spriteMask/SpriteMaskFilter';\nimport { MASK_TYPES } from '@pixi/constants';\n\nimport type { ISystem } from '../ISystem';\nimport type { IMaskTarget } from './MaskData';\nimport type { Renderer } from '../Renderer';\n\n/**\n * System plugin to the renderer to manage masks.\n *\n * There are three built-in types of masking:\n * **Scissor Masking**: Scissor masking discards pixels that are outside of a rectangle called the scissor box. It is\n *  the most performant as the scissor test is inexpensive. However, it can only be used when the mask is rectangular.\n * **Stencil Masking**: Stencil masking discards pixels that don't overlap with the pixels rendered into the stencil\n *  buffer. It is the next fastest option as it does not require rendering into a separate framebuffer. However, it does\n *  cause the mask to be rendered **twice** for each masking operation; hence, minimize the rendering cost of your masks.\n * **Sprite Mask Filtering**: Sprite mask filtering discards pixels based on the red channel of the sprite-mask's\n *  texture. (Generally, the masking texture is grayscale). Using advanced techniques, you might be able to embed this\n *  type of masking in a custom shader - and hence, bypassing the masking system fully for performance wins.\n *\n * The best type of masking is auto-detected when you `push` one. To use scissor masking, you must pass in a `Graphics`\n * object with just a rectangle drawn.\n *\n * ## Mask Stacks\n *\n * In the scene graph, masks can be applied recursively, i.e. a mask can be applied during a masking operation. The mask\n * stack stores the currently applied masks in order. Each {@link PIXI.BaseRenderTexture} holds its own mask stack, i.e.\n * when you switch render-textures, the old masks only applied when you switch back to rendering to the old render-target.\n * @memberof PIXI\n */\nexport class MaskSystem implements ISystem\n{\n    /**\n     * Flag to enable scissor masking.\n     * @default true\n     */\n    public enableScissor: boolean;\n\n    /** Pool of used sprite mask filters. */\n    protected readonly alphaMaskPool: Array<SpriteMaskFilter[]>;\n\n    /**\n     * Current index of alpha mask pool.\n     * @default 0\n     * @readonly\n     */\n    protected alphaMaskIndex: number;\n\n    /** Pool of mask data. */\n    private readonly maskDataPool: Array<MaskData>;\n    private maskStack: Array<MaskData>;\n    private renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        this.enableScissor = true;\n        this.alphaMaskPool = [];\n        this.maskDataPool = [];\n\n        this.maskStack = [];\n        this.alphaMaskIndex = 0;\n    }\n\n    /**\n     * Changes the mask stack that is used by this System.\n     * @param maskStack - The mask stack\n     */\n    setMaskStack(maskStack: Array<MaskData>): void\n    {\n        this.maskStack = maskStack;\n        this.renderer.scissor.setMaskStack(maskStack);\n        this.renderer.stencil.setMaskStack(maskStack);\n    }\n\n    /**\n     * Enables the mask and appends it to the current mask stack.\n     *\n     * NOTE: The batch renderer should be flushed beforehand to prevent pending renders from being masked.\n     * @param {PIXI.DisplayObject} target - Display Object to push the mask to\n     * @param {PIXI.MaskData|PIXI.Sprite|PIXI.Graphics|PIXI.DisplayObject} maskDataOrTarget - The masking data.\n     */\n    push(target: IMaskTarget, maskDataOrTarget: MaskData | IMaskTarget): void\n    {\n        let maskData = maskDataOrTarget as MaskData;\n\n        if (!maskData.isMaskData)\n        {\n            const d = this.maskDataPool.pop() || new MaskData();\n\n            d.pooled = true;\n            d.maskObject = maskDataOrTarget as IMaskTarget;\n            maskData = d;\n        }\n\n        const maskAbove = this.maskStack.length !== 0 ? this.maskStack[this.maskStack.length - 1] : null;\n\n        maskData.copyCountersOrReset(maskAbove);\n        maskData._colorMask = maskAbove ? maskAbove._colorMask : 0xf;\n\n        if (maskData.autoDetect)\n        {\n            this.detect(maskData);\n        }\n\n        maskData._target = target;\n\n        if (maskData.type !== MASK_TYPES.SPRITE)\n        {\n            this.maskStack.push(maskData);\n        }\n\n        if (maskData.enabled)\n        {\n            switch (maskData.type)\n            {\n                case MASK_TYPES.SCISSOR:\n                    this.renderer.scissor.push(maskData);\n                    break;\n                case MASK_TYPES.STENCIL:\n                    this.renderer.stencil.push(maskData);\n                    break;\n                case MASK_TYPES.SPRITE:\n                    maskData.copyCountersOrReset(null);\n                    this.pushSpriteMask(maskData);\n                    break;\n                case MASK_TYPES.COLOR:\n                    this.pushColorMask(maskData);\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        if (maskData.type === MASK_TYPES.SPRITE)\n        {\n            this.maskStack.push(maskData);\n        }\n    }\n\n    /**\n     * Removes the last mask from the mask stack and doesn't return it.\n     *\n     * NOTE: The batch renderer should be flushed beforehand to render the masked contents before the mask is removed.\n     * @param {PIXI.IMaskTarget} target - Display Object to pop the mask from\n     */\n    pop(target: IMaskTarget): void\n    {\n        const maskData = this.maskStack.pop();\n\n        if (!maskData || maskData._target !== target)\n        {\n            // TODO: add an assert when we have it\n\n            return;\n        }\n\n        if (maskData.enabled)\n        {\n            switch (maskData.type)\n            {\n                case MASK_TYPES.SCISSOR:\n                    this.renderer.scissor.pop(maskData);\n                    break;\n                case MASK_TYPES.STENCIL:\n                    this.renderer.stencil.pop(maskData.maskObject);\n                    break;\n                case MASK_TYPES.SPRITE:\n                    this.popSpriteMask(maskData);\n                    break;\n                case MASK_TYPES.COLOR:\n                    this.popColorMask(maskData);\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        maskData.reset();\n\n        if (maskData.pooled)\n        {\n            this.maskDataPool.push(maskData);\n        }\n\n        if (this.maskStack.length !== 0)\n        {\n            const maskCurrent = this.maskStack[this.maskStack.length - 1];\n\n            if (maskCurrent.type === MASK_TYPES.SPRITE && maskCurrent._filters)\n            {\n                maskCurrent._filters[0].maskSprite = maskCurrent.maskObject;\n            }\n        }\n    }\n\n    /**\n     * Sets type of MaskData based on its maskObject.\n     * @param maskData\n     */\n    detect(maskData: MaskData): void\n    {\n        const maskObject = maskData.maskObject;\n\n        if (!maskObject)\n        {\n            maskData.type = MASK_TYPES.COLOR;\n        }\n        else if (maskObject.isSprite)\n        {\n            maskData.type = MASK_TYPES.SPRITE;\n        }\n        else if (this.enableScissor && this.renderer.scissor.testScissor(maskData))\n        {\n            maskData.type = MASK_TYPES.SCISSOR;\n        }\n        else\n        {\n            maskData.type = MASK_TYPES.STENCIL;\n        }\n    }\n\n    /**\n     * Applies the Mask and adds it to the current filter stack.\n     * @param maskData - Sprite to be used as the mask.\n     */\n    pushSpriteMask(maskData: MaskData): void\n    {\n        const { maskObject } = maskData;\n        const target = maskData._target;\n        let alphaMaskFilter = maskData._filters;\n\n        if (!alphaMaskFilter)\n        {\n            alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex];\n\n            if (!alphaMaskFilter)\n            {\n                alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex] = [new SpriteMaskFilter()];\n            }\n        }\n\n        const renderer = this.renderer;\n        const renderTextureSystem = renderer.renderTexture;\n\n        let resolution;\n        let multisample;\n\n        if (renderTextureSystem.current)\n        {\n            const renderTexture = renderTextureSystem.current;\n\n            resolution = maskData.resolution || renderTexture.resolution;\n            multisample = maskData.multisample ?? renderTexture.multisample;\n        }\n        else\n        {\n            resolution = maskData.resolution || renderer.resolution;\n            multisample = maskData.multisample ?? renderer.multisample;\n        }\n\n        alphaMaskFilter[0].resolution = resolution;\n        alphaMaskFilter[0].multisample = multisample;\n        alphaMaskFilter[0].maskSprite = maskObject;\n\n        const stashFilterArea = target.filterArea;\n\n        target.filterArea = maskObject.getBounds(true);\n        renderer.filter.push(target, alphaMaskFilter);\n        target.filterArea = stashFilterArea;\n\n        if (!maskData._filters)\n        {\n            this.alphaMaskIndex++;\n        }\n    }\n\n    /**\n     * Removes the last filter from the filter stack and doesn't return it.\n     * @param maskData - Sprite to be used as the mask.\n     */\n    popSpriteMask(maskData: MaskData): void\n    {\n        this.renderer.filter.pop();\n\n        if (maskData._filters)\n        {\n            maskData._filters[0].maskSprite = null;\n        }\n        else\n        {\n            this.alphaMaskIndex--;\n            this.alphaMaskPool[this.alphaMaskIndex][0].maskSprite = null;\n        }\n    }\n\n    /**\n     * Pushes the color mask.\n     * @param maskData - The mask data\n     */\n    pushColorMask(maskData: MaskData): void\n    {\n        const currColorMask = maskData._colorMask;\n        const nextColorMask = maskData._colorMask = currColorMask & maskData.colorMask;\n\n        if (nextColorMask !== currColorMask)\n        {\n            this.renderer.gl.colorMask(\n                (nextColorMask & 0x1) !== 0,\n                (nextColorMask & 0x2) !== 0,\n                (nextColorMask & 0x4) !== 0,\n                (nextColorMask & 0x8) !== 0\n            );\n        }\n    }\n\n    /**\n     * Pops the color mask.\n     * @param maskData - The mask data\n     */\n    popColorMask(maskData: MaskData): void\n    {\n        const currColorMask = maskData._colorMask;\n        const nextColorMask = this.maskStack.length > 0\n            ? this.maskStack[this.maskStack.length - 1]._colorMask : 0xf;\n\n        if (nextColorMask !== currColorMask)\n        {\n            this.renderer.gl.colorMask(\n                (nextColorMask & 0x1) !== 0,\n                (nextColorMask & 0x2) !== 0,\n                (nextColorMask & 0x4) !== 0,\n                (nextColorMask & 0x8) !== 0\n            );\n        }\n    }\n\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n", "import type { ISystem } from '../ISystem';\nimport type { MaskData } from './MaskData';\nimport type { Renderer } from '../Renderer';\n\n/**\n * System plugin to the renderer to manage specific types of masking operations.\n * @memberof PIXI\n */\nexport class AbstractMaskSystem implements ISystem\n{\n    /**\n     * The mask stack\n     * @member {PIXI.MaskData[]}\n     */\n    protected maskStack: Array<MaskData>;\n\n    /**\n     * Constant for gl.enable\n     * @private\n     */\n    protected glConst: number;\n    protected renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        this.maskStack = [];\n        this.glConst = 0;\n    }\n\n    /** Gets count of masks of certain type. */\n    getStackLength(): number\n    {\n        return this.maskStack.length;\n    }\n\n    /**\n     * Changes the mask stack that is used by this System.\n     * @param {PIXI.MaskData[]} maskStack - The mask stack\n     */\n    setMaskStack(maskStack: Array<MaskData>): void\n    {\n        const { gl } = this.renderer;\n        const curStackLen = this.getStackLength();\n\n        this.maskStack = maskStack;\n\n        const newStackLen = this.getStackLength();\n\n        if (newStackLen !== curStackLen)\n        {\n            if (newStackLen === 0)\n            {\n                gl.disable(this.glConst);\n            }\n            else\n            {\n                gl.enable(this.glConst);\n                this._useCurrent();\n            }\n        }\n    }\n\n    /**\n     * Setup renderer to use the current mask data.\n     * @private\n     */\n    protected _useCurrent(): void\n    {\n        // OVERWRITE;\n    }\n\n    /** Destroys the mask stack. */\n    destroy(): void\n    {\n        this.renderer = null;\n        this.maskStack = null;\n    }\n}\n", "import { AbstractMaskSystem } from './AbstractMaskSystem';\n\nimport type { Renderer } from '../Renderer';\nimport type { MaskData } from './MaskData';\nimport { Matrix, Rectangle } from '@pixi/math';\nimport { settings } from '@pixi/settings';\n\nconst tempMatrix = new Matrix();\nconst rectPool: Rectangle[] = [];\n\n/**\n * System plugin to the renderer to manage scissor masking.\n *\n * Scissor masking discards pixels outside of a rectangle called the scissor box. The scissor box is in the framebuffer\n * viewport's space; however, the mask's rectangle is projected from world-space to viewport space automatically\n * by this system.\n * @memberof PIXI\n */\nexport class ScissorSystem extends AbstractMaskSystem\n{\n    /**\n     * @param {PIXI.Renderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        super(renderer);\n\n        this.glConst = settings.ADAPTER.getWebGLRenderingContext().SCISSOR_TEST;\n    }\n\n    getStackLength(): number\n    {\n        const maskData = this.maskStack[this.maskStack.length - 1];\n\n        if (maskData)\n        {\n            return maskData._scissorCounter;\n        }\n\n        return 0;\n    }\n\n    /**\n     * evaluates _boundsTransformed, _scissorRect for MaskData\n     * @param maskData\n     */\n    calcScissorRect(maskData: MaskData): void\n    {\n        if (maskData._scissorRectLocal)\n        {\n            return;\n        }\n\n        const prevData = maskData._scissorRect;\n        const { maskObject } = maskData;\n        const { renderer } = this;\n        const renderTextureSystem = renderer.renderTexture;\n        const rect = maskObject.getBounds(true, rectPool.pop() ?? new Rectangle());\n\n        this.roundFrameToPixels(rect,\n            renderTextureSystem.current ? renderTextureSystem.current.resolution : renderer.resolution,\n            renderTextureSystem.sourceFrame,\n            renderTextureSystem.destinationFrame,\n            renderer.projection.transform);\n\n        if (prevData)\n        {\n            rect.fit(prevData);\n        }\n        maskData._scissorRectLocal = rect;\n    }\n\n    private static isMatrixRotated(matrix: Matrix)\n    {\n        if (!matrix)\n        {\n            return false;\n        }\n        const { a, b, c, d } = matrix;\n\n        // Skip if skew/rotation present in matrix, except for multiple of 90° rotation. If rotation\n        // is a multiple of 90°, then either pair of (b,c) or (a,d) will be (0,0).\n        return ((Math.abs(b) > 1e-4 || Math.abs(c) > 1e-4)\n            && (Math.abs(a) > 1e-4 || Math.abs(d) > 1e-4));\n    }\n\n    /**\n     * Test, whether the object can be scissor mask with current renderer projection.\n     * Calls \"calcScissorRect()\" if its true.\n     * @param maskData - mask data\n     * @returns whether Whether the object can be scissor mask\n     */\n    public testScissor(maskData: MaskData): boolean\n    {\n        const { maskObject } = maskData;\n\n        if (!maskObject.isFastRect || !maskObject.isFastRect())\n        {\n            return false;\n        }\n        if (ScissorSystem.isMatrixRotated(maskObject.worldTransform))\n        {\n            return false;\n        }\n        if (ScissorSystem.isMatrixRotated(this.renderer.projection.transform))\n        {\n            return false;\n        }\n\n        this.calcScissorRect(maskData);\n\n        const rect = maskData._scissorRectLocal;\n\n        return rect.width > 0 && rect.height > 0;\n    }\n\n    private roundFrameToPixels(\n        frame: Rectangle,\n        resolution: number,\n        bindingSourceFrame: Rectangle,\n        bindingDestinationFrame: Rectangle,\n        transform?: Matrix,\n    )\n    {\n        if (ScissorSystem.isMatrixRotated(transform))\n        {\n            return;\n        }\n\n        transform = transform ? tempMatrix.copyFrom(transform) : tempMatrix.identity();\n\n        // Get forward transform from world space to screen space\n        transform\n            .translate(-bindingSourceFrame.x, -bindingSourceFrame.y)\n            .scale(\n                bindingDestinationFrame.width / bindingSourceFrame.width,\n                bindingDestinationFrame.height / bindingSourceFrame.height)\n            .translate(bindingDestinationFrame.x, bindingDestinationFrame.y);\n\n        // Convert frame to screen space\n        (this.renderer.filter as any).transformAABB(transform, frame);\n\n        frame.fit(bindingDestinationFrame);\n        frame.x = Math.round(frame.x * resolution);\n        frame.y = Math.round(frame.y * resolution);\n        frame.width = Math.round(frame.width * resolution);\n        frame.height = Math.round(frame.height * resolution);\n    }\n\n    /**\n     * Applies the Mask and adds it to the current stencil stack.\n     * @author alvin\n     * @param maskData - The mask data.\n     */\n    push(maskData: MaskData): void\n    {\n        if (!maskData._scissorRectLocal)\n        {\n            this.calcScissorRect(maskData);\n        }\n\n        const { gl } = this.renderer;\n\n        if (!maskData._scissorRect)\n        {\n            gl.enable(gl.SCISSOR_TEST);\n        }\n\n        maskData._scissorCounter++;\n        maskData._scissorRect = maskData._scissorRectLocal;\n        this._useCurrent();\n    }\n\n    /**\n     * This should be called after a mask is popped off the mask stack. It will rebind the scissor box to be latest with the\n     * last mask in the stack.\n     *\n     * This can also be called when you directly modify the scissor box and want to restore PixiJS state.\n     * @param maskData - The mask data.\n     */\n    pop(maskData?: MaskData): void\n    {\n        const { gl } = this.renderer;\n\n        if (maskData)\n        {\n            rectPool.push(maskData._scissorRectLocal);\n        }\n\n        if (this.getStackLength() > 0)\n        {\n            this._useCurrent();\n        }\n        else\n        {\n            gl.disable(gl.SCISSOR_TEST);\n        }\n    }\n\n    /**\n     * Setup renderer to use the current scissor data.\n     * @private\n     */\n    _useCurrent(): void\n    {\n        const rect = this.maskStack[this.maskStack.length - 1]._scissorRect;\n        let y: number;\n\n        if (this.renderer.renderTexture.current)\n        {\n            y = rect.y;\n        }\n        else\n        {\n            // flipY. In future we'll have it over renderTextures as an option\n            y = this.renderer.height - rect.height - rect.y;\n        }\n\n        this.renderer.gl.scissor(rect.x, y, rect.width, rect.height);\n    }\n}\n", "import { AbstractMaskSystem } from './AbstractMaskSystem';\n\nimport type { Renderer } from '../Renderer';\nimport type { IMaskTarget, MaskData } from './MaskData';\nimport { settings } from '@pixi/settings';\n\n/**\n * System plugin to the renderer to manage stencils (used for masks).\n * @memberof PIXI\n */\nexport class StencilSystem extends AbstractMaskSystem\n{\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        super(renderer);\n\n        this.glConst = settings.ADAPTER.getWebGLRenderingContext().STENCIL_TEST;\n    }\n\n    getStackLength(): number\n    {\n        const maskData = this.maskStack[this.maskStack.length - 1];\n\n        if (maskData)\n        {\n            return maskData._stencilCounter;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Applies the Mask and adds it to the current stencil stack.\n     * @param maskData - The mask data\n     */\n    push(maskData: MaskData): void\n    {\n        const maskObject = maskData.maskObject;\n        const { gl } = this.renderer;\n        const prevMaskCount = maskData._stencilCounter;\n\n        if (prevMaskCount === 0)\n        {\n            // force use stencil texture in current framebuffer\n            this.renderer.framebuffer.forceStencil();\n            gl.clearStencil(0);\n            gl.clear(gl.STENCIL_BUFFER_BIT);\n            gl.enable(gl.STENCIL_TEST);\n        }\n\n        maskData._stencilCounter++;\n\n        const colorMask = maskData._colorMask;\n\n        if (colorMask !== 0)\n        {\n            maskData._colorMask = 0;\n            gl.colorMask(false, false, false, false);\n        }\n\n        // Increment the reference stencil value where the new mask overlaps with the old ones.\n        gl.stencilFunc(gl.EQUAL, prevMaskCount, 0xFFFFFFFF);\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.INCR);\n\n        maskObject.renderable = true;\n        maskObject.render(this.renderer);\n        this.renderer.batch.flush();\n        maskObject.renderable = false;\n\n        if (colorMask !== 0)\n        {\n            maskData._colorMask = colorMask;\n            gl.colorMask(\n                (colorMask & 1) !== 0,\n                (colorMask & 2) !== 0,\n                (colorMask & 4) !== 0,\n                (colorMask & 8) !== 0\n            );\n        }\n\n        this._useCurrent();\n    }\n\n    /**\n     * Pops stencil mask. MaskData is already removed from stack\n     * @param {PIXI.DisplayObject} maskObject - object of popped mask data\n     */\n    pop(maskObject: IMaskTarget): void\n    {\n        const gl = this.renderer.gl;\n\n        if (this.getStackLength() === 0)\n        {\n            // the stack is empty!\n            gl.disable(gl.STENCIL_TEST);\n        }\n        else\n        {\n            const maskData = this.maskStack.length !== 0 ? this.maskStack[this.maskStack.length - 1] : null;\n            const colorMask = maskData ? maskData._colorMask : 0xf;\n\n            if (colorMask !== 0)\n            {\n                maskData._colorMask = 0;\n                gl.colorMask(false, false, false, false);\n            }\n\n            // Decrement the reference stencil value where the popped mask overlaps with the other ones\n            gl.stencilOp(gl.KEEP, gl.KEEP, gl.DECR);\n\n            maskObject.renderable = true;\n            maskObject.render(this.renderer);\n            this.renderer.batch.flush();\n            maskObject.renderable = false;\n\n            if (colorMask !== 0)\n            {\n                maskData._colorMask = colorMask;\n                gl.colorMask(\n                    (colorMask & 0x1) !== 0,\n                    (colorMask & 0x2) !== 0,\n                    (colorMask & 0x4) !== 0,\n                    (colorMask & 0x8) !== 0\n                );\n            }\n\n            this._useCurrent();\n        }\n    }\n\n    /**\n     * Setup renderer to use the current stencil data.\n     * @private\n     */\n    _useCurrent(): void\n    {\n        const gl = this.renderer.gl;\n\n        gl.stencilFunc(gl.EQUAL, this.getStackLength(), 0xFFFFFFFF);\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n    }\n}\n", "import { Matrix } from '@pixi/math';\n\nimport type { ISystem } from '../ISystem';\nimport type { Rectangle } from '@pixi/math';\nimport type { Renderer } from '../Renderer';\n\n/**\n * System plugin to the renderer to manage the projection matrix.\n *\n * The `projectionMatrix` is a global uniform provided to all shaders. It is used to transform points in world space to\n * normalized device coordinates.\n * @memberof PIXI\n */\nexport class ProjectionSystem implements ISystem\n{\n    /**\n     * The destination frame used to calculate the current projection matrix.\n     *\n     * The destination frame is the rectangle in the render-target into which contents are rendered. If rendering\n     * to the screen, the origin is on the top-left. If rendering to a framebuffer, the origin is on the\n     * bottom-left. This \"flipping\" phenomenon is because of WebGL convention for (shader) texture coordinates, where\n     * the bottom-left corner is (0,0). It allows display-objects to map their (0,0) position in local-space (top-left)\n     * to (0,0) in texture space (bottom-left). In other words, a sprite's top-left corner actually renders the\n     * texture's bottom-left corner. You will also notice this when using a tool like SpectorJS to view your textures\n     * at runtime.\n     *\n     * The destination frame's dimensions (width,height) should be equal to the source frame. This is because,\n     * otherwise, the contents will be scaled to fill the destination frame. Similarly, the destination frame's (x,y)\n     * coordinates are (0,0) unless you know what you're doing.\n     * @readonly\n     */\n    public destinationFrame: Rectangle;\n\n    /**\n     * The source frame used to calculate the current projection matrix.\n     *\n     * The source frame is the rectangle in world space containing the contents to be rendered.\n     * @readonly\n     */\n    public sourceFrame: Rectangle;\n\n    /**\n     * Default destination frame\n     *\n     * This is not used internally. It is not advised to use this feature specifically unless you know what\n     * you're doing. The `update` method will default to this frame if you do not pass the destination frame.\n     * @readonly\n     */\n    public defaultFrame: Rectangle;\n\n    /**\n     * Projection matrix\n     *\n     * This matrix can be used to transform points from world space to normalized device coordinates, and is calculated\n     * from the sourceFrame → destinationFrame mapping provided.\n     *\n     * The renderer's `globalUniforms` keeps a reference to this, and so it is available for all shaders to use as a\n     * uniform.\n     * @readonly\n     */\n    public projectionMatrix: Matrix;\n\n    /**\n     * A transform to be appended to the projection matrix.\n     *\n     * This can be used to transform points in world-space one last time before they are outputted by the shader. You can\n     * use to rotate the whole scene, for example. Remember to clear it once you've rendered everything.\n     * @member {PIXI.Matrix}\n     */\n    public transform: Matrix;\n\n    private renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        this.destinationFrame = null;\n        this.sourceFrame = null;\n        this.defaultFrame = null;\n        this.projectionMatrix = new Matrix();\n        this.transform = null;\n    }\n\n    /**\n     * Updates the projection-matrix based on the sourceFrame → destinationFrame mapping provided.\n     *\n     * NOTE: It is expected you call `renderer.framebuffer.setViewport(destinationFrame)` after this. This is because\n     * the framebuffer viewport converts shader vertex output in normalized device coordinates to window coordinates.\n     *\n     * NOTE-2: {@link RenderTextureSystem#bind} updates the projection-matrix when you bind a render-texture. It is expected\n     * that you dirty the current bindings when calling this manually.\n     * @param destinationFrame - The rectangle in the render-target to render the contents into. If rendering to the canvas,\n     *  the origin is on the top-left; if rendering to a render-texture, the origin is on the bottom-left.\n     * @param sourceFrame - The rectangle in world space that contains the contents being rendered.\n     * @param resolution - The resolution of the render-target, which is the ratio of\n     *  world-space (or CSS) pixels to physical pixels.\n     * @param root - Whether the render-target is the screen. This is required because rendering to textures\n     *  is y-flipped (i.e. upside down relative to the screen).\n     */\n    update(destinationFrame: Rectangle, sourceFrame: Rectangle, resolution: number, root: boolean): void\n    {\n        this.destinationFrame = destinationFrame || this.destinationFrame || this.defaultFrame;\n        this.sourceFrame = sourceFrame || this.sourceFrame || destinationFrame;\n\n        // Calculate object-space to clip-space projection\n        this.calculateProjection(this.destinationFrame, this.sourceFrame, resolution, root);\n\n        if (this.transform)\n        {\n            this.projectionMatrix.append(this.transform);\n        }\n\n        const renderer =  this.renderer;\n\n        renderer.globalUniforms.uniforms.projectionMatrix = this.projectionMatrix;\n        renderer.globalUniforms.update();\n\n        // this will work for now\n        // but would be sweet to stick and even on the global uniforms..\n        if (renderer.shader.shader)\n        {\n            renderer.shader.syncUniformGroup(renderer.shader.shader.uniforms.globals);\n        }\n    }\n\n    /**\n     * Calculates the `projectionMatrix` to map points inside `sourceFrame` to inside `destinationFrame`.\n     * @param _destinationFrame - The destination frame in the render-target.\n     * @param sourceFrame - The source frame in world space.\n     * @param _resolution - The render-target's resolution, i.e. ratio of CSS to physical pixels.\n     * @param root - Whether rendering into the screen. Otherwise, if rendering to a framebuffer, the projection\n     *  is y-flipped.\n     */\n    calculateProjection(_destinationFrame: Rectangle, sourceFrame: Rectangle, _resolution: number, root: boolean): void\n    {\n        const pm = this.projectionMatrix;\n        const sign = !root ? 1 : -1;\n\n        pm.identity();\n\n        pm.a = (1 / sourceFrame.width * 2);\n        pm.d = sign * (1 / sourceFrame.height * 2);\n\n        pm.tx = -1 - (sourceFrame.x * pm.a);\n        pm.ty = -sign - (sourceFrame.y * pm.d);\n    }\n\n    /**\n     * Sets the transform of the active render target to the given matrix.\n     * @param _matrix - The transformation matrix\n     */\n    setTransform(_matrix: Matrix): void\n    {\n        // this._activeRenderTarget.transform = matrix;\n    }\n\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n", "import { Rectangle } from '@pixi/math';\nimport type { BUFFER_BITS } from '@pixi/constants';\n\nimport type { ISystem } from '../ISystem';\nimport type { Renderer } from '../Renderer';\nimport type { RenderTexture } from './RenderTexture';\nimport type { BaseRenderTexture } from './BaseRenderTexture';\nimport type { MaskData } from '../mask/MaskData';\nimport type { ISize } from '@pixi/math';\n\n// Temporary rectangle for assigned sourceFrame or destinationFrame\nconst tempRect = new Rectangle();\n\n// Temporary rectangle for renderTexture destinationFrame\nconst tempRect2 = new Rectangle();\n\n/* eslint-disable max-len */\n/**\n * System plugin to the renderer to manage render textures.\n *\n * Should be added after FramebufferSystem\n *\n * ### Frames\n *\n * The `RenderTextureSystem` holds a sourceFrame → destinationFrame projection. The following table explains the different\n * coordinate spaces used:\n *\n * | Frame                  | Description                                                      | Coordinate System                                       |\n * | ---------------------- | ---------------------------------------------------------------- | ------------------------------------------------------- |\n * | sourceFrame            | The rectangle inside of which display-objects are being rendered | **World Space**: The origin on the top-left             |\n * | destinationFrame       | The rectangle in the render-target (canvas or texture) into which contents should be rendered | If rendering to the canvas, this is in screen space and the origin is on the top-left. If rendering to a render-texture, this is in its base-texture's space with the origin on the bottom-left.  |\n * | viewportFrame          | The framebuffer viewport corresponding to the destination-frame  | **Window Coordinates**: The origin is always on the bottom-left. |\n * @memberof PIXI\n */\nexport class RenderTextureSystem implements ISystem\n{\n/* eslint-enable max-len */\n\n    /** The clear background color as RGBA. */\n    public clearColor: number[];\n\n    /**\n     * List of masks for the {@link PIXI.StencilSystem}.\n     * @readonly\n     */\n    public defaultMaskStack: Array<MaskData>;\n\n    /**\n     * Render texture currently bound. {@code null} if rendering to the canvas.\n     * @readonly\n     */\n    public current: RenderTexture | null;\n\n    /**\n     * The source frame for the render-target's projection mapping.\n     *\n     * See {@link PIXI.ProjectionSystem#sourceFrame} for more details\n     */\n    public readonly sourceFrame: Rectangle;\n\n    /**\n     * The destination frame for the render-target's projection mapping.\n     *\n     * See {@link PIXI.Projection#destinationFrame} for more details.\n     */\n    public readonly destinationFrame: Rectangle;\n\n    /**\n     * The viewport frame for the render-target's viewport binding. This is equal to the destination-frame\n     * for render-textures, while it is y-flipped when rendering to the screen (i.e. its origin is always on\n     * the bottom-left).\n     */\n    public readonly viewportFrame: Rectangle;\n\n    private renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        this.clearColor = renderer._backgroundColorRgba;\n        this.defaultMaskStack = [];\n        this.current = null;\n        this.sourceFrame = new Rectangle();\n        this.destinationFrame = new Rectangle();\n        this.viewportFrame = new Rectangle();\n    }\n\n    /**\n     * Bind the current render texture.\n     * @param renderTexture - RenderTexture to bind, by default its `null` - the screen.\n     * @param sourceFrame - Part of world that is mapped to the renderTexture.\n     * @param destinationFrame - Part of renderTexture, by default it has the same size as sourceFrame.\n     */\n    bind(renderTexture: RenderTexture = null, sourceFrame?: Rectangle, destinationFrame?: Rectangle): void\n    {\n        const renderer = this.renderer;\n\n        this.current = renderTexture;\n\n        let baseTexture: BaseRenderTexture;\n        let framebuffer;\n        let resolution;\n\n        if (renderTexture)\n        {\n            baseTexture = renderTexture.baseTexture as BaseRenderTexture;\n\n            resolution = baseTexture.resolution;\n\n            if (!sourceFrame)\n            {\n                tempRect.width = renderTexture.frame.width;\n                tempRect.height = renderTexture.frame.height;\n\n                sourceFrame = tempRect;\n            }\n\n            if (!destinationFrame)\n            {\n                tempRect2.x = renderTexture.frame.x;\n                tempRect2.y = renderTexture.frame.y;\n                tempRect2.width = sourceFrame.width;\n                tempRect2.height = sourceFrame.height;\n\n                destinationFrame = tempRect2;\n            }\n\n            framebuffer = baseTexture.framebuffer;\n        }\n        else\n        {\n            resolution = renderer.resolution;\n\n            if (!sourceFrame)\n            {\n                tempRect.width = renderer.screen.width;\n                tempRect.height = renderer.screen.height;\n\n                sourceFrame = tempRect;\n            }\n\n            if (!destinationFrame)\n            {\n                destinationFrame = tempRect;\n\n                destinationFrame.width = sourceFrame.width;\n                destinationFrame.height = sourceFrame.height;\n            }\n        }\n\n        const viewportFrame = this.viewportFrame;\n\n        viewportFrame.x = destinationFrame.x * resolution;\n        viewportFrame.y = destinationFrame.y * resolution;\n        viewportFrame.width = destinationFrame.width * resolution;\n        viewportFrame.height = destinationFrame.height * resolution;\n\n        if (!renderTexture)\n        {\n            viewportFrame.y = renderer.view.height - (viewportFrame.y + viewportFrame.height);\n        }\n\n        viewportFrame.ceil();\n\n        this.renderer.framebuffer.bind(framebuffer, viewportFrame);\n        this.renderer.projection.update(destinationFrame, sourceFrame, resolution, !framebuffer);\n\n        if (renderTexture)\n        {\n            this.renderer.mask.setMaskStack(baseTexture.maskStack);\n        }\n        else\n        {\n            this.renderer.mask.setMaskStack(this.defaultMaskStack);\n        }\n\n        this.sourceFrame.copyFrom(sourceFrame);\n        this.destinationFrame.copyFrom(destinationFrame);\n    }\n\n    /**\n     * Erases the render texture and fills the drawing area with a colour.\n     * @param clearColor - The color as rgba, default to use the renderer backgroundColor\n     * @param [mask=BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH] - Bitwise OR of masks\n     *  that indicate the buffers to be cleared, by default COLOR and DEPTH buffers.\n     */\n    clear(clearColor?: number[], mask?: BUFFER_BITS): void\n    {\n        if (this.current)\n        {\n            clearColor = clearColor || (this.current.baseTexture as BaseRenderTexture).clearColor;\n        }\n        else\n        {\n            clearColor = clearColor || this.clearColor;\n        }\n\n        const destinationFrame = this.destinationFrame;\n        const baseFrame: ISize = this.current ? this.current.baseTexture : this.renderer.screen;\n        const clearMask = destinationFrame.width !== baseFrame.width || destinationFrame.height !== baseFrame.height;\n\n        if (clearMask)\n        {\n            let { x, y, width, height } = this.viewportFrame;\n\n            x = Math.round(x);\n            y = Math.round(y);\n            width = Math.round(width);\n            height = Math.round(height);\n\n            // TODO: ScissorSystem should cache whether the scissor test is enabled or not.\n            this.renderer.gl.enable(this.renderer.gl.SCISSOR_TEST);\n            this.renderer.gl.scissor(x, y, width, height);\n        }\n\n        this.renderer.framebuffer.clear(clearColor[0], clearColor[1], clearColor[2], clearColor[3], mask);\n\n        if (clearMask)\n        {\n            // Restore the scissor box\n            this.renderer.scissor.pop();\n        }\n    }\n\n    resize(): void // screenWidth, screenHeight)\n    {\n        // resize the root only!\n        this.bind(null);\n    }\n\n    /** Resets render-texture state. */\n    reset(): void\n    {\n        this.bind(null);\n    }\n\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n", "import type { Dict } from '@pixi/utils';\nimport { mapSize } from '../utils';\nimport type { IUniformData } from '../Program';\nimport type { UniformGroup } from '../UniformGroup';\nimport { uniformParsers } from './uniformParsers';\nimport type { Renderer } from '../../Renderer';\nimport type { Buffer } from '../../geometry/Buffer';\n\nexport type UniformsSyncCallback = (...args: any[]) => void;\n\nfunction uboUpdate(_ud: any, _uv: any, _renderer: Renderer, _syncData: any, buffer: Buffer): void\n{\n    _renderer.buffer.update(buffer);\n}\n\n// cv = CachedValue\n// v = value\n// ud = uniformData\n// uv = uniformValue\n// l = location\nconst UBO_TO_SINGLE_SETTERS: Dict<string> = {\n    float: `\n        data[offset] = v;\n    `,\n    vec2: `\n        data[offset] = v[0];\n        data[offset+1] = v[1];\n    `,\n    vec3: `\n        data[offset] = v[0];\n        data[offset+1] = v[1];\n        data[offset+2] = v[2];\n\n    `,\n    vec4: `\n        data[offset] = v[0];\n        data[offset+1] = v[1];\n        data[offset+2] = v[2];\n        data[offset+3] = v[3];\n    `,\n    mat2: `\n        data[offset] = v[0];\n        data[offset+1] = v[1];\n\n        data[offset+4] = v[2];\n        data[offset+5] = v[3];\n    `,\n    mat3: `\n        data[offset] = v[0];\n        data[offset+1] = v[1];\n        data[offset+2] = v[2];\n\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];\n    `,\n    mat4: `\n        for(var i = 0; i < 16; i++)\n        {\n            data[offset + i] = v[i];\n        }\n    `\n};\n\nconst GLSL_TO_STD40_SIZE: Dict<number> = {\n    float:  4,\n    vec2:   8,\n    vec3:   12,\n    vec4:   16,\n\n    int:      4,\n    ivec2:    8,\n    ivec3:    12,\n    ivec4:    16,\n\n    uint:     4,\n    uvec2:    8,\n    uvec3:    12,\n    uvec4:    16,\n\n    bool:     4,\n    bvec2:    8,\n    bvec3:    12,\n    bvec4:    16,\n\n    mat2:     16 * 2,\n    mat3:     16 * 3,\n    mat4:     16 * 4,\n};\n\ninterface UBOElement\n{\n    data: IUniformData\n    offset: number,\n    dataLen: number,\n    dirty: number\n}\n\n/**\n * logic originally from here: https://github.com/sketchpunk/FunWithWebGL2/blob/master/lesson_022/Shaders.js\n * rewrote it, but this was a great starting point to get a solid understanding of whats going on :)\n * @ignore\n * @param uniformData\n */\nexport function createUBOElements(uniformData: IUniformData[]): {uboElements: UBOElement[], size: number}\n{\n    const uboElements: UBOElement[] = uniformData.map((data: IUniformData) =>\n        ({\n            data,\n            offset: 0,\n            dataLen: 0,\n            dirty: 0\n        }));\n\n    let size = 0;\n    let chunkSize = 0;\n    let offset = 0;\n\n    for (let i = 0; i < uboElements.length; i++)\n    {\n        const uboElement = uboElements[i];\n\n        size = GLSL_TO_STD40_SIZE[uboElement.data.type];\n\n        if (uboElement.data.size > 1)\n        {\n            size = Math.max(size, 16) * uboElement.data.size;\n        }\n\n        uboElement.dataLen = size;\n\n        // add some size offset..\n        // must align to the nearest 16 bytes or internally nearest round size\n\n        if (chunkSize % size !== 0 && chunkSize < 16)\n        {\n            // diff required to line up..\n            const lineUpValue = (chunkSize % size) % 16;\n\n            chunkSize += lineUpValue;\n            offset += lineUpValue;\n        }\n\n        if ((chunkSize + size) > 16)\n        {\n            offset = Math.ceil(offset / 16) * 16;\n            uboElement.offset = offset;\n            offset += size;\n            chunkSize = size;\n        }\n        else\n        {\n            uboElement.offset = offset;\n            chunkSize += size;\n            offset += size;\n        }\n    }\n\n    offset = Math.ceil(offset / 16) * 16;\n\n    return { uboElements, size: offset };\n}\n\nexport function getUBOData(uniforms: Dict<any>, uniformData: Dict<any>): any[]\n{\n    const usedUniformDatas = [];\n\n    // build..\n    for (const i in uniforms)\n    {\n        if (uniformData[i])\n        {\n            usedUniformDatas.push(uniformData[i]);\n        }\n    }\n\n    // sort them out by index!\n    usedUniformDatas.sort((a, b) => a.index - b.index);\n\n    return usedUniformDatas;\n}\n\nexport function generateUniformBufferSync(\n    group: UniformGroup,\n    uniformData: Dict<any>\n): {size: number, syncFunc: UniformsSyncCallback}\n{\n    if (!group.autoManage)\n    {\n        // if the group is nott automatically managed, we don't need to generate a special function for it...\n        return { size: 0, syncFunc: uboUpdate };\n    }\n\n    const usedUniformDatas = getUBOData(group.uniforms, uniformData);\n\n    const { uboElements, size } = createUBOElements(usedUniformDatas);\n\n    const funcFragments = [`\n    var v = null;\n    var v2 = null;\n    var cv = null;\n    var t = 0;\n    var gl = renderer.gl\n    var index = 0;\n    var data = buffer.data;\n    `];\n\n    for (let i = 0; i < uboElements.length; i++)\n    {\n        const uboElement = uboElements[i];\n        const uniform = group.uniforms[uboElement.data.name];\n\n        const name = uboElement.data.name;\n\n        let parsed = false;\n\n        for (let j = 0; j < uniformParsers.length; j++)\n        {\n            const uniformParser = uniformParsers[j];\n\n            if (uniformParser.codeUbo && uniformParser.test(uboElement.data, uniform))\n            {\n                funcFragments.push(\n                    `offset = ${uboElement.offset / 4};`,\n                    uniformParsers[j].codeUbo(uboElement.data.name, uniform));\n                parsed = true;\n\n                break;\n            }\n        }\n\n        if (!parsed)\n        {\n            if (uboElement.data.size > 1)\n            {\n                const size =  mapSize(uboElement.data.type);\n                const rowSize = Math.max(GLSL_TO_STD40_SIZE[uboElement.data.type] / 16, 1);\n                const elementSize = size / rowSize;\n                const remainder = (4 - (elementSize % 4)) % 4;\n\n                funcFragments.push(`\n                cv = ud.${name}.value;\n                v = uv.${name};\n                offset = ${uboElement.offset / 4};\n\n                t = 0;\n\n                for(var i=0; i < ${uboElement.data.size * rowSize}; i++)\n                {\n                    for(var j = 0; j < ${elementSize}; j++)\n                    {\n                        data[offset++] = v[t++];\n                    }\n                    offset += ${remainder};\n                }\n\n                `);\n            }\n            else\n            {\n                const template = UBO_TO_SINGLE_SETTERS[uboElement.data.type];\n\n                funcFragments.push(`\n                cv = ud.${name}.value;\n                v = uv.${name};\n                offset = ${uboElement.offset / 4};\n                ${template};\n                `);\n            }\n        }\n    }\n\n    funcFragments.push(`\n       renderer.buffer.update(buffer);\n    `);\n\n    return {\n        size,\n        // eslint-disable-next-line no-new-func\n        syncFunc: new Function(\n            'ud',\n            'uv',\n            'renderer',\n            'syncData',\n            'buffer',\n            funcFragments.join('\\n')\n        ) as UniformsSyncCallback\n    };\n}\n", "import type { Dict } from '@pixi/utils';\n\n/**\n * @private\n */\nexport class IGLUniformData\n{\n    location: WebGLUniformLocation;\n    value: number | boolean | Float32Array | Int32Array | Uint32Array | boolean[];\n}\n\n/**\n * Helper class to create a WebGL Program\n * @memberof PIXI\n */\nexport class GLProgram\n{\n    /** The shader program. */\n    public program: WebGLProgram;\n\n    /**\n     * Holds the uniform data which contains uniform locations\n     * and current uniform values used for caching and preventing unneeded GPU commands.\n     */\n    public uniformData: Dict<any>;\n\n    /**\n     * UniformGroups holds the various upload functions for the shader. Each uniform group\n     * and program have a unique upload function generated.\n     */\n    public uniformGroups: Dict<any>;\n\n    /** A hash that stores where UBOs are bound to on the program. */\n    public uniformBufferBindings: Dict<any>;\n\n    /** A hash for lazily-generated uniform uploading functions. */\n    public uniformSync: Dict<any>;\n\n    /**\n     * A place where dirty ticks are stored for groups\n     * If a tick here does not match with the Higher level Programs tick, it means\n     * we should re upload the data.\n     */\n    public uniformDirtyGroups: Dict<any>;\n\n    /**\n     * Makes a new Pixi program.\n     * @param program - webgl program\n     * @param uniformData - uniforms\n     */\n    constructor(program: WebGLProgram, uniformData: {[key: string]: IGLUniformData})\n    {\n        this.program = program;\n        this.uniformData = uniformData;\n        this.uniformGroups = {};\n        this.uniformDirtyGroups = {};\n        this.uniformBufferBindings = {};\n    }\n\n    /** Destroys this program. */\n    destroy(): void\n    {\n        this.uniformData = null;\n        this.uniformGroups = null;\n        this.uniformDirtyGroups = null;\n        this.uniformBufferBindings = null;\n        this.program = null;\n    }\n}\n", "import type { IAttributeData } from '../Program';\nimport { mapSize } from './mapSize';\nimport { mapType } from './mapType';\n\n/**\n * returns the attribute data from the program\n * @private\n * @param {WebGLProgram} [program] - the WebGL program\n * @param {WebGLRenderingContext} [gl] - the WebGL context\n * @returns {object} the attribute data for this program\n */\nexport function getAttributeData(program: WebGLProgram, gl: WebGLRenderingContextBase): {[key: string]: IAttributeData}\n{\n    const attributes: {[key: string]: IAttributeData} = {};\n\n    const totalAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n    for (let i = 0; i < totalAttributes; i++)\n    {\n        const attribData = gl.getActiveAttrib(program, i);\n\n        if (attribData.name.indexOf('gl_') === 0)\n        {\n            continue;\n        }\n\n        const type = mapType(gl, attribData.type);\n        const data = {\n            type,\n            name: attribData.name,\n            size: mapSize(type),\n            location: gl.getAttribLocation(program, attribData.name),\n        };\n\n        attributes[attribData.name] = data;\n    }\n\n    return attributes;\n}\n", "import type { IUniformData } from '../Program';\nimport { defaultValue } from './defaultValue';\nimport { mapType } from './mapType';\n\n/**\n * returns the uniform data from the program\n * @private\n * @param program - the webgl program\n * @param gl - the WebGL context\n * @returns {object} the uniform data for this program\n */\nexport function getUniformData(program: WebGLProgram, gl: WebGLRenderingContextBase): {[key: string]: IUniformData}\n{\n    const uniforms: {[key: string]: IUniformData} = {};\n\n    const totalUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n    for (let i = 0; i < totalUniforms; i++)\n    {\n        const uniformData = gl.getActiveUniform(program, i);\n        const name = uniformData.name.replace(/\\[.*?\\]$/, '');\n\n        const isArray = !!(uniformData.name.match(/\\[.*?\\]$/));\n\n        const type = mapType(gl, uniformData.type);\n\n        uniforms[name] = {\n            name,\n            index: i,\n            type,\n            size: uniformData.size,\n            isArray,\n            value: defaultValue(type, uniformData.size),\n        };\n    }\n\n    return uniforms;\n}\n", "import type { Program } from '../Program';\nimport type { IRenderingContext } from '../../IRenderingContext';\nimport type { IGLUniformData } from '../GLProgram';\nimport { GLProgram } from '../GLProgram';\nimport { compileShader } from './compileShader';\nimport { defaultValue } from './defaultValue';\nimport { getAttributeData } from './getAttributeData';\nimport { getUniformData } from './getUniformData';\nimport { logProgramError } from './logProgramError';\n\n/**\n * generates a WebGL Program object from a high level Pixi Program.\n * @param gl - a rendering context on which to generate the program\n * @param program - the high level Pixi Program.\n */\nexport function generateProgram(gl: IRenderingContext, program: Program): GLProgram\n{\n    const glVertShader = compileShader(gl, gl.VERTEX_SHADER, program.vertexSrc);\n    const glFragShader = compileShader(gl, gl.FRAGMENT_SHADER, program.fragmentSrc);\n\n    const webGLProgram = gl.createProgram();\n\n    gl.attachShader(webGLProgram, glVertShader);\n    gl.attachShader(webGLProgram, glFragShader);\n\n    gl.linkProgram(webGLProgram);\n\n    if (!gl.getProgramParameter(webGLProgram, gl.LINK_STATUS))\n    {\n        logProgramError(gl, webGLProgram, glVertShader, glFragShader);\n    }\n\n    program.attributeData = getAttributeData(webGLProgram, gl);\n    program.uniformData = getUniformData(webGLProgram, gl);\n\n    // GLSL 1.00: bind attributes sorted by name in ascending order\n    // GLSL 3.00: don't change the attribute locations that where chosen by the compiler\n    //            or assigned by the layout specifier in the shader source code\n    if (!(/^[ \\t]*#[ \\t]*version[ \\t]+300[ \\t]+es[ \\t]*$/m).test(program.vertexSrc))\n    {\n        const keys = Object.keys(program.attributeData);\n\n        keys.sort((a, b) => (a > b) ? 1 : -1); // eslint-disable-line no-confusing-arrow\n\n        for (let i = 0; i < keys.length; i++)\n        {\n            program.attributeData[keys[i]].location = i;\n\n            gl.bindAttribLocation(webGLProgram, i, keys[i]);\n        }\n\n        gl.linkProgram(webGLProgram);\n    }\n\n    gl.deleteShader(glVertShader);\n    gl.deleteShader(glFragShader);\n\n    const uniformData: {[key: string]: IGLUniformData} = {};\n\n    for (const i in program.uniformData)\n    {\n        const data = program.uniformData[i];\n\n        uniformData[i] = {\n            location: gl.getUniformLocation(webGLProgram, i),\n            value: defaultValue(data.type, data.size),\n        };\n    }\n\n    const glProgram = new GLProgram(webGLProgram, uniformData);\n\n    return glProgram;\n}\n", "import type { GLProgram } from './GLProgram';\nimport { generateUniformsSync, unsafeEvalSupported } from './utils';\n\nimport type { ISystem } from '../ISystem';\nimport type { Renderer } from '../Renderer';\nimport type { IRenderingContext } from '../IRenderingContext';\nimport type { Shader } from './Shader';\nimport type { Program } from './Program';\nimport type { UniformGroup } from './UniformGroup';\nimport type { Dict } from '@pixi/utils';\nimport type { UniformsSyncCallback } from './utils';\nimport { generateUniformBufferSync } from './utils/generateUniformBufferSync';\n\nimport { generateProgram } from './utils/generateProgram';\n\nlet UID = 0;\n// default sync data so we don't create a new one each time!\nconst defaultSyncData = { textureCount: 0, uboCount: 0 };\n\n/**\n * System plugin to the renderer to manage shaders.\n * @memberof PIXI\n */\nexport class ShaderSystem implements ISystem\n{\n    /**\n     * The current WebGL rendering context.\n     * @member {WebGLRenderingContext}\n     */\n    protected gl: IRenderingContext;\n\n    public shader: Shader;\n    public program: Program;\n    public id: number;\n    public destroyed = false;\n\n    /** Cache to holds the generated functions. Stored against UniformObjects unique signature. */\n    private cache: Dict<UniformsSyncCallback>;\n    private _uboCache: Dict<{size: number, syncFunc: UniformsSyncCallback}>;\n    private renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        // Validation check that this environment support `new Function`\n        this.systemCheck();\n\n        this.gl = null;\n\n        this.shader = null;\n        this.program = null;\n\n        this.cache = {};\n        this._uboCache = {};\n\n        this.id = UID++;\n    }\n\n    /**\n     * Overrideable function by `@pixi/unsafe-eval` to silence\n     * throwing an error if platform doesn't support unsafe-evals.\n     * @private\n     */\n    systemCheck(): void\n    {\n        if (!unsafeEvalSupported())\n        {\n            throw new Error('Current environment does not allow unsafe-eval, '\n                + 'please use @pixi/unsafe-eval module to enable support.');\n        }\n    }\n\n    protected contextChange(gl: IRenderingContext): void\n    {\n        this.gl = gl;\n        this.reset();\n    }\n\n    /**\n     * Changes the current shader to the one given in parameter.\n     * @param shader - the new shader\n     * @param dontSync - false if the shader should automatically sync its uniforms.\n     * @returns the glProgram that belongs to the shader.\n     */\n    bind(shader: Shader, dontSync?: boolean): GLProgram\n    {\n        shader.disposeRunner.add(this);\n\n        shader.uniforms.globals = this.renderer.globalUniforms;\n\n        const program = shader.program;\n        const glProgram = program.glPrograms[this.renderer.CONTEXT_UID] || this.generateProgram(shader);\n\n        this.shader = shader;\n\n        // TODO - some current Pixi plugins bypass this.. so it not safe to use yet..\n        if (this.program !== program)\n        {\n            this.program = program;\n            this.gl.useProgram(glProgram.program);\n        }\n\n        if (!dontSync)\n        {\n            defaultSyncData.textureCount = 0;\n            defaultSyncData.uboCount = 0;\n\n            this.syncUniformGroup(shader.uniformGroup, defaultSyncData);\n        }\n\n        return glProgram;\n    }\n\n    /**\n     * Uploads the uniforms values to the currently bound shader.\n     * @param uniforms - the uniforms values that be applied to the current shader\n     */\n    setUniforms(uniforms: Dict<any>): void\n    {\n        const shader = this.shader.program;\n        const glProgram = shader.glPrograms[this.renderer.CONTEXT_UID];\n\n        shader.syncUniforms(glProgram.uniformData, uniforms, this.renderer);\n    }\n\n    /* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n    /**\n     * Syncs uniforms on the group\n     * @param group - the uniform group to sync\n     * @param syncData - this is data that is passed to the sync function and any nested sync functions\n     */\n    syncUniformGroup(group: UniformGroup, syncData?: any): void\n    {\n        const glProgram = this.getGlProgram();\n\n        if (!group.static || group.dirtyId !== glProgram.uniformDirtyGroups[group.id])\n        {\n            glProgram.uniformDirtyGroups[group.id] = group.dirtyId;\n\n            this.syncUniforms(group, glProgram, syncData);\n        }\n    }\n\n    /**\n     * Overrideable by the @pixi/unsafe-eval package to use static syncUniforms instead.\n     * @param group\n     * @param glProgram\n     * @param syncData\n     */\n    syncUniforms(group: UniformGroup, glProgram: GLProgram, syncData: any): void\n    {\n        const syncFunc = group.syncUniforms[this.shader.program.id] || this.createSyncGroups(group);\n\n        syncFunc(glProgram.uniformData, group.uniforms, this.renderer, syncData);\n    }\n\n    createSyncGroups(group: UniformGroup): UniformsSyncCallback\n    {\n        const id = this.getSignature(group, this.shader.program.uniformData, 'u');\n\n        if (!this.cache[id])\n        {\n            this.cache[id] = generateUniformsSync(group, this.shader.program.uniformData);\n        }\n\n        group.syncUniforms[this.shader.program.id] = this.cache[id];\n\n        return group.syncUniforms[this.shader.program.id];\n    }\n\n    /**\n     * Syncs uniform buffers\n     * @param group - the uniform buffer group to sync\n     * @param name - the name of the uniform buffer\n     */\n    syncUniformBufferGroup(group: UniformGroup, name?: string)\n    {\n        const glProgram = this.getGlProgram();\n\n        if (!group.static || group.dirtyId !== 0 || !glProgram.uniformGroups[group.id])\n        {\n            group.dirtyId = 0;\n\n            const syncFunc = glProgram.uniformGroups[group.id]\n                || this.createSyncBufferGroup(group, glProgram, name);\n\n            // TODO wrap update in a cache??\n            group.buffer.update();\n\n            syncFunc(glProgram.uniformData,\n                group.uniforms,\n                this.renderer,\n                defaultSyncData,\n                group.buffer\n            );\n        }\n\n        this.renderer.buffer.bindBufferBase(group.buffer, glProgram.uniformBufferBindings[name]);\n    }\n\n    /**\n     * Will create a function that uploads a uniform buffer using the STD140 standard.\n     * The upload function will then be cached for future calls\n     * If a group is manually managed, then a simple upload function is generated\n     * @param group - the uniform buffer group to sync\n     * @param glProgram - the gl program to attach the uniform bindings to\n     * @param name - the name of the uniform buffer (must exist on the shader)\n     */\n    protected createSyncBufferGroup(group: UniformGroup, glProgram: GLProgram, name: string): UniformsSyncCallback\n    {\n        const { gl } = this.renderer;\n\n        this.renderer.buffer.bind(group.buffer);\n\n        // bind them...\n        const uniformBlockIndex = this.gl.getUniformBlockIndex(glProgram.program, name);\n\n        glProgram.uniformBufferBindings[name] = this.shader.uniformBindCount;\n\n        gl.uniformBlockBinding(glProgram.program, uniformBlockIndex, this.shader.uniformBindCount);\n\n        this.shader.uniformBindCount++;\n\n        const id = this.getSignature(group, this.shader.program.uniformData, 'ubo');\n\n        let uboData = this._uboCache[id];\n\n        if (!uboData)\n        {\n            uboData = this._uboCache[id] = generateUniformBufferSync(group, this.shader.program.uniformData);\n        }\n\n        if (group.autoManage)\n        {\n            const data = new Float32Array(uboData.size / 4);\n\n            group.buffer.update(data);\n        }\n\n        glProgram.uniformGroups[group.id] = uboData.syncFunc;\n\n        return glProgram.uniformGroups[group.id];\n    }\n\n    /**\n     * Takes a uniform group and data and generates a unique signature for them.\n     * @param group - The uniform group to get signature of\n     * @param group.uniforms\n     * @param uniformData - Uniform information generated by the shader\n     * @param preFix\n     * @returns Unique signature of the uniform group\n     */\n    private getSignature(group: {uniforms: Dict<any>}, uniformData: Dict<any>, preFix: string): string\n    {\n        const uniforms = group.uniforms;\n\n        const strings = [`${preFix}-`];\n\n        for (const i in uniforms)\n        {\n            strings.push(i);\n\n            if (uniformData[i])\n            {\n                strings.push(uniformData[i].type);\n            }\n        }\n\n        return strings.join('-');\n    }\n\n    /**\n     * Returns the underlying GLShade rof the currently bound shader.\n     *\n     * This can be handy for when you to have a little more control over the setting of your uniforms.\n     * @returns The glProgram for the currently bound Shader for this context\n     */\n    getGlProgram(): GLProgram\n    {\n        if (this.shader)\n        {\n            return this.shader.program.glPrograms[this.renderer.CONTEXT_UID];\n        }\n\n        return null;\n    }\n\n    /**\n     * Generates a glProgram version of the Shader provided.\n     * @param shader - The shader that the glProgram will be based on.\n     * @returns A shiny new glProgram!\n     */\n    generateProgram(shader: Shader): GLProgram\n    {\n        const gl = this.gl;\n        const program = shader.program;\n\n        const glProgram = generateProgram(gl, program);\n\n        program.glPrograms[this.renderer.CONTEXT_UID] = glProgram;\n\n        return glProgram;\n    }\n\n    /** Resets ShaderSystem state, does not affect WebGL state. */\n    reset(): void\n    {\n        this.program = null;\n        this.shader = null;\n    }\n\n    /**\n     * Disposes shader.\n     * If disposing one equals with current shader, set current as null.\n     * @param shader - Shader object\n     */\n    disposeShader(shader: Shader): void\n    {\n        if (this.shader === shader)\n        {\n            this.shader = null;\n        }\n    }\n\n    /** Destroys this System and removes all its textures. */\n    destroy(): void\n    {\n        this.renderer = null;\n        // TODO implement destroy method for ShaderSystem\n        this.destroyed = true;\n    }\n}\n", "import { BLEND_MODES } from '@pixi/constants';\n\n/**\n * Maps gl blend combinations to WebGL.\n * @memberof PIXI\n * @function mapWebGLBlendModesToPixi\n * @private\n * @param {WebGLRenderingContext} gl - The rendering context.\n * @param {number[][]} [array=[]] - The array to output into.\n * @returns {number[][]} Mapped modes.\n */\nexport function mapWebGLBlendModesToPixi(gl: WebGLRenderingContextBase, array: number[][] = []): number[][]\n{\n    // TODO - premultiply alpha would be different.\n    // add a boolean for that!\n    array[BLEND_MODES.NORMAL] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.ADD] = [gl.ONE, gl.ONE];\n    array[BLEND_MODES.MULTIPLY] = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.SCREEN] = [gl.ONE, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.OVERLAY] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.DARKEN] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.LIGHTEN] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.COLOR_DODGE] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.COLOR_BURN] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.HARD_LIGHT] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.SOFT_LIGHT] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.DIFFERENCE] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.EXCLUSION] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.HUE] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.SATURATION] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.COLOR] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.LUMINOSITY] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.NONE] = [0, 0];\n\n    // not-premultiplied blend modes\n    array[BLEND_MODES.NORMAL_NPM] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.ADD_NPM] = [gl.SRC_ALPHA, gl.ONE, gl.ONE, gl.ONE];\n    array[BLEND_MODES.SCREEN_NPM] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n\n    // composite operations\n    array[BLEND_MODES.SRC_IN] = [gl.DST_ALPHA, gl.ZERO];\n    array[BLEND_MODES.SRC_OUT] = [gl.ONE_MINUS_DST_ALPHA, gl.ZERO];\n    array[BLEND_MODES.SRC_ATOP] = [gl.DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.DST_OVER] = [gl.ONE_MINUS_DST_ALPHA, gl.ONE];\n    array[BLEND_MODES.DST_IN] = [gl.ZERO, gl.SRC_ALPHA];\n    array[BLEND_MODES.DST_OUT] = [gl.ZERO, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.DST_ATOP] = [gl.ONE_MINUS_DST_ALPHA, gl.SRC_ALPHA];\n    array[BLEND_MODES.XOR] = [gl.ONE_MINUS_DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA];\n\n    // SUBTRACT from flash\n    array[BLEND_MODES.SUBTRACT] = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, gl.FUNC_REVERSE_SUBTRACT, gl.FUNC_ADD];\n\n    return array;\n}\n", "import { mapWebGLBlendModesToPixi } from './utils/mapWebGLBlendModesToPixi';\nimport { State } from './State';\nimport { BLEND_MODES } from '@pixi/constants';\n\nimport type { ISystem } from '../ISystem';\nimport type { IRenderingContext } from '../IRenderingContext';\n\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\n\n/**\n * System plugin to the renderer to manage WebGL state machines.\n * @memberof PIXI\n */\nexport class StateSystem implements ISystem\n{\n    /**\n     * State ID\n     * @readonly\n     */\n    public stateId: number;\n\n    /**\n     * Polygon offset\n     * @readonly\n     */\n    public polygonOffset: number;\n\n    /**\n     * Blend mode\n     * @default PIXI.BLEND_MODES.NONE\n     * @readonly\n     */\n    public blendMode: BLEND_MODES;\n\n    /** Whether current blend equation is different */\n    protected _blendEq: boolean;\n\n    /**\n     * GL context\n     * @member {WebGLRenderingContext}\n     * @readonly\n     */\n    protected gl: IRenderingContext;\n\n    protected blendModes: number[][];\n\n    /**\n     * Collection of calls\n     * @member {Function[]}\n     */\n    protected readonly map: Array<(value: boolean) => void>;\n\n    /**\n     * Collection of check calls\n     * @member {Function[]}\n     */\n    protected readonly checks: Array<(system: this, state: State) => void>;\n\n    /**\n     * Default WebGL State\n     * @readonly\n     */\n    protected defaultState: State;\n\n    constructor()\n    {\n        this.gl = null;\n\n        this.stateId = 0;\n        this.polygonOffset = 0;\n        this.blendMode = BLEND_MODES.NONE;\n\n        this._blendEq = false;\n\n        // map functions for when we set state..\n        this.map = [];\n        this.map[BLEND] = this.setBlend;\n        this.map[OFFSET] = this.setOffset;\n        this.map[CULLING] = this.setCullFace;\n        this.map[DEPTH_TEST] = this.setDepthTest;\n        this.map[WINDING] = this.setFrontFace;\n        this.map[DEPTH_MASK] = this.setDepthMask;\n\n        this.checks = [];\n\n        this.defaultState = new State();\n        this.defaultState.blend = true;\n    }\n\n    contextChange(gl: IRenderingContext): void\n    {\n        this.gl = gl;\n\n        this.blendModes = mapWebGLBlendModesToPixi(gl);\n\n        this.set(this.defaultState);\n\n        this.reset();\n    }\n\n    /**\n     * Sets the current state\n     * @param {*} state - The state to set.\n     */\n    set(state: State): void\n    {\n        state = state || this.defaultState;\n\n        // TODO maybe to an object check? ( this.state === state )?\n        if (this.stateId !== state.data)\n        {\n            let diff = this.stateId ^ state.data;\n            let i = 0;\n\n            // order from least to most common\n            while (diff)\n            {\n                if (diff & 1)\n                {\n                    // state change!\n                    this.map[i].call(this, !!(state.data & (1 << i)));\n                }\n\n                diff = diff >> 1;\n                i++;\n            }\n\n            this.stateId = state.data;\n        }\n\n        // based on the above settings we check for specific modes..\n        // for example if blend is active we check and set the blend modes\n        // or of polygon offset is active we check the poly depth.\n        for (let i = 0; i < this.checks.length; i++)\n        {\n            this.checks[i](this, state);\n        }\n    }\n\n    /**\n     * Sets the state, when previous state is unknown.\n     * @param {*} state - The state to set\n     */\n    forceState(state: State): void\n    {\n        state = state || this.defaultState;\n        for (let i = 0; i < this.map.length; i++)\n        {\n            this.map[i].call(this, !!(state.data & (1 << i)));\n        }\n        for (let i = 0; i < this.checks.length; i++)\n        {\n            this.checks[i](this, state);\n        }\n\n        this.stateId = state.data;\n    }\n\n    /**\n     * Sets whether to enable or disable blending.\n     * @param value - Turn on or off WebGl blending.\n     */\n    setBlend(value: boolean): void\n    {\n        this.updateCheck(StateSystem.checkBlendMode, value);\n\n        this.gl[value ? 'enable' : 'disable'](this.gl.BLEND);\n    }\n\n    /**\n     * Sets whether to enable or disable polygon offset fill.\n     * @param value - Turn on or off webgl polygon offset testing.\n     */\n    setOffset(value: boolean): void\n    {\n        this.updateCheck(StateSystem.checkPolygonOffset, value);\n\n        this.gl[value ? 'enable' : 'disable'](this.gl.POLYGON_OFFSET_FILL);\n    }\n\n    /**\n     * Sets whether to enable or disable depth test.\n     * @param value - Turn on or off webgl depth testing.\n     */\n    setDepthTest(value: boolean): void\n    {\n        this.gl[value ? 'enable' : 'disable'](this.gl.DEPTH_TEST);\n    }\n\n    /**\n     * Sets whether to enable or disable depth mask.\n     * @param value - Turn on or off webgl depth mask.\n     */\n    setDepthMask(value: boolean): void\n    {\n        this.gl.depthMask(value);\n    }\n\n    /**\n     * Sets whether to enable or disable cull face.\n     * @param {boolean} value - Turn on or off webgl cull face.\n     */\n    setCullFace(value: boolean): void\n    {\n        this.gl[value ? 'enable' : 'disable'](this.gl.CULL_FACE);\n    }\n\n    /**\n     * Sets the gl front face.\n     * @param {boolean} value - true is clockwise and false is counter-clockwise\n     */\n    setFrontFace(value: boolean): void\n    {\n        this.gl.frontFace(this.gl[value ? 'CW' : 'CCW']);\n    }\n\n    /**\n     * Sets the blend mode.\n     * @param {number} value - The blend mode to set to.\n     */\n    setBlendMode(value: number): void\n    {\n        if (value === this.blendMode)\n        {\n            return;\n        }\n\n        this.blendMode = value;\n\n        const mode = this.blendModes[value];\n        const gl = this.gl;\n\n        if (mode.length === 2)\n        {\n            gl.blendFunc(mode[0], mode[1]);\n        }\n        else\n        {\n            gl.blendFuncSeparate(mode[0], mode[1], mode[2], mode[3]);\n        }\n        if (mode.length === 6)\n        {\n            this._blendEq = true;\n            gl.blendEquationSeparate(mode[4], mode[5]);\n        }\n        else if (this._blendEq)\n        {\n            this._blendEq = false;\n            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n        }\n    }\n\n    /**\n     * Sets the polygon offset.\n     * @param {number} value - the polygon offset\n     * @param {number} scale - the polygon offset scale\n     */\n    setPolygonOffset(value: number, scale: number): void\n    {\n        this.gl.polygonOffset(value, scale);\n    }\n\n    // used\n    /** Resets all the logic and disables the VAOs. */\n    reset(): void\n    {\n        this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);\n\n        this.forceState(this.defaultState);\n\n        this._blendEq = true;\n        this.blendMode = -1;\n        this.setBlendMode(0);\n    }\n\n    /**\n     * Checks to see which updates should be checked based on which settings have been activated.\n     *\n     * For example, if blend is enabled then we should check the blend modes each time the state is changed\n     * or if polygon fill is activated then we need to check if the polygon offset changes.\n     * The idea is that we only check what we have too.\n     * @param func - the checking function to add or remove\n     * @param value - should the check function be added or removed.\n     */\n    updateCheck(func: (system: this, state: State) => void, value: boolean): void\n    {\n        const index = this.checks.indexOf(func);\n\n        if (value && index === -1)\n        {\n            this.checks.push(func);\n        }\n        else if (!value && index !== -1)\n        {\n            this.checks.splice(index, 1);\n        }\n    }\n\n    /**\n     * A private little wrapper function that we call to check the blend mode.\n     * @param system - the System to perform the state check on\n     * @param state - the state that the blendMode will pulled from\n     */\n    private static checkBlendMode(system: StateSystem, state: State): void\n    {\n        system.setBlendMode(state.blendMode);\n    }\n\n    /**\n     * A private little wrapper function that we call to check the polygon offset.\n     * @param system - the System to perform the state check on\n     * @param state - the state that the blendMode will pulled from\n     */\n    private static checkPolygonOffset(system: StateSystem, state: State): void\n    {\n        system.setPolygonOffset(1, state.polygonOffset);\n    }\n\n    /**\n     * @ignore\n     */\n    destroy(): void\n    {\n        this.gl = null;\n    }\n}\n", "import { GC_MODES } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\n\nimport type { ISystem } from '../ISystem';\nimport type { Renderer } from '../Renderer';\nimport type { Texture } from './Texture';\nimport type { RenderTexture } from '../renderTexture/RenderTexture';\n\nexport interface IUnloadableTexture\n{\n    _texture: Texture | RenderTexture;\n    children: IUnloadableTexture[];\n}\n\n/**\n * System plugin to the renderer to manage texture garbage collection on the GPU,\n * ensuring that it does not get clogged up with textures that are no longer being used.\n * @memberof PIXI\n */\nexport class TextureGCSystem implements ISystem\n{\n    /**\n     * Count\n     * @readonly\n     */\n    public count: number;\n\n    /**\n     * Check count\n     * @readonly\n     */\n    public checkCount: number;\n\n    /**\n     * Maximum idle time, in seconds\n     * @see PIXI.settings.GC_MAX_IDLE\n     */\n    public maxIdle: number;\n\n    /**\n     * Maximum number of item to check\n     * @see PIXI.settings.GC_MAX_CHECK_COUNT\n     */\n    public checkCountMax: number;\n\n    /**\n     * Current garbage collection mode\n     * @see PIXI.settings.GC_MODE\n     */\n    public mode: GC_MODES;\n    private renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        this.count = 0;\n        this.checkCount = 0;\n        this.maxIdle = settings.GC_MAX_IDLE;\n        this.checkCountMax = settings.GC_MAX_CHECK_COUNT;\n        this.mode = settings.GC_MODE;\n    }\n\n    /**\n     * Checks to see when the last time a texture was used\n     * if the texture has not been used for a specified amount of time it will be removed from the GPU\n     */\n    protected postrender(): void\n    {\n        if (!this.renderer.renderingToScreen)\n        {\n            return;\n        }\n\n        this.count++;\n\n        if (this.mode === GC_MODES.MANUAL)\n        {\n            return;\n        }\n\n        this.checkCount++;\n\n        if (this.checkCount > this.checkCountMax)\n        {\n            this.checkCount = 0;\n\n            this.run();\n        }\n    }\n\n    /**\n     * Checks to see when the last time a texture was used\n     * if the texture has not been used for a specified amount of time it will be removed from the GPU\n     */\n    run(): void\n    {\n        const tm = this.renderer.texture;\n        const managedTextures =  tm.managedTextures;\n        let wasRemoved = false;\n\n        for (let i = 0; i < managedTextures.length; i++)\n        {\n            const texture = managedTextures[i];\n\n            // only supports non generated textures at the moment!\n            if (!(texture as any).framebuffer && this.count - texture.touched > this.maxIdle)\n            {\n                tm.destroyTexture(texture, true);\n                managedTextures[i] = null;\n                wasRemoved = true;\n            }\n        }\n\n        if (wasRemoved)\n        {\n            let j = 0;\n\n            for (let i = 0; i < managedTextures.length; i++)\n            {\n                if (managedTextures[i] !== null)\n                {\n                    managedTextures[j++] = managedTextures[i];\n                }\n            }\n\n            managedTextures.length = j;\n        }\n    }\n\n    /**\n     * Removes all the textures within the specified displayObject and its children from the GPU\n     * @param {PIXI.DisplayObject} displayObject - the displayObject to remove the textures from.\n     */\n    unload(displayObject: IUnloadableTexture): void\n    {\n        const tm = this.renderer.texture;\n        const texture = displayObject._texture as RenderTexture;\n\n        // only destroy non generated textures\n        if (texture && !texture.framebuffer)\n        {\n            tm.destroyTexture(texture);\n        }\n\n        for (let i = displayObject.children.length - 1; i >= 0; i--)\n        {\n            this.unload(displayObject.children[i]);\n        }\n    }\n\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n", "import { FORMATS, TYPES } from '@pixi/constants';\n\n/**\n * Returns a lookup table that maps each type-format pair to a compatible internal format.\n * @memberof PIXI\n * @function mapTypeAndFormatToInternalFormat\n * @private\n * @param {WebGLRenderingContext} gl - The rendering context.\n * @returns Lookup table.\n */\nexport function mapTypeAndFormatToInternalFormat(gl: WebGLRenderingContextBase):\n{ [type: number]: { [format: number]: number } }\n{\n    let table;\n\n    if ('WebGL2RenderingContext' in globalThis && gl instanceof globalThis.WebGL2RenderingContext)\n    {\n        table = {\n            [TYPES.UNSIGNED_BYTE]: {\n                [FORMATS.RGBA]: gl.RGBA8,\n                [FORMATS.RGB]: gl.RGB8,\n                [FORMATS.RG]: gl.RG8,\n                [FORMATS.RED]: gl.R8,\n                [FORMATS.RGBA_INTEGER]: gl.RGBA8UI,\n                [FORMATS.RGB_INTEGER]: gl.RGB8UI,\n                [FORMATS.RG_INTEGER]: gl.RG8UI,\n                [FORMATS.RED_INTEGER]: gl.R8UI,\n                [FORMATS.ALPHA]: gl.ALPHA,\n                [FORMATS.LUMINANCE]: gl.LUMINANCE,\n                [FORMATS.LUMINANCE_ALPHA]: gl.LUMINANCE_ALPHA,\n            },\n            [TYPES.BYTE]: {\n                [FORMATS.RGBA]: gl.RGBA8_SNORM,\n                [FORMATS.RGB]: gl.RGB8_SNORM,\n                [FORMATS.RG]: gl.RG8_SNORM,\n                [FORMATS.RED]: gl.R8_SNORM,\n                [FORMATS.RGBA_INTEGER]: gl.RGBA8I,\n                [FORMATS.RGB_INTEGER]: gl.RGB8I,\n                [FORMATS.RG_INTEGER]: gl.RG8I,\n                [FORMATS.RED_INTEGER]: gl.R8I,\n            },\n            [TYPES.UNSIGNED_SHORT]: {\n                [FORMATS.RGBA_INTEGER]: gl.RGBA16UI,\n                [FORMATS.RGB_INTEGER]: gl.RGB16UI,\n                [FORMATS.RG_INTEGER]: gl.RG16UI,\n                [FORMATS.RED_INTEGER]: gl.R16UI,\n                [FORMATS.DEPTH_COMPONENT]: gl.DEPTH_COMPONENT16,\n            },\n            [TYPES.SHORT]: {\n                [FORMATS.RGBA_INTEGER]: gl.RGBA16I,\n                [FORMATS.RGB_INTEGER]: gl.RGB16I,\n                [FORMATS.RG_INTEGER]: gl.RG16I,\n                [FORMATS.RED_INTEGER]: gl.R16I,\n            },\n            [TYPES.UNSIGNED_INT]: {\n                [FORMATS.RGBA_INTEGER]: gl.RGBA32UI,\n                [FORMATS.RGB_INTEGER]: gl.RGB32UI,\n                [FORMATS.RG_INTEGER]: gl.RG32UI,\n                [FORMATS.RED_INTEGER]: gl.R32UI,\n                [FORMATS.DEPTH_COMPONENT]: gl.DEPTH_COMPONENT24,\n            },\n            [TYPES.INT]: {\n                [FORMATS.RGBA_INTEGER]: gl.RGBA32I,\n                [FORMATS.RGB_INTEGER]: gl.RGB32I,\n                [FORMATS.RG_INTEGER]: gl.RG32I,\n                [FORMATS.RED_INTEGER]: gl.R32I,\n            },\n            [TYPES.FLOAT]: {\n                [FORMATS.RGBA]: gl.RGBA32F,\n                [FORMATS.RGB]: gl.RGB32F,\n                [FORMATS.RG]: gl.RG32F,\n                [FORMATS.RED]: gl.R32F,\n                [FORMATS.DEPTH_COMPONENT]: gl.DEPTH_COMPONENT32F,\n            },\n            [TYPES.HALF_FLOAT]: {\n                [FORMATS.RGBA]: gl.RGBA16F,\n                [FORMATS.RGB]: gl.RGB16F,\n                [FORMATS.RG]: gl.RG16F,\n                [FORMATS.RED]: gl.R16F,\n            },\n            [TYPES.UNSIGNED_SHORT_5_6_5]: {\n                [FORMATS.RGB]: gl.RGB565,\n            },\n            [TYPES.UNSIGNED_SHORT_4_4_4_4]: {\n                [FORMATS.RGBA]: gl.RGBA4,\n            },\n            [TYPES.UNSIGNED_SHORT_5_5_5_1]: {\n                [FORMATS.RGBA]: gl.RGB5_A1,\n            },\n            [TYPES.UNSIGNED_INT_2_10_10_10_REV]: {\n                [FORMATS.RGBA]: gl.RGB10_A2,\n                [FORMATS.RGBA_INTEGER]: gl.RGB10_A2UI,\n            },\n            [TYPES.UNSIGNED_INT_10F_11F_11F_REV]: {\n                [FORMATS.RGB]: gl.R11F_G11F_B10F,\n            },\n            [TYPES.UNSIGNED_INT_5_9_9_9_REV]: {\n                [FORMATS.RGB]: gl.RGB9_E5,\n            },\n            [TYPES.UNSIGNED_INT_24_8]: {\n                [FORMATS.DEPTH_STENCIL]: gl.DEPTH24_STENCIL8,\n            },\n            [TYPES.FLOAT_32_UNSIGNED_INT_24_8_REV]: {\n                [FORMATS.DEPTH_STENCIL]: gl.DEPTH32F_STENCIL8,\n            },\n        };\n    }\n    else\n    {\n        table = {\n            [TYPES.UNSIGNED_BYTE]: {\n                [FORMATS.RGBA]: gl.RGBA,\n                [FORMATS.RGB]: gl.RGB,\n                [FORMATS.ALPHA]: gl.ALPHA,\n                [FORMATS.LUMINANCE]: gl.LUMINANCE,\n                [FORMATS.LUMINANCE_ALPHA]: gl.LUMINANCE_ALPHA,\n            },\n            [TYPES.UNSIGNED_SHORT_5_6_5]: {\n                [FORMATS.RGB]: gl.RGB,\n            },\n            [TYPES.UNSIGNED_SHORT_4_4_4_4]: {\n                [FORMATS.RGBA]: gl.RGBA,\n            },\n            [TYPES.UNSIGNED_SHORT_5_5_5_1]: {\n                [FORMATS.RGBA]: gl.RGBA,\n            },\n        };\n    }\n\n    return table;\n}\n", "import { FORMATS, TYPES } from '@pixi/constants';\n\n/**\n * Internal texture for WebGL context.\n * @memberof PIXI\n */\nexport class GLTexture\n{\n    /** The WebGL texture. */\n    public texture: WebGLTexture;\n\n    /** Width of texture that was used in texImage2D. */\n    public width: number;\n\n    /** Height of texture that was used in texImage2D. */\n    public height: number;\n\n    /** Whether mip levels has to be generated. */\n    public mipmap: boolean;\n\n    /** WrapMode copied from baseTexture. */\n    public wrapMode: number;\n\n    /** Type copied from baseTexture. */\n    public type: number;\n\n    /** Type copied from baseTexture. */\n    public internalFormat: number;\n\n    /** Type of sampler corresponding to this texture. See {@link PIXI.SAMPLER_TYPES} */\n    public samplerType: number;\n\n    /** Texture contents dirty flag. */\n    dirtyId: number;\n\n    /** Texture style dirty flag. */\n    dirtyStyleId: number;\n\n    constructor(texture: WebGLTexture)\n    {\n        this.texture = texture;\n        this.width = -1;\n        this.height = -1;\n        this.dirtyId = -1;\n        this.dirtyStyleId = -1;\n        this.mipmap = false;\n        this.wrapMode = 33071;\n        this.type = TYPES.UNSIGNED_BYTE;\n        this.internalFormat = FORMATS.RGBA;\n\n        this.samplerType = 0;\n    }\n}\n", "import { mapTypeAndFormatToInternalFormat } from './utils/mapTypeAndFormatToInternalFormat';\nimport { BaseTexture } from './BaseTexture';\nimport { GLTexture } from './GLTexture';\nimport { removeItems } from '@pixi/utils';\nimport { MIPMAP_MODES, WRAP_MODES, SCALE_MODES, TYPES, SAMPLER_TYPES } from '@pixi/constants';\n\nimport type { ISystem } from '../ISystem';\nimport type { Texture } from './Texture';\nimport type { IRenderingContext } from '../IRenderingContext';\nimport type { Renderer } from '../Renderer';\n\n/**\n * System plugin to the renderer to manage textures.\n * @memberof PIXI\n */\nexport class TextureSystem implements ISystem\n{\n    /**\n     * Bound textures.\n     * @readonly\n     */\n    public boundTextures: BaseTexture[];\n\n    /**\n     * List of managed textures.\n     * @readonly\n     */\n    public managedTextures: Array<BaseTexture>;\n\n    /** Whether glTexture with int/uint sampler type was uploaded. */\n    protected hasIntegerTextures: boolean;\n    protected CONTEXT_UID: number;\n    protected gl: IRenderingContext;\n    protected internalFormats: { [type: number]: { [format: number]: number } };\n    protected webGLVersion: number;\n\n    /**\n     * BaseTexture value that shows that we don't know what is bound.\n     * @readonly\n     */\n    protected unknownTexture: BaseTexture;\n\n    /**\n     * Did someone temper with textures state? We'll overwrite them when we need to unbind something.\n     * @private\n     */\n    protected _unknownBoundTextures: boolean;\n\n    /**\n     * Current location.\n     * @readonly\n     */\n    currentLocation: number;\n    emptyTextures: {[key: number]: GLTexture};\n    private renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this system works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        // TODO set to max textures...\n        this.boundTextures = [];\n        this.currentLocation = -1;\n        this.managedTextures = [];\n\n        this._unknownBoundTextures = false;\n        this.unknownTexture = new BaseTexture();\n\n        this.hasIntegerTextures = false;\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    contextChange(): void\n    {\n        const gl = this.gl = this.renderer.gl;\n\n        this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n\n        this.webGLVersion = this.renderer.context.webGLVersion;\n\n        this.internalFormats = mapTypeAndFormatToInternalFormat(gl);\n\n        const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n\n        this.boundTextures.length = maxTextures;\n\n        for (let i = 0; i < maxTextures; i++)\n        {\n            this.boundTextures[i] = null;\n        }\n\n        // TODO move this.. to a nice make empty textures class..\n        this.emptyTextures = {};\n\n        const emptyTexture2D = new GLTexture(gl.createTexture());\n\n        gl.bindTexture(gl.TEXTURE_2D, emptyTexture2D.texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4));\n\n        this.emptyTextures[gl.TEXTURE_2D] = emptyTexture2D;\n        this.emptyTextures[gl.TEXTURE_CUBE_MAP] = new GLTexture(gl.createTexture());\n\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.emptyTextures[gl.TEXTURE_CUBE_MAP].texture);\n\n        for (let i = 0; i < 6; i++)\n        {\n            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n        }\n\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n        for (let i = 0; i < this.boundTextures.length; i++)\n        {\n            this.bind(null, i);\n        }\n    }\n\n    /**\n     * Bind a texture to a specific location\n     *\n     * If you want to unbind something, please use `unbind(texture)` instead of `bind(null, textureLocation)`\n     * @param texture - Texture to bind\n     * @param [location=0] - Location to bind at\n     */\n    bind(texture: Texture | BaseTexture, location = 0): void\n    {\n        const { gl } = this;\n\n        texture = texture?.castToBaseTexture();\n\n        // cannot bind partial texture\n        // TODO: report a warning\n        if (texture && texture.valid && !texture.parentTextureArray)\n        {\n            texture.touched = this.renderer.textureGC.count;\n\n            const glTexture = texture._glTextures[this.CONTEXT_UID] || this.initTexture(texture);\n\n            if (this.boundTextures[location] !== texture)\n            {\n                if (this.currentLocation !== location)\n                {\n                    this.currentLocation = location;\n                    gl.activeTexture(gl.TEXTURE0 + location);\n                }\n\n                gl.bindTexture(texture.target, glTexture.texture);\n            }\n\n            if (glTexture.dirtyId !== texture.dirtyId)\n            {\n                if (this.currentLocation !== location)\n                {\n                    this.currentLocation = location;\n                    gl.activeTexture(gl.TEXTURE0 + location);\n                }\n                this.updateTexture(texture);\n            }\n            else if (glTexture.dirtyStyleId !== texture.dirtyStyleId)\n            {\n                this.updateTextureStyle(texture);\n            }\n\n            this.boundTextures[location] = texture;\n        }\n        else\n        {\n            if (this.currentLocation !== location)\n            {\n                this.currentLocation = location;\n                gl.activeTexture(gl.TEXTURE0 + location);\n            }\n\n            gl.bindTexture(gl.TEXTURE_2D, this.emptyTextures[gl.TEXTURE_2D].texture);\n            this.boundTextures[location] = null;\n        }\n    }\n\n    /** Resets texture location and bound textures Actual `bind(null, i)` calls will be performed at next `unbind()` call */\n    reset(): void\n    {\n        this._unknownBoundTextures = true;\n        this.hasIntegerTextures = false;\n        this.currentLocation = -1;\n\n        for (let i = 0; i < this.boundTextures.length; i++)\n        {\n            this.boundTextures[i] = this.unknownTexture;\n        }\n    }\n\n    /**\n     * Unbind a texture.\n     * @param texture - Texture to bind\n     */\n    unbind(texture?: BaseTexture): void\n    {\n        const { gl, boundTextures } = this;\n\n        if (this._unknownBoundTextures)\n        {\n            this._unknownBoundTextures = false;\n            // someone changed webGL state,\n            // we have to be sure that our texture does not appear in multi-texture renderer samplers\n            for (let i = 0; i < boundTextures.length; i++)\n            {\n                if (boundTextures[i] === this.unknownTexture)\n                {\n                    this.bind(null, i);\n                }\n            }\n        }\n\n        for (let i = 0; i < boundTextures.length; i++)\n        {\n            if (boundTextures[i] === texture)\n            {\n                if (this.currentLocation !== i)\n                {\n                    gl.activeTexture(gl.TEXTURE0 + i);\n                    this.currentLocation = i;\n                }\n\n                gl.bindTexture(texture.target, this.emptyTextures[texture.target].texture);\n                boundTextures[i] = null;\n            }\n        }\n    }\n\n    /**\n     * Ensures that current boundTextures all have FLOAT sampler type,\n     * see {@link PIXI.SAMPLER_TYPES} for explanation.\n     * @param maxTextures - number of locations to check\n     */\n    ensureSamplerType(maxTextures: number): void\n    {\n        const { boundTextures, hasIntegerTextures, CONTEXT_UID } = this;\n\n        if (!hasIntegerTextures)\n        {\n            return;\n        }\n\n        for (let i = maxTextures - 1; i >= 0; --i)\n        {\n            const tex = boundTextures[i];\n\n            if (tex)\n            {\n                const glTexture = tex._glTextures[CONTEXT_UID];\n\n                if (glTexture.samplerType !== SAMPLER_TYPES.FLOAT)\n                {\n                    this.renderer.texture.unbind(tex);\n                }\n            }\n        }\n    }\n\n    /**\n     * Initialize a texture\n     * @private\n     * @param texture - Texture to initialize\n     */\n    initTexture(texture: BaseTexture): GLTexture\n    {\n        const glTexture = new GLTexture(this.gl.createTexture());\n\n        // guarantee an update..\n        glTexture.dirtyId = -1;\n\n        texture._glTextures[this.CONTEXT_UID] = glTexture;\n\n        this.managedTextures.push(texture);\n        texture.on('dispose', this.destroyTexture, this);\n\n        return glTexture;\n    }\n\n    initTextureType(texture: BaseTexture, glTexture: GLTexture): void\n    {\n        glTexture.internalFormat = this.internalFormats[texture.type]?.[texture.format] ?? texture.format;\n\n        if (this.webGLVersion === 2 && texture.type === TYPES.HALF_FLOAT)\n        {\n            // TYPES.HALF_FLOAT is WebGL1 HALF_FLOAT_OES\n            // we have to convert it to WebGL HALF_FLOAT\n            glTexture.type = this.gl.HALF_FLOAT;\n        }\n        else\n        {\n            glTexture.type = texture.type;\n        }\n    }\n\n    /**\n     * Update a texture\n     * @private\n     * @param {PIXI.BaseTexture} texture - Texture to initialize\n     */\n    updateTexture(texture: BaseTexture): void\n    {\n        const glTexture = texture._glTextures[this.CONTEXT_UID];\n\n        if (!glTexture)\n        {\n            return;\n        }\n\n        const renderer = this.renderer;\n\n        this.initTextureType(texture, glTexture);\n\n        if (texture.resource && texture.resource.upload(renderer, texture, glTexture))\n        {\n            // texture is uploaded, dont do anything!\n            if (glTexture.samplerType !== SAMPLER_TYPES.FLOAT)\n            {\n                this.hasIntegerTextures = true;\n            }\n        }\n        else\n        {\n            // default, renderTexture-like logic\n            const width = texture.realWidth;\n            const height = texture.realHeight;\n            const gl = renderer.gl;\n\n            if (glTexture.width !== width\n                || glTexture.height !== height\n                || glTexture.dirtyId < 0)\n            {\n                glTexture.width = width;\n                glTexture.height = height;\n\n                gl.texImage2D(texture.target, 0,\n                    glTexture.internalFormat,\n                    width,\n                    height,\n                    0,\n                    texture.format,\n                    glTexture.type,\n                    null);\n            }\n        }\n\n        // lets only update what changes..\n        if (texture.dirtyStyleId !== glTexture.dirtyStyleId)\n        {\n            this.updateTextureStyle(texture);\n        }\n        glTexture.dirtyId = texture.dirtyId;\n    }\n\n    /**\n     * Deletes the texture from WebGL\n     * @private\n     * @param texture - the texture to destroy\n     * @param [skipRemove=false] - Whether to skip removing the texture from the TextureManager.\n     */\n    destroyTexture(texture: BaseTexture | Texture, skipRemove?: boolean): void\n    {\n        const { gl } = this;\n\n        texture = texture.castToBaseTexture();\n\n        if (texture._glTextures[this.CONTEXT_UID])\n        {\n            this.unbind(texture);\n\n            gl.deleteTexture(texture._glTextures[this.CONTEXT_UID].texture);\n            texture.off('dispose', this.destroyTexture, this);\n\n            delete texture._glTextures[this.CONTEXT_UID];\n\n            if (!skipRemove)\n            {\n                const i = this.managedTextures.indexOf(texture);\n\n                if (i !== -1)\n                {\n                    removeItems(this.managedTextures, i, 1);\n                }\n            }\n        }\n    }\n\n    /**\n     * Update texture style such as mipmap flag\n     * @private\n     * @param {PIXI.BaseTexture} texture - Texture to update\n     */\n    updateTextureStyle(texture: BaseTexture): void\n    {\n        const glTexture = texture._glTextures[this.CONTEXT_UID];\n\n        if (!glTexture)\n        {\n            return;\n        }\n\n        if ((texture.mipmap === MIPMAP_MODES.POW2 || this.webGLVersion !== 2) && !texture.isPowerOfTwo)\n        {\n            glTexture.mipmap = false;\n        }\n        else\n        {\n            glTexture.mipmap = texture.mipmap >= 1;\n        }\n\n        if (this.webGLVersion !== 2 && !texture.isPowerOfTwo)\n        {\n            glTexture.wrapMode = WRAP_MODES.CLAMP;\n        }\n        else\n        {\n            glTexture.wrapMode = texture.wrapMode;\n        }\n\n        if (texture.resource && texture.resource.style(this.renderer, texture, glTexture))\n        {\n            // style is set, dont do anything!\n        }\n        else\n        {\n            this.setStyle(texture, glTexture);\n        }\n\n        glTexture.dirtyStyleId = texture.dirtyStyleId;\n    }\n\n    /**\n     * Set style for texture\n     * @private\n     * @param texture - Texture to update\n     * @param glTexture\n     */\n    setStyle(texture: BaseTexture, glTexture: GLTexture): void\n    {\n        const gl = this.gl;\n\n        if (glTexture.mipmap && texture.mipmap !== MIPMAP_MODES.ON_MANUAL)\n        {\n            gl.generateMipmap(texture.target);\n        }\n\n        gl.texParameteri(texture.target, gl.TEXTURE_WRAP_S, glTexture.wrapMode);\n        gl.texParameteri(texture.target, gl.TEXTURE_WRAP_T, glTexture.wrapMode);\n\n        if (glTexture.mipmap)\n        {\n            /* eslint-disable max-len */\n            gl.texParameteri(texture.target, gl.TEXTURE_MIN_FILTER, texture.scaleMode === SCALE_MODES.LINEAR ? gl.LINEAR_MIPMAP_LINEAR : gl.NEAREST_MIPMAP_NEAREST);\n            /* eslint-disable max-len */\n\n            const anisotropicExt = this.renderer.context.extensions.anisotropicFiltering;\n\n            if (anisotropicExt && texture.anisotropicLevel > 0 && texture.scaleMode === SCALE_MODES.LINEAR)\n            {\n                const level = Math.min(texture.anisotropicLevel, gl.getParameter(anisotropicExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT));\n\n                gl.texParameterf(texture.target, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, level);\n            }\n        }\n        else\n        {\n            gl.texParameteri(texture.target, gl.TEXTURE_MIN_FILTER, texture.scaleMode === SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST);\n        }\n\n        gl.texParameteri(texture.target, gl.TEXTURE_MAG_FILTER, texture.scaleMode === SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST);\n    }\n\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n", "import { hex2string, hex2rgb, EventEmitter, deprecation } from '@pixi/utils';\nimport { Matrix, Rectangle } from '@pixi/math';\nimport { RENDERER_TYPE } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\nimport { RenderTexture } from './renderTexture/RenderTexture';\n\nimport type { SCALE_MODES, MSAA_QUALITY } from '@pixi/constants';\nimport type { ISystemConstructor } from './ISystem';\nimport type { IRenderingContext } from './IRenderingContext';\nimport type { IRenderableContainer, IRenderableObject } from './IRenderableObject';\n\nconst tempMatrix = new Matrix();\n\n/**\n * Renderer options supplied to constructor.\n * @memberof PIXI\n * @see PIXI.settings.RENDER_OPTIONS\n */\nexport interface IRendererOptions extends GlobalMixins.IRendererOptions\n{\n    /** The canvas to use as the view. If omitted, a new canvas will be created. */\n    view?: HTMLCanvasElement;\n    /**\n     * The width of the renderer's view.\n     * @default 800\n     */\n    width?: number;\n    /**\n     * The height of the renderer's view.\n     * @default 600\n     */\n    height?: number;\n    /**\n     * The resolution / device pixel ratio of the renderer.\n     * @default PIXI.settings.RESOLUTION\n     */\n    resolution?: number;\n    /**\n     * Whether the CSS dimensions of the renderer's view should be resized automatically.\n     * @default false\n     */\n    autoDensity?: boolean;\n\n    /**\n     * The background color used to clear the canvas. It accepts hex numbers (e.g. `0xff0000`).\n     * @default 0x000000\n     */\n    backgroundColor?: number;\n    /**\n     * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n     * @default 1\n     */\n    backgroundAlpha?: number;\n    /**\n     * Pass-through value for canvas' context attribute `alpha`. This option is for cases where the\n     * canvas needs to be opaque, possibly for performance reasons on some older devices.\n     * If you want to set transparency, please use `backgroundAlpha`.\n     *\n     * **WebGL Only:** When set to `'notMultiplied'`, the canvas' context attribute `alpha` will be\n     * set to `true` and `premultipliedAlpha` will be to `false`.\n     * @default true\n     */\n    useContextAlpha?: boolean | 'notMultiplied';\n    /**\n     * Use `backgroundAlpha` instead.\n     * @deprecated since 6.0.0\n     */\n    transparent?: boolean;\n    /**\n     * Whether to clear the canvas before new render passes.\n     * @default true\n     */\n    clearBeforeRender?: boolean;\n\n    /** **WebGL Only.** User-provided WebGL rendering context object. */\n    context?: IRenderingContext;\n    /**\n     * **WebGL Only.** Whether to enable anti-aliasing. This may affect performance.\n     * @default false\n     */\n    antialias?: boolean;\n    /**\n     * **WebGL Only.** A hint indicating what configuration of GPU is suitable for the WebGL context,\n     * can be `'default'`, `'high-performance'` or `'low-power'`.\n     * Setting to `'high-performance'` will prioritize rendering performance over power consumption,\n     * while setting to `'low-power'` will prioritize power saving over rendering performance.\n     */\n    powerPreference?: WebGLPowerPreference;\n    /**\n     * **WebGL Only.** Whether to enable drawing buffer preservation. If enabled, the drawing buffer will preserve\n     * its value until cleared or overwritten. Enable this if you need to call `toDataUrl` on the WebGL context.\n     * @default false\n     */\n    preserveDrawingBuffer?: boolean;\n}\n\nexport interface IRendererPlugins\n{\n    [key: string]: any;\n}\n\nexport interface IRendererRenderOptions\n{\n    renderTexture?: RenderTexture;\n    clear?: boolean;\n    transform?: Matrix;\n    skipUpdateTransform?: boolean;\n}\n\nexport interface IGenerateTextureOptions\n{\n    scaleMode?: SCALE_MODES;\n    resolution?: number;\n    region?: Rectangle;\n    multisample?: MSAA_QUALITY;\n}\n\n/**\n * The AbstractRenderer is the base for a PixiJS Renderer. It is extended by the {@link PIXI.CanvasRenderer}\n * and {@link PIXI.Renderer} which can be used for rendering a PixiJS scene.\n * @abstract\n * @class\n * @extends PIXI.utils.EventEmitter\n * @memberof PIXI\n */\nexport abstract class AbstractRenderer extends EventEmitter\n{\n    public resolution: number;\n    public clearBeforeRender?: boolean;\n    public readonly options: IRendererOptions;\n    public readonly type: RENDERER_TYPE;\n    public readonly screen: Rectangle;\n    public readonly view: HTMLCanvasElement;\n    public readonly plugins: IRendererPlugins;\n    public readonly useContextAlpha: boolean | 'notMultiplied';\n    public readonly autoDensity: boolean;\n    public readonly preserveDrawingBuffer: boolean;\n\n    protected _backgroundColor: number;\n    protected _backgroundColorString: string;\n    _backgroundColorRgba: number[];\n    _lastObjectRendered: IRenderableObject;\n\n    /**\n     * @param type - The renderer type.\n     * @param {PIXI.IRendererOptions} [options] - The optional renderer parameters.\n     * @param {boolean} [options.antialias=false] -\n     *  **WebGL Only.** Whether to enable anti-aliasing. This may affect performance.\n     * @param {boolean} [options.autoDensity=false] -\n     *  Whether the CSS dimensions of the renderer's view should be resized automatically.\n     * @param {number} [options.backgroundAlpha=1] -\n     *  Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n     * @param {number} [options.backgroundColor=0x000000] -\n     *  The background color used to clear the canvas. It accepts hex numbers (e.g. `0xff0000`).\n     * @param {boolean} [options.clearBeforeRender=true] - Whether to clear the canvas before new render passes.\n     * @param {PIXI.IRenderingContext} [options.context] - **WebGL Only.** User-provided WebGL rendering context object.\n     * @param {number} [options.height=600] - The height of the renderer's view.\n     * @param {string} [options.powerPreference] -\n     *  **WebGL Only.** A hint indicating what configuration of GPU is suitable for the WebGL context,\n     *  can be `'default'`, `'high-performance'` or `'low-power'`.\n     *  Setting to `'high-performance'` will prioritize rendering performance over power consumption,\n     *  while setting to `'low-power'` will prioritize power saving over rendering performance.\n     * @param {boolean} [options.premultipliedAlpha=true] -\n     *  **WebGL Only.** Whether the compositor will assume the drawing buffer contains colors with premultiplied alpha.\n     * @param {boolean} [options.preserveDrawingBuffer=false] -\n     *  **WebGL Only.** Whether to enable drawing buffer preservation. If enabled, the drawing buffer will preserve\n     *  its value until cleared or overwritten. Enable this if you need to call `toDataUrl` on the WebGL context.\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] -\n     *  The resolution / device pixel ratio of the renderer.\n     * @param {boolean} [options.transparent] -\n     *  **Deprecated since 6.0.0, Use `backgroundAlpha` instead.** \\\n     *  `true` sets `backgroundAlpha` to `0`, `false` sets `backgroundAlpha` to `1`.\n     * @param {boolean|'notMultiplied'} [options.useContextAlpha=true] -\n     *  Pass-through value for canvas' context attribute `alpha`. This option is for cases where the\n     *  canvas needs to be opaque, possibly for performance reasons on some older devices.\n     *  If you want to set transparency, please use `backgroundAlpha`. \\\n     *  **WebGL Only:** When set to `'notMultiplied'`, the canvas' context attribute `alpha` will be\n     *  set to `true` and `premultipliedAlpha` will be to `false`.\n     * @param {HTMLCanvasElement} [options.view=null] -\n     *  The canvas to use as the view. If omitted, a new canvas will be created.\n     * @param {number} [options.width=800] - The width of the renderer's view.\n     */\n    constructor(type: RENDERER_TYPE = RENDERER_TYPE.UNKNOWN, options?: IRendererOptions)\n    {\n        super();\n\n        // Add the default render options\n        options = Object.assign({}, settings.RENDER_OPTIONS, options);\n\n        /**\n         * The supplied constructor options.\n         * @member {object}\n         * @readonly\n         */\n        this.options = options;\n\n        /**\n         * The type of the renderer.\n         * @member {number}\n         * @default PIXI.RENDERER_TYPE.UNKNOWN\n         * @see PIXI.RENDERER_TYPE\n         */\n        this.type = type;\n\n        /**\n         * Measurements of the screen. (0, 0, screenWidth, screenHeight).\n         *\n         * Its safe to use as filterArea or hitArea for the whole stage.\n         * @member {PIXI.Rectangle}\n         */\n        this.screen = new Rectangle(0, 0, options.width, options.height);\n\n        /**\n         * The canvas element that everything is drawn to.\n         * @member {HTMLCanvasElement}\n         */\n        this.view = options.view || settings.ADAPTER.createCanvas();\n\n        /**\n         * The resolution / device pixel ratio of the renderer.\n         * @member {number}\n         * @default PIXI.settings.RESOLUTION\n         */\n        this.resolution = options.resolution || settings.RESOLUTION;\n\n        /**\n         * Pass-thru setting for the canvas' context `alpha` property. This is typically\n         * not something you need to fiddle with. If you want transparency, use `backgroundAlpha`.\n         * @member {boolean}\n         */\n        this.useContextAlpha = options.useContextAlpha;\n\n        /**\n         * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.\n         * @member {boolean}\n         */\n        this.autoDensity = !!options.autoDensity;\n\n        /**\n         * The value of the preserveDrawingBuffer flag affects whether or not the contents of\n         * the stencil buffer is retained after rendering.\n         * @member {boolean}\n         */\n        this.preserveDrawingBuffer = options.preserveDrawingBuffer;\n\n        /**\n         * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\n         * If the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every\n         * frame to set the canvas background color. If the scene is transparent PixiJS will use clearRect\n         * to clear the canvas every frame. Disable this by setting this to false. For example, if\n         * your game has a canvas filling background image you often don't need this set.\n         * @member {boolean}\n         * @default\n         */\n        this.clearBeforeRender = options.clearBeforeRender;\n\n        /**\n         * The background color as a number.\n         * @member {number}\n         * @protected\n         */\n        this._backgroundColor = 0x000000;\n\n        /**\n         * The background color as an [R, G, B, A] array.\n         * @member {number[]}\n         * @protected\n         */\n        this._backgroundColorRgba = [0, 0, 0, 1];\n\n        /**\n         * The background color as a string.\n         * @member {string}\n         * @protected\n         */\n        this._backgroundColorString = '#000000';\n\n        this.backgroundColor = options.backgroundColor || this._backgroundColor; // run bg color setter\n        this.backgroundAlpha = options.backgroundAlpha;\n\n        // @deprecated\n        if (options.transparent !== undefined)\n        {\n            // #if _DEBUG\n            deprecation('6.0.0', 'Option transparent is deprecated, please use backgroundAlpha instead.');\n            // #endif\n            this.useContextAlpha = options.transparent;\n            this.backgroundAlpha = options.transparent ? 0 : 1;\n        }\n\n        /**\n         * The last root object that the renderer tried to render.\n         * @member {PIXI.DisplayObject}\n         * @protected\n         */\n        this._lastObjectRendered = null;\n\n        /**\n         * Collection of plugins.\n         * @readonly\n         * @member {object}\n         */\n        this.plugins = {};\n    }\n\n    /**\n     * Initialize the plugins.\n     * @protected\n     * @param {object} staticMap - The dictionary of statically saved plugins.\n     */\n    initPlugins(staticMap: IRendererPlugins): void\n    {\n        for (const o in staticMap)\n        {\n            this.plugins[o] = new (staticMap[o])(this);\n        }\n    }\n\n    /**\n     * Same as view.width, actual number of pixels in the canvas by horizontal.\n     * @member {number}\n     * @readonly\n     * @default 800\n     */\n    get width(): number\n    {\n        return this.view.width;\n    }\n\n    /**\n     * Same as view.height, actual number of pixels in the canvas by vertical.\n     * @member {number}\n     * @readonly\n     * @default 600\n     */\n    get height(): number\n    {\n        return this.view.height;\n    }\n\n    /**\n     * Resizes the screen and canvas as close as possible to the specified width and height.\n     * Canvas dimensions are multiplied by resolution and rounded to the nearest integers.\n     * The new canvas dimensions divided by the resolution become the new screen dimensions.\n     * @param desiredScreenWidth - The desired width of the screen.\n     * @param desiredScreenHeight - The desired height of the screen.\n     */\n    resize(desiredScreenWidth: number, desiredScreenHeight: number): void\n    {\n        this.view.width = Math.round(desiredScreenWidth * this.resolution);\n        this.view.height = Math.round(desiredScreenHeight * this.resolution);\n\n        const screenWidth = this.view.width / this.resolution;\n        const screenHeight = this.view.height / this.resolution;\n\n        this.screen.width = screenWidth;\n        this.screen.height = screenHeight;\n\n        if (this.autoDensity)\n        {\n            this.view.style.width = `${screenWidth}px`;\n            this.view.style.height = `${screenHeight}px`;\n        }\n\n        /**\n         * Fired after view has been resized.\n         * @event PIXI.Renderer#resize\n         * @param {number} screenWidth - The new width of the screen.\n         * @param {number} screenHeight - The new height of the screen.\n         */\n        this.emit('resize', screenWidth, screenHeight);\n    }\n\n    /**\n     * Useful function that returns a texture of the display object that can then be used to create sprites\n     * This can be quite useful if your displayObject is complicated and needs to be reused multiple times.\n     * @method PIXI.AbstractRenderer#generateTexture\n     * @param displayObject - The displayObject the object will be generated from.\n     * @param {object} options - Generate texture options.\n     * @param {PIXI.SCALE_MODES} options.scaleMode - The scale mode of the texture.\n     * @param {number} options.resolution - The resolution / device pixel ratio of the texture being generated.\n     * @param {PIXI.Rectangle} options.region - The region of the displayObject, that shall be rendered,\n     *        if no region is specified, defaults to the local bounds of the displayObject.\n     * @param {PIXI.MSAA_QUALITY} options.multisample - The number of samples of the frame buffer.\n     * @returns A texture of the graphics object.\n     */\n    generateTexture(displayObject: IRenderableObject, options?: IGenerateTextureOptions): RenderTexture;\n\n    /**\n     * Please use the options argument instead.\n     * @method PIXI.AbstractRenderer#generateTexture\n     * @deprecated Since 6.1.0\n     * @param displayObject - The displayObject the object will be generated from.\n     * @param scaleMode - The scale mode of the texture.\n     * @param resolution - The resolution / device pixel ratio of the texture being generated.\n     * @param region - The region of the displayObject, that shall be rendered,\n     *        if no region is specified, defaults to the local bounds of the displayObject.\n     * @returns A texture of the graphics object.\n     */\n    generateTexture(\n        displayObject: IRenderableObject,\n        scaleMode?: SCALE_MODES,\n        resolution?: number,\n        region?: Rectangle): RenderTexture;\n\n    /**\n     * @ignore\n     */\n    generateTexture(displayObject: IRenderableObject,\n        options: IGenerateTextureOptions | SCALE_MODES = {},\n        resolution?: number, region?: Rectangle): RenderTexture\n    {\n        // @deprecated parameters spread, use options instead\n        if (typeof options === 'number')\n        {\n            // #if _DEBUG\n            deprecation('6.1.0', 'generateTexture options (scaleMode, resolution, region) are now object options.');\n            // #endif\n\n            options = { scaleMode: options, resolution, region };\n        }\n\n        const { region: manualRegion, ...textureOptions } = options;\n\n        region = manualRegion || (displayObject as IRenderableContainer).getLocalBounds(null, true);\n\n        // minimum texture size is 1x1, 0x0 will throw an error\n        if (region.width === 0) region.width = 1;\n        if (region.height === 0) region.height = 1;\n\n        const renderTexture = RenderTexture.create(\n            {\n                width: region.width,\n                height: region.height,\n                ...textureOptions,\n            });\n\n        tempMatrix.tx = -region.x;\n        tempMatrix.ty = -region.y;\n\n        this.render(displayObject, {\n            renderTexture,\n            clear: false,\n            transform: tempMatrix,\n            skipUpdateTransform: !!displayObject.parent\n        });\n\n        return renderTexture;\n    }\n\n    /**\n     * Adds a new system to the renderer.\n     * @param ClassRef - Class reference\n     * @param name - Property name for system\n     * @returns Return instance of renderer\n     */\n    abstract addSystem(ClassRef: ISystemConstructor, name: string): this;\n\n    abstract render(displayObject: IRenderableObject, options?: IRendererRenderOptions): void;\n\n    /**\n     * Removes everything from the renderer and optionally removes the Canvas DOM element.\n     * @param [removeView=false] - Removes the Canvas element from the DOM.\n     */\n    destroy(removeView?: boolean): void\n    {\n        for (const o in this.plugins)\n        {\n            this.plugins[o].destroy();\n            this.plugins[o] = null;\n        }\n\n        if (removeView && this.view.parentNode)\n        {\n            this.view.parentNode.removeChild(this.view);\n        }\n\n        const thisAny = this as any;\n\n        // null-ing all objects, that's a tradition!\n\n        thisAny.plugins = null;\n        thisAny.type = RENDERER_TYPE.UNKNOWN;\n        thisAny.view = null;\n        thisAny.screen = null;\n        thisAny._tempDisplayObjectParent = null;\n        thisAny.options = null;\n        this._backgroundColorRgba = null;\n        this._backgroundColorString = null;\n        this._lastObjectRendered = null;\n    }\n\n    /**\n     * The background color to fill if not transparent\n     * @member {number}\n     */\n    get backgroundColor(): number\n    {\n        return this._backgroundColor;\n    }\n\n    set backgroundColor(value: number)\n    {\n        this._backgroundColor = value;\n        this._backgroundColorString = hex2string(value);\n        hex2rgb(value, this._backgroundColorRgba);\n    }\n\n    /**\n     * The background color alpha. Setting this to 0 will make the canvas transparent.\n     * @member {number}\n     */\n    get backgroundAlpha(): number\n    {\n        return this._backgroundColorRgba[3];\n    }\n    set backgroundAlpha(value: number)\n    {\n        this._backgroundColorRgba[3] = value;\n    }\n}\n", "export class GLBuffer\n{\n    buffer: WebGLBuffer;\n    updateID: number;\n    byteLength: number;\n    refCount: number;\n\n    constructor(buffer?: WebGLBuffer)\n    {\n        this.buffer = buffer || null;\n        this.updateID = -1;\n        this.byteLength = -1;\n        this.refCount = 0;\n    }\n}\n", "import { GLBuffer } from './GLBuffer';\n\nimport type { Renderer } from '../Renderer';\nimport type { IRenderingContext } from '../IRenderingContext';\nimport type { Buffer } from './Buffer';\nimport type { ISystem } from '../ISystem';\n\n/**\n * System plugin to the renderer to manage buffers.\n *\n * WebGL uses Buffers as a way to store objects to the GPU.\n * This system makes working with them a lot easier.\n *\n * Buffers are used in three main places in WebGL\n * - geometry information\n * - Uniform information (via uniform buffer objects - a WebGL 2 only feature)\n * - Transform feedback information. (WebGL 2 only feature)\n *\n * This system will handle the binding of buffers to the GPU as well as uploading\n * them. With this system, you never need to work directly with GPU buffers, but instead work with\n * the PIXI.Buffer class.\n * @class\n * @memberof PIXI\n */\nexport class BufferSystem implements ISystem\n{\n    CONTEXT_UID: number;\n    gl: IRenderingContext;\n\n    /** Cache for all buffers by id, used in case renderer gets destroyed or for profiling */\n    readonly managedBuffers: {[key: number]: Buffer};\n\n    /** Cache keeping track of the base bound buffer bases */\n    readonly boundBufferBases: {[key: number]: Buffer};\n\n    private renderer: Renderer;\n\n    /**\n     * @param {PIXI.Renderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n        this.managedBuffers = {};\n        this.boundBufferBases = {};\n    }\n\n    /**\n     * @ignore\n     */\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    protected contextChange(): void\n    {\n        this.disposeAll(true);\n\n        this.gl = this.renderer.gl;\n\n        // TODO fill out...\n        this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n    }\n\n    /**\n     * This binds specified buffer. On first run, it will create the webGL buffers for the context too\n     * @param buffer - the buffer to bind to the renderer\n     */\n    bind(buffer: Buffer): void\n    {\n        const { gl, CONTEXT_UID } = this;\n\n        const glBuffer = buffer._glBuffers[CONTEXT_UID] || this.createGLBuffer(buffer);\n\n        gl.bindBuffer(buffer.type, glBuffer.buffer);\n    }\n\n    /**\n     * Binds an uniform buffer to at the given index.\n     *\n     * A cache is used so a buffer will not be bound again if already bound.\n     * @param buffer - the buffer to bind\n     * @param index - the base index to bind it to.\n     */\n    bindBufferBase(buffer: Buffer, index: number): void\n    {\n        const { gl, CONTEXT_UID } = this;\n\n        if (this.boundBufferBases[index] !== buffer)\n        {\n            const glBuffer = buffer._glBuffers[CONTEXT_UID] || this.createGLBuffer(buffer);\n\n            this.boundBufferBases[index] = buffer;\n\n            gl.bindBufferBase(gl.UNIFORM_BUFFER, index, glBuffer.buffer);\n        }\n    }\n\n    /**\n     * Binds a buffer whilst also binding its range.\n     * This will make the buffer start from the offset supplied rather than 0 when it is read.\n     * @param buffer - the buffer to bind\n     * @param index - the base index to bind at, defaults to 0\n     * @param offset - the offset to bind at (this is blocks of 256). 0 = 0, 1 = 256, 2 = 512 etc\n     */\n    bindBufferRange(buffer: Buffer, index?: number, offset?: number): void\n    {\n        const { gl, CONTEXT_UID } = this;\n\n        offset = offset || 0;\n\n        const glBuffer = buffer._glBuffers[CONTEXT_UID] || this.createGLBuffer(buffer);\n\n        gl.bindBufferRange(gl.UNIFORM_BUFFER, index || 0, glBuffer.buffer, offset * 256, 256);\n    }\n\n    /**\n     * Will ensure the data in the buffer is uploaded to the GPU.\n     * @param {PIXI.Buffer} buffer - the buffer to update\n     */\n    update(buffer: Buffer): void\n    {\n        const { gl, CONTEXT_UID } = this;\n\n        const glBuffer = buffer._glBuffers[CONTEXT_UID];\n\n        if (buffer._updateID === glBuffer.updateID)\n        {\n            return;\n        }\n\n        glBuffer.updateID = buffer._updateID;\n\n        gl.bindBuffer(buffer.type, glBuffer.buffer);\n\n        if (glBuffer.byteLength >= buffer.data.byteLength)\n        {\n            // offset is always zero for now!\n            gl.bufferSubData(buffer.type, 0, buffer.data);\n        }\n        else\n        {\n            const drawType = buffer.static ? gl.STATIC_DRAW : gl.DYNAMIC_DRAW;\n\n            glBuffer.byteLength = buffer.data.byteLength;\n            gl.bufferData(buffer.type, buffer.data, drawType);\n        }\n    }\n\n    /**\n     * Disposes buffer\n     * @param {PIXI.Buffer} buffer - buffer with data\n     * @param {boolean} [contextLost=false] - If context was lost, we suppress deleteVertexArray\n     */\n    dispose(buffer: Buffer, contextLost?: boolean): void\n    {\n        if (!this.managedBuffers[buffer.id])\n        {\n            return;\n        }\n\n        delete this.managedBuffers[buffer.id];\n\n        const glBuffer = buffer._glBuffers[this.CONTEXT_UID];\n        const gl = this.gl;\n\n        buffer.disposeRunner.remove(this);\n\n        if (!glBuffer)\n        {\n            return;\n        }\n\n        if (!contextLost)\n        {\n            gl.deleteBuffer(glBuffer.buffer);\n        }\n\n        delete buffer._glBuffers[this.CONTEXT_UID];\n    }\n\n    /**\n     * dispose all WebGL resources of all managed buffers\n     * @param {boolean} [contextLost=false] - If context was lost, we suppress `gl.delete` calls\n     */\n    disposeAll(contextLost?: boolean): void\n    {\n        const all: Array<any> = Object.keys(this.managedBuffers);\n\n        for (let i = 0; i < all.length; i++)\n        {\n            this.dispose(this.managedBuffers[all[i]], contextLost);\n        }\n    }\n\n    /**\n     * creates and attaches a GLBuffer object tied to the current context.\n     * @param buffer\n     * @protected\n     */\n    protected createGLBuffer(buffer: Buffer): GLBuffer\n    {\n        const { CONTEXT_UID, gl } = this;\n\n        buffer._glBuffers[CONTEXT_UID] = new GLBuffer(gl.createBuffer());\n\n        this.managedBuffers[buffer.id] = buffer;\n\n        buffer.disposeRunner.add(this);\n\n        return buffer._glBuffers[CONTEXT_UID];\n    }\n}\n", "import { AbstractRenderer } from './AbstractRenderer';\nimport { sayHello, isWebGLSupported, deprecation } from '@pixi/utils';\nimport { MaskSystem } from './mask/MaskSystem';\nimport { StencilSystem } from './mask/StencilSystem';\nimport { ScissorSystem } from './mask/ScissorSystem';\nimport { FilterSystem } from './filters/FilterSystem';\nimport { FramebufferSystem } from './framebuffer/FramebufferSystem';\nimport { RenderTextureSystem } from './renderTexture/RenderTextureSystem';\nimport { TextureSystem } from './textures/TextureSystem';\nimport { ProjectionSystem } from './projection/ProjectionSystem';\nimport { StateSystem } from './state/StateSystem';\nimport { GeometrySystem } from './geometry/GeometrySystem';\nimport { ShaderSystem } from './shader/ShaderSystem';\nimport { ContextSystem } from './context/ContextSystem';\nimport { BatchSystem } from './batch/BatchSystem';\nimport { TextureGCSystem } from './textures/TextureGCSystem';\nimport { MSAA_QUALITY, RENDERER_TYPE } from '@pixi/constants';\nimport { UniformGroup } from './shader/UniformGroup';\nimport type { Rectangle } from '@pixi/math';\nimport { Matrix } from '@pixi/math';\nimport { Runner } from '@pixi/runner';\nimport { BufferSystem } from './geometry/BufferSystem';\nimport { RenderTexture } from './renderTexture/RenderTexture';\n\nimport type { SCALE_MODES } from '@pixi/constants';\nimport type { IRendererOptions, IRendererPlugins, IRendererRenderOptions,\n    IGenerateTextureOptions } from './AbstractRenderer';\nimport type { ISystemConstructor } from './ISystem';\nimport type { IRenderingContext } from './IRenderingContext';\nimport type { IRenderableObject } from './IRenderableObject';\nimport { extensions, ExtensionType } from '@pixi/extensions';\n\nexport interface IRendererPluginConstructor\n{\n    new (renderer: Renderer, options?: any): IRendererPlugin;\n}\n\nexport interface IRendererPlugin\n{\n    destroy(): void;\n}\n\n/**\n * The Renderer draws the scene and all its content onto a WebGL enabled canvas.\n *\n * This renderer should be used for browsers that support WebGL.\n *\n * This renderer works by automatically managing WebGLBatchesm, so no need for Sprite Batches or Sprite Clouds.\n * Don't forget to add the view to your DOM or you will not see anything!\n *\n * Renderer is composed of systems that manage specific tasks. The following systems are added by default\n * whenever you create a renderer:\n *\n * | System                               | Description                                                                   |\n * | ------------------------------------ | ----------------------------------------------------------------------------- |\n * | {@link PIXI.BatchSystem}             | This manages object renderers that defer rendering until a flush.             |\n * | {@link PIXI.ContextSystem}           | This manages the WebGL context and extensions.                                |\n * | {@link PIXI.EventSystem}             | This manages UI events.                                                       |\n * | {@link PIXI.FilterSystem}            | This manages the filtering pipeline for post-processing effects.              |\n * | {@link PIXI.FramebufferSystem}       | This manages framebuffers, which are used for offscreen rendering.            |\n * | {@link PIXI.GeometrySystem}          | This manages geometries & buffers, which are used to draw object meshes.      |\n * | {@link PIXI.MaskSystem}              | This manages masking operations.                                              |\n * | {@link PIXI.ProjectionSystem}        | This manages the `projectionMatrix`, used by shaders to get NDC coordinates.  |\n * | {@link PIXI.RenderTextureSystem}     | This manages render-textures, which are an abstraction over framebuffers.     |\n * | {@link PIXI.ScissorSystem}           | This handles scissor masking, and is used internally by {@link MaskSystem}    |\n * | {@link PIXI.ShaderSystem}            | This manages shaders, programs that run on the GPU to calculate 'em pixels.   |\n * | {@link PIXI.StateSystem}             | This manages the WebGL state variables like blend mode, depth testing, etc.   |\n * | {@link PIXI.StencilSystem}           | This handles stencil masking, and is used internally by {@link MaskSystem}    |\n * | {@link PIXI.TextureSystem}           | This manages textures and their resources on the GPU.                         |\n * | {@link PIXI.TextureGCSystem}         | This will automatically remove textures from the GPU if they are not used.    |\n *\n * The breadth of the API surface provided by the renderer is contained within these systems.\n * @memberof PIXI\n */\nexport class Renderer extends AbstractRenderer\n{\n    /**\n     * WebGL context, set by {@link PIXI.ContextSystem this.context}.\n     * @readonly\n     * @member {WebGLRenderingContext}\n     */\n    public gl: IRenderingContext;\n\n    /** Global uniforms */\n    public globalUniforms: UniformGroup;\n\n    /** Unique UID assigned to the renderer's WebGL context. */\n    public CONTEXT_UID: number;\n\n    /**\n     * Flag if we are rendering to the screen vs renderTexture\n     * @readonly\n     * @default true\n     */\n    public renderingToScreen: boolean;\n\n    /**\n     * The number of msaa samples of the canvas.\n     * @readonly\n     */\n    public multisample: MSAA_QUALITY;\n    // systems\n\n    /**\n     * Mask system instance\n     * @readonly\n     */\n    public mask: MaskSystem;\n\n    /**\n     * Context system instance\n     * @readonly\n     */\n    public context: ContextSystem;\n\n    /**\n     * State system instance\n     * @readonly\n     */\n    public state: StateSystem;\n\n    /**\n     * Shader system instance\n     * @readonly\n     */\n    public shader: ShaderSystem;\n\n    /**\n     * Texture system instance\n     * @readonly\n     */\n    public texture: TextureSystem;\n\n    /**\n     * Buffer system instance\n     * @readonly\n     */\n    public buffer: BufferSystem;\n\n    /**\n     * Geometry system instance\n     * @readonly\n     */\n    public geometry: GeometrySystem;\n\n    /**\n     * Framebuffer system instance\n     * @readonly\n     */\n    public framebuffer: FramebufferSystem;\n\n    /**\n     * Scissor system instance\n     * @readonly\n     */\n    public scissor: ScissorSystem;\n\n    /**\n     * Stencil system instance\n     * @readonly\n     */\n    public stencil: StencilSystem;\n\n    /**\n     * Projection system instance\n     * @readonly\n     */\n    public projection: ProjectionSystem;\n\n    /**\n     * Texture garbage collector system instance\n     * @readonly\n     */\n    public textureGC: TextureGCSystem;\n\n    /**\n     * Filter system instance\n     * @readonly\n     */\n    public filter: FilterSystem;\n\n    /**\n     * RenderTexture system instance\n     * @readonly\n     */\n    public renderTexture: RenderTextureSystem;\n\n    /**\n     * Batch system instance\n     * @readonly\n     */\n    public batch: BatchSystem;\n\n    /**\n     * Internal signal instances of **runner**, these\n     * are assigned to each system created.\n     * @see PIXI.Runner\n     * @name runners\n     * @private\n     * @type {object}\n     * @readonly\n     * @property {PIXI.Runner} destroy - Destroy runner\n     * @property {PIXI.Runner} contextChange - Context change runner\n     * @property {PIXI.Runner} reset - Reset runner\n     * @property {PIXI.Runner} update - Update runner\n     * @property {PIXI.Runner} postrender - Post-render runner\n     * @property {PIXI.Runner} prerender - Pre-render runner\n     * @property {PIXI.Runner} resize - Resize runner\n     */\n    runners: {[key: string]: Runner};\n\n    /**\n     * Create renderer if WebGL is available. Overrideable\n     * by the **@pixi/canvas-renderer** package to allow fallback.\n     * throws error if WebGL is not available.\n     * @param options\n     * @private\n     */\n    static create(options?: IRendererOptions): AbstractRenderer\n    {\n        if (isWebGLSupported())\n        {\n            return new Renderer(options);\n        }\n\n        throw new Error('WebGL unsupported in this browser, use \"pixi.js-legacy\" for fallback canvas2d support.');\n    }\n\n    /**\n     * @param {PIXI.IRendererOptions} [options] - The optional renderer parameters.\n     * @param {boolean} [options.antialias=false] -\n     *  **WebGL Only.** Whether to enable anti-aliasing. This may affect performance.\n     * @param {boolean} [options.autoDensity=false] -\n     *  Whether the CSS dimensions of the renderer's view should be resized automatically.\n     * @param {number} [options.backgroundAlpha=1] -\n     *  Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n     * @param {number} [options.backgroundColor=0x000000] -\n     *  The background color used to clear the canvas. It accepts hex numbers (e.g. `0xff0000`).\n     * @param {boolean} [options.clearBeforeRender=true] - Whether to clear the canvas before new render passes.\n     * @param {PIXI.IRenderingContext} [options.context] - **WebGL Only.** User-provided WebGL rendering context object.\n     * @param {number} [options.height=600] - The height of the renderer's view.\n     * @param {string} [options.powerPreference] -\n     *  **WebGL Only.** A hint indicating what configuration of GPU is suitable for the WebGL context,\n     *  can be `'default'`, `'high-performance'` or `'low-power'`.\n     *  Setting to `'high-performance'` will prioritize rendering performance over power consumption,\n     *  while setting to `'low-power'` will prioritize power saving over rendering performance.\n     * @param {boolean} [options.premultipliedAlpha=true] -\n     *  **WebGL Only.** Whether the compositor will assume the drawing buffer contains colors with premultiplied alpha.\n     * @param {boolean} [options.preserveDrawingBuffer=false] -\n     *  **WebGL Only.** Whether to enable drawing buffer preservation. If enabled, the drawing buffer will preserve\n     *  its value until cleared or overwritten. Enable this if you need to call `toDataUrl` on the WebGL context.\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] -\n     *  The resolution / device pixel ratio of the renderer.\n     * @param {boolean} [options.transparent] -\n     *  **Deprecated since 6.0.0, Use `backgroundAlpha` instead.** \\\n     *  `true` sets `backgroundAlpha` to `0`, `false` sets `backgroundAlpha` to `1`.\n     * @param {boolean|'notMultiplied'} [options.useContextAlpha=true] -\n     *  Pass-through value for canvas' context attribute `alpha`. This option is for cases where the\n     *  canvas needs to be opaque, possibly for performance reasons on some older devices.\n     *  If you want to set transparency, please use `backgroundAlpha`. \\\n     *  **WebGL Only:** When set to `'notMultiplied'`, the canvas' context attribute `alpha` will be\n     *  set to `true` and `premultipliedAlpha` will be to `false`.\n     * @param {HTMLCanvasElement} [options.view=null] -\n     *  The canvas to use as the view. If omitted, a new canvas will be created.\n     * @param {number} [options.width=800] - The width of the renderer's view.\n     */\n    constructor(options?: IRendererOptions)\n    {\n        super(RENDERER_TYPE.WEBGL, options);\n\n        // the options will have been modified here in the super constructor with pixi's default settings..\n        options = this.options;\n\n        this.gl = null;\n\n        this.CONTEXT_UID = 0;\n\n        this.runners = {\n            destroy: new Runner('destroy'),\n            contextChange: new Runner('contextChange'),\n            reset: new Runner('reset'),\n            update: new Runner('update'),\n            postrender: new Runner('postrender'),\n            prerender: new Runner('prerender'),\n            resize: new Runner('resize'),\n        };\n\n        this.runners.contextChange.add(this);\n\n        this.globalUniforms = new UniformGroup({\n            projectionMatrix: new Matrix(),\n        }, true);\n\n        this.addSystem(MaskSystem, 'mask')\n            .addSystem(ContextSystem, 'context')\n            .addSystem(StateSystem, 'state')\n            .addSystem(ShaderSystem, 'shader')\n            .addSystem(TextureSystem, 'texture')\n            .addSystem(BufferSystem, 'buffer')\n            .addSystem(GeometrySystem, 'geometry')\n            .addSystem(FramebufferSystem, 'framebuffer')\n            .addSystem(ScissorSystem, 'scissor')\n            .addSystem(StencilSystem, 'stencil')\n            .addSystem(ProjectionSystem, 'projection')\n            .addSystem(TextureGCSystem, 'textureGC')\n            .addSystem(FilterSystem, 'filter')\n            .addSystem(RenderTextureSystem, 'renderTexture')\n            .addSystem(BatchSystem, 'batch');\n\n        this.initPlugins(Renderer.__plugins);\n\n        this.multisample = undefined;\n\n        /*\n         * The options passed in to create a new WebGL context.\n         */\n        if (options.context)\n        {\n            this.context.initFromContext(options.context);\n        }\n        else\n        {\n            this.context.initFromOptions({\n                alpha: !!this.useContextAlpha,\n                antialias: options.antialias,\n                premultipliedAlpha: this.useContextAlpha && this.useContextAlpha !== 'notMultiplied',\n                stencil: true,\n                preserveDrawingBuffer: options.preserveDrawingBuffer,\n                powerPreference: this.options.powerPreference,\n            });\n        }\n\n        this.renderingToScreen = true;\n\n        sayHello(this.context.webGLVersion === 2 ? 'WebGL 2' : 'WebGL 1');\n\n        this.resize(this.options.width, this.options.height);\n    }\n\n    protected contextChange(): void\n    {\n        const gl = this.gl;\n\n        let samples;\n\n        if (this.context.webGLVersion === 1)\n        {\n            const framebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n            samples = gl.getParameter(gl.SAMPLES);\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n        }\n        else\n        {\n            const framebuffer = gl.getParameter(gl.DRAW_FRAMEBUFFER_BINDING);\n\n            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\n\n            samples = gl.getParameter(gl.SAMPLES);\n\n            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, framebuffer);\n        }\n\n        if (samples >= MSAA_QUALITY.HIGH)\n        {\n            this.multisample = MSAA_QUALITY.HIGH;\n        }\n        else if (samples >= MSAA_QUALITY.MEDIUM)\n        {\n            this.multisample = MSAA_QUALITY.MEDIUM;\n        }\n        else if (samples >= MSAA_QUALITY.LOW)\n        {\n            this.multisample = MSAA_QUALITY.LOW;\n        }\n        else\n        {\n            this.multisample = MSAA_QUALITY.NONE;\n        }\n    }\n\n    /**\n     * Add a new system to the renderer.\n     * @param ClassRef - Class reference\n     * @param name - Property name for system, if not specified\n     *        will use a static `name` property on the class itself. This\n     *        name will be assigned as s property on the Renderer so make\n     *        sure it doesn't collide with properties on Renderer.\n     * @returns Return instance of renderer\n     */\n    addSystem(ClassRef: ISystemConstructor, name: string): this\n    {\n        const system = new ClassRef(this);\n\n        if ((this as any)[name])\n        {\n            throw new Error(`Whoops! The name \"${name}\" is already in use`);\n        }\n\n        (this as any)[name] = system;\n\n        for (const i in this.runners)\n        {\n            this.runners[i].add(system);\n        }\n\n        /**\n         * Fired after rendering finishes.\n         * @event PIXI.Renderer#postrender\n         */\n\n        /**\n         * Fired before rendering starts.\n         * @event PIXI.Renderer#prerender\n         */\n\n        /**\n         * Fired when the WebGL context is set.\n         * @event PIXI.Renderer#context\n         * @param {WebGLRenderingContext} gl - WebGL context.\n         */\n\n        return this;\n    }\n\n    /**\n     * Renders the object to its WebGL view.\n     * @param displayObject - The object to be rendered.\n     * @param {object} [options] - Object to use for render options.\n     * @param {PIXI.RenderTexture} [options.renderTexture] - The render texture to render to.\n     * @param {boolean} [options.clear=true] - Should the canvas be cleared before the new render.\n     * @param {PIXI.Matrix} [options.transform] - A transform to apply to the render texture before rendering.\n     * @param {boolean} [options.skipUpdateTransform=false] - Should we skip the update transform pass?\n     */\n    render(displayObject: IRenderableObject, options?: IRendererRenderOptions): void;\n\n    /**\n     * Please use the `option` render arguments instead.\n     * @deprecated Since 6.0.0\n     * @param displayObject\n     * @param renderTexture\n     * @param clear\n     * @param transform\n     * @param skipUpdateTransform\n     */\n    render(displayObject: IRenderableObject, renderTexture?: RenderTexture,\n        clear?: boolean, transform?: Matrix, skipUpdateTransform?: boolean): void;\n\n    /**\n     * @ignore\n     */\n    render(displayObject: IRenderableObject, options?: IRendererRenderOptions | RenderTexture): void\n    {\n        let renderTexture: RenderTexture;\n        let clear: boolean;\n        let transform: Matrix;\n        let skipUpdateTransform: boolean;\n\n        if (options)\n        {\n            if (options instanceof RenderTexture)\n            {\n                // #if _DEBUG\n                deprecation('6.0.0', 'Renderer#render arguments changed, use options instead.');\n                // #endif\n\n                /* eslint-disable prefer-rest-params */\n                renderTexture = options;\n                clear = arguments[2];\n                transform = arguments[3];\n                skipUpdateTransform = arguments[4];\n                /* eslint-enable prefer-rest-params */\n            }\n            else\n            {\n                renderTexture = options.renderTexture;\n                clear = options.clear;\n                transform = options.transform;\n                skipUpdateTransform = options.skipUpdateTransform;\n            }\n        }\n\n        // can be handy to know!\n        this.renderingToScreen = !renderTexture;\n\n        this.runners.prerender.emit();\n        this.emit('prerender');\n\n        // apply a transform at a GPU level\n        this.projection.transform = transform;\n\n        // no point rendering if our context has been blown up!\n        if (this.context.isLost)\n        {\n            return;\n        }\n\n        if (!renderTexture)\n        {\n            this._lastObjectRendered = displayObject;\n        }\n\n        if (!skipUpdateTransform)\n        {\n            // update the scene graph\n            const cacheParent = displayObject.enableTempParent();\n\n            displayObject.updateTransform();\n            displayObject.disableTempParent(cacheParent);\n            // displayObject.hitArea = //TODO add a temp hit area\n        }\n\n        this.renderTexture.bind(renderTexture);\n        this.batch.currentRenderer.start();\n\n        if (clear !== undefined ? clear : this.clearBeforeRender)\n        {\n            this.renderTexture.clear();\n        }\n\n        displayObject.render(this);\n\n        // apply transform..\n        this.batch.currentRenderer.flush();\n\n        if (renderTexture)\n        {\n            renderTexture.baseTexture.update();\n        }\n\n        this.runners.postrender.emit();\n\n        // reset transform after render\n        this.projection.transform = null;\n\n        this.emit('postrender');\n    }\n\n    /**\n     * @override\n     * @ignore\n     */\n    generateTexture(displayObject: IRenderableObject,\n        options: IGenerateTextureOptions | SCALE_MODES = {},\n        resolution?: number, region?: Rectangle): RenderTexture\n    {\n        const renderTexture = super.generateTexture(displayObject, options as any, resolution, region);\n\n        this.framebuffer.blit();\n\n        return renderTexture;\n    }\n\n    /**\n     * Resizes the WebGL view to the specified width and height.\n     * @param desiredScreenWidth - The desired width of the screen.\n     * @param desiredScreenHeight - The desired height of the screen.\n     */\n    resize(desiredScreenWidth: number, desiredScreenHeight: number): void\n    {\n        super.resize(desiredScreenWidth, desiredScreenHeight);\n\n        this.runners.resize.emit(this.screen.height, this.screen.width);\n    }\n\n    /**\n     * Resets the WebGL state so you can render things however you fancy!\n     * @returns Returns itself.\n     */\n    reset(): this\n    {\n        this.runners.reset.emit();\n\n        return this;\n    }\n\n    /** Clear the frame buffer. */\n    clear(): void\n    {\n        this.renderTexture.bind();\n        this.renderTexture.clear();\n    }\n\n    /**\n     * Removes everything from the renderer (event listeners, spritebatch, etc...)\n     * @param [removeView=false] - Removes the Canvas element from the DOM.\n     *  See: https://github.com/pixijs/pixi.js/issues/2233\n     */\n    destroy(removeView?: boolean): void\n    {\n        this.runners.destroy.emit();\n\n        for (const r in this.runners)\n        {\n            this.runners[r].destroy();\n        }\n\n        // call base destroy\n        super.destroy(removeView);\n\n        // TODO nullify all the managers..\n        this.gl = null;\n    }\n\n    /**\n     * Please use `plugins.extract` instead.\n     * @member {PIXI.Extract} extract\n     * @deprecated since 6.0.0\n     * @readonly\n     */\n    public get extract(): any\n    {\n        // #if _DEBUG\n        deprecation('6.0.0', 'Renderer#extract has been deprecated, please use Renderer#plugins.extract instead.');\n        // #endif\n\n        return this.plugins.extract;\n    }\n\n    /**\n     * Collection of installed plugins. These are included by default in PIXI, but can be excluded\n     * by creating a custom build. Consult the README for more information about creating custom\n     * builds and excluding plugins.\n     * @readonly\n     * @property {PIXI.AccessibilityManager} accessibility Support tabbing interactive elements.\n     * @property {PIXI.Extract} extract Extract image data from renderer.\n     * @property {PIXI.InteractionManager} interaction Handles mouse, touch and pointer events.\n     * @property {PIXI.ParticleRenderer} particle Renderer for ParticleContainer objects.\n     * @property {PIXI.Prepare} prepare Pre-render display objects.\n     * @property {PIXI.BatchRenderer} batch Batching of Sprite, Graphics and Mesh objects.\n     * @property {PIXI.TilingSpriteRenderer} tilingSprite Renderer for TilingSprite objects.\n     */\n    static __plugins: IRendererPlugins = {};\n\n    /**\n     * Use the {@link PIXI.extensions.add} API to register plugins.\n     * @deprecated since 6.5.0\n     * @param pluginName - The name of the plugin.\n     * @param ctor - The constructor function or class for the plugin.\n     */\n    static registerPlugin(pluginName: string, ctor: IRendererPluginConstructor): void\n    {\n        // #if _DEBUG\n        deprecation('6.5.0', 'Renderer.registerPlugin() has been deprecated, please use extensions.add() instead.');\n        // #endif\n        extensions.add({\n            name: pluginName,\n            type: ExtensionType.RendererPlugin,\n            ref: ctor,\n        });\n    }\n}\n\n// Handle registration of extensions\nextensions.handleByMap(ExtensionType.RendererPlugin, Renderer.__plugins);\n", "import { Renderer } from './Renderer';\nimport type { AbstractRenderer, IRendererOptions } from './AbstractRenderer';\n\n/**\n * Renderer options supplied to `autoDetectRenderer`.\n * @memberof PIXI\n */\nexport interface IRendererOptionsAuto extends IRendererOptions\n{\n    forceCanvas?: boolean;\n}\n\n/**\n * This helper function will automatically detect which renderer you should be using.\n * WebGL is the preferred renderer as it is a lot faster. If WebGL is not supported by\n * the browser then this function will return a canvas renderer.\n * @memberof PIXI\n * @function autoDetectRenderer\n * @param {PIXI.IRendererOptionsAuto} [options] - The optional renderer parameters.\n * @param {boolean} [options.antialias=false] -\n *  **WebGL Only.** Whether to enable anti-aliasing. This may affect performance.\n * @param {boolean} [options.autoDensity=false] -\n *  Whether the CSS dimensions of the renderer's view should be resized automatically.\n * @param {number} [options.backgroundAlpha=1] -\n *  Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n * @param {number} [options.backgroundColor=0x000000] -\n *  The background color used to clear the canvas. It accepts hex numbers (e.g. `0xff0000`).\n * @param {boolean} [options.clearBeforeRender=true] - Whether to clear the canvas before new render passes.\n * @param {PIXI.IRenderingContext} [options.context] - **WebGL Only.** User-provided WebGL rendering context object.\n * @param {boolean} [options.forceCanvas=false] -\n *  Force using {@link PIXI.CanvasRenderer}, even if WebGL is available. This option only is available when\n *  using **pixi.js-legacy** or **@pixi/canvas-renderer** packages, otherwise it is ignored.\n * @param {number} [options.height=600] - The height of the renderer's view.\n * @param {string} [options.powerPreference] -\n *  **WebGL Only.** A hint indicating what configuration of GPU is suitable for the WebGL context,\n *  can be `'default'`, `'high-performance'` or `'low-power'`.\n *  Setting to `'high-performance'` will prioritize rendering performance over power consumption,\n *  while setting to `'low-power'` will prioritize power saving over rendering performance.\n * @param {boolean} [options.premultipliedAlpha=true] -\n *  **WebGL Only.** Whether the compositor will assume the drawing buffer contains colors with premultiplied alpha.\n * @param {boolean} [options.preserveDrawingBuffer=false] -\n *  **WebGL Only.** Whether to enable drawing buffer preservation. If enabled, the drawing buffer will preserve\n *  its value until cleared or overwritten. Enable this if you need to call `toDataUrl` on the WebGL context.\n * @param {number} [options.resolution=PIXI.settings.RESOLUTION] -\n *  The resolution / device pixel ratio of the renderer.\n * @param {boolean} [options.transparent] -\n *  **Deprecated since 6.0.0, Use `backgroundAlpha` instead.** \\\n *  `true` sets `backgroundAlpha` to `0`, `false` sets `backgroundAlpha` to `1`.\n * @param {boolean|'notMultiplied'} [options.useContextAlpha=true] -\n *  Pass-through value for canvas' context attribute `alpha`. This option is for cases where the\n *  canvas needs to be opaque, possibly for performance reasons on some older devices.\n *  If you want to set transparency, please use `backgroundAlpha`. \\\n *  **WebGL Only:** When set to `'notMultiplied'`, the canvas' context attribute `alpha` will be\n *  set to `true` and `premultipliedAlpha` will be to `false`.\n * @param {HTMLCanvasElement} [options.view=null] -\n *  The canvas to use as the view. If omitted, a new canvas will be created.\n * @param {number} [options.width=800] - The width of the renderer's view.\n * @returns {PIXI.Renderer|PIXI.CanvasRenderer}\n *  Returns {@link PIXI.Renderer} if WebGL is available, otherwise {@link PIXI.CanvasRenderer}.\n */\nexport function autoDetectRenderer(options?: IRendererOptionsAuto): AbstractRenderer\n{\n    return Renderer.create(options);\n}\n", "import $defaultVertex from './default.vert';\nimport $defaultFilterVertex from './defaultFilter.vert';\n\n/**\n * Default vertex shader\n * @memberof PIXI\n * @member {string} defaultVertex\n */\n\n/**\n * Default filter vertex shader\n * @memberof PIXI\n * @member {string} defaultFilterVertex\n */\n\n// NOTE: This black magic is so that @microsoft/api-extractor does not complain! This explicitly specifies the types\n// of defaultVertex, defaultFilterVertex.\nconst defaultVertex: string = $defaultVertex;\nconst defaultFilterVertex: string = $defaultFilterVertex;\n\nexport { defaultVertex, defaultFilterVertex };\n", "import type { Renderer } from './Renderer';\nimport { deprecation } from '@pixi/utils';\n\n/**\n * Interface for systems used by the {@link PIXI.Renderer}.\n * @memberof PIXI\n */\nexport interface ISystem\n{\n    /** Generic destroy methods to be overridden by the subclass */\n    destroy(): void;\n}\n\n/**\n * Types for system and pipe classes.\n * @ignore\n */\nexport interface ISystemConstructor<R = Renderer>\n{\n    new (renderer: R): ISystem;\n}\n\n/**\n * Use the ISystem interface instead.\n * @deprecated since 6.1.0\n * @memberof PIXI\n */\nexport class System implements ISystem\n{\n    /** Reference to the main renderer */\n    public renderer: Renderer;\n\n    /**\n     * @param renderer - Reference to Renderer\n     */\n    constructor(renderer: Renderer)\n    {\n        // #if _DEBUG\n        deprecation('6.1.0', 'System class is deprecated, implemement ISystem interface instead.');\n        // #endif\n\n        this.renderer = renderer;\n    }\n\n    /** Destroy and don't use after this. */\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n", "import { DRAW_MODES } from '@pixi/constants';\n\nimport type { BLEND_MODES } from '@pixi/constants';\nimport type { BatchTextureArray } from './BatchTextureArray';\n\n/**\n * Used by the batcher to draw batches.\n * Each one of these contains all information required to draw a bound geometry.\n * @memberof PIXI\n */\nexport class BatchDrawCall\n{\n    texArray: BatchTextureArray;\n    type: DRAW_MODES;\n    blend: BLEND_MODES;\n    start: number;\n    size: number;\n\n    /** Data for uniforms or custom webgl state. */\n    data: any;\n\n    constructor()\n    {\n        this.texArray = null;\n        this.blend = 0;\n        this.type = DRAW_MODES.TRIANGLES;\n\n        this.start = 0;\n        this.size = 0;\n\n        this.data = null;\n    }\n}\n", "import type { BaseTexture } from '@pixi/core';\n\n/**\n * Used by the batcher to build texture batches.\n * Holds list of textures and their respective locations.\n * @memberof PIXI\n */\nexport class BatchTextureArray\n{\n    /** Inside textures array. */\n    public elements: BaseTexture[];\n\n    /** Respective locations for textures. */\n    public ids: number[];\n\n    /** Number of filled elements. */\n    public count: number;\n\n    constructor()\n    {\n        this.elements = [];\n        this.ids = [];\n        this.count = 0;\n    }\n\n    clear(): void\n    {\n        for (let i = 0; i < this.count; i++)\n        {\n            this.elements[i] = null;\n        }\n        this.count = 0;\n    }\n}\n", "import type { ITypedArray } from './Buffer';\n\n/**\n * Flexible wrapper around `ArrayBuffer` that also provides typed array views on demand.\n * @memberof PIXI\n */\nexport class ViewableBuffer\n{\n    public size: number;\n\n    /** Underlying `ArrayBuffer` that holds all the data and is of capacity `this.size`. */\n    public rawBinaryData: ArrayBuffer;\n\n    /** View on the raw binary data as a `Uint32Array`. */\n    public uint32View: Uint32Array;\n\n    /** View on the raw binary data as a `Float32Array`. */\n    public float32View: Float32Array;\n\n    private _int8View: Int8Array;\n    private _uint8View: Uint8Array;\n    private _int16View: Int16Array;\n    private _uint16View: Uint16Array;\n    private _int32View: Int32Array;\n\n    /**\n     * @param length - The size of the buffer in bytes.\n     */\n    constructor(length: number);\n\n    /**\n     * @param arrayBuffer - The source array buffer.\n     */\n    constructor(arrayBuffer: ArrayBuffer);\n\n    constructor(sizeOrBuffer: number | ArrayBuffer | Uint8Array)\n    {\n        if (typeof sizeOrBuffer === 'number')\n        {\n            this.rawBinaryData = new ArrayBuffer(sizeOrBuffer);\n        }\n        else if (sizeOrBuffer instanceof Uint8Array)\n        {\n            this.rawBinaryData = sizeOrBuffer.buffer;\n        }\n        else\n        {\n            this.rawBinaryData = sizeOrBuffer;\n        }\n\n        this.uint32View = new Uint32Array(this.rawBinaryData);\n        this.float32View = new Float32Array(this.rawBinaryData);\n    }\n\n    /** View on the raw binary data as a `Int8Array`. */\n    get int8View(): Int8Array\n    {\n        if (!this._int8View)\n        {\n            this._int8View = new Int8Array(this.rawBinaryData);\n        }\n\n        return this._int8View;\n    }\n\n    /** View on the raw binary data as a `Uint8Array`. */\n    get uint8View(): Uint8Array\n    {\n        if (!this._uint8View)\n        {\n            this._uint8View = new Uint8Array(this.rawBinaryData);\n        }\n\n        return this._uint8View;\n    }\n\n    /**  View on the raw binary data as a `Int16Array`. */\n    get int16View(): Int16Array\n    {\n        if (!this._int16View)\n        {\n            this._int16View = new Int16Array(this.rawBinaryData);\n        }\n\n        return this._int16View;\n    }\n\n    /** View on the raw binary data as a `Uint16Array`. */\n    get uint16View(): Uint16Array\n    {\n        if (!this._uint16View)\n        {\n            this._uint16View = new Uint16Array(this.rawBinaryData);\n        }\n\n        return this._uint16View;\n    }\n\n    /** View on the raw binary data as a `Int32Array`. */\n    get int32View(): Int32Array\n    {\n        if (!this._int32View)\n        {\n            this._int32View = new Int32Array(this.rawBinaryData);\n        }\n\n        return this._int32View;\n    }\n\n    /**\n     * Returns the view of the given type.\n     * @param type - One of `int8`, `uint8`, `int16`,\n     *    `uint16`, `int32`, `uint32`, and `float32`.\n     * @returns - typed array of given type\n     */\n    view(type: string): ITypedArray\n    {\n        return (this as any)[`${type}View`];\n    }\n\n    /** Destroys all buffer references. Do not use after calling this. */\n    destroy(): void\n    {\n        this.rawBinaryData = null;\n        this._int8View = null;\n        this._uint8View = null;\n        this._int16View = null;\n        this._uint16View = null;\n        this._int32View = null;\n        this.uint32View = null;\n        this.float32View = null;\n    }\n\n    static sizeOf(type: string): number\n    {\n        switch (type)\n        {\n            case 'int8':\n            case 'uint8':\n                return 1;\n            case 'int16':\n            case 'uint16':\n                return 2;\n            case 'int32':\n            case 'uint32':\n            case 'float32':\n                return 4;\n            default:\n                throw new Error(`${type} isn't a valid view type`);\n        }\n    }\n}\n", "import { BatchDrawCall } from './BatchDrawCall';\nimport { BatchTextureArray } from './BatchTextureArray';\nimport { BaseTexture } from '../textures/BaseTexture';\nimport { ObjectRenderer } from './ObjectRenderer';\nimport { State } from '../state/State';\nimport { ViewableBuffer } from '../geometry/ViewableBuffer';\n\nimport { checkMaxIfStatementsInShader } from '../shader/utils/checkMaxIfStatementsInShader';\n\nimport { settings } from '@pixi/settings';\nimport { premultiplyBlendMode, premultiplyTint, nextPow2, log2 } from '@pixi/utils';\nimport { ENV } from '@pixi/constants';\n\nimport type { Renderer } from '../Renderer';\nimport type { Shader } from '../shader/Shader';\nimport type { BatchShaderGenerator } from './BatchShaderGenerator';\nimport type { BatchGeometry } from './BatchGeometry';\nimport type { Texture } from '../textures/Texture';\nimport type { BLEND_MODES } from '@pixi/constants';\n\n/**\n * Interface for elements like Sprite, Mesh etc. for batching.\n * @memberof PIXI\n */\nexport interface IBatchableElement\n{\n    _texture: Texture;\n    vertexData: Float32Array;\n    indices: Uint16Array | Uint32Array | Array<number>;\n    uvs: Float32Array;\n    worldAlpha: number;\n    _tintRGB: number;\n    blendMode: BLEND_MODES;\n}\n\n/**\n * Renderer dedicated to drawing and batching sprites.\n *\n * This is the default batch renderer. It buffers objects\n * with texture-based geometries and renders them in\n * batches. It uploads multiple textures to the GPU to\n * reduce to the number of draw calls.\n * @memberof PIXI\n */\nexport class AbstractBatchRenderer extends ObjectRenderer\n{\n    /** The WebGL state in which this renderer will work. */\n    public readonly state: State;\n\n    /**\n     * The number of bufferable objects before a flush\n     * occurs automatically.\n     * @default settings.SPRITE_BATCH_SIZE * 4\n     */\n    public size: number;\n\n    /**\n     * Maximum number of textures that can be uploaded to\n     * the GPU under the current context. It is initialized\n     * properly in `this.contextChange`.\n     * @see PIXI.AbstractBatchRenderer#contextChange\n     * @readonly\n     */\n    public MAX_TEXTURES: number;\n\n    /**\n     * This is used to generate a shader that can\n     * color each vertex based on a `aTextureId`\n     * attribute that points to an texture in `uSampler`.\n     *\n     * This enables the objects with different textures\n     * to be drawn in the same draw call.\n     *\n     * You can customize your shader by creating your\n     * custom shader generator.\n     */\n    protected shaderGenerator: BatchShaderGenerator;\n\n    /**\n     * The class that represents the geometry of objects\n     * that are going to be batched with this.\n     * @member {object}\n     * @default PIXI.BatchGeometry\n     */\n    protected geometryClass: typeof BatchGeometry;\n\n    /**\n     * Size of data being buffered per vertex in the\n     * attribute buffers (in floats). By default, the\n     * batch-renderer plugin uses 6:\n     *\n     * | aVertexPosition | 2 |\n     * |-----------------|---|\n     * | aTextureCoords  | 2 |\n     * | aColor          | 1 |\n     * | aTextureId      | 1 |\n     * @readonly\n     */\n    protected vertexSize: number;\n\n    /** Total count of all vertices used by the currently buffered objects. */\n    protected _vertexCount: number;\n\n    /** Total count of all indices used by the currently buffered objects. */\n    protected _indexCount: number;\n\n    /**\n     * Buffer of objects that are yet to be rendered.\n     * @member {PIXI.DisplayObject[]}\n     */\n    protected _bufferedElements: Array<IBatchableElement>;\n\n    /**\n     * Data for texture batch builder, helps to save a bit of CPU on a pass.\n     * @member {PIXI.BaseTexture[]}\n     */\n    protected _bufferedTextures: Array<BaseTexture>;\n\n    /** Number of elements that are buffered and are waiting to be flushed. */\n    protected _bufferSize: number;\n\n    /**\n     * This shader is generated by `this.shaderGenerator`.\n     *\n     * It is generated specifically to handle the required\n     * number of textures being batched together.\n     */\n    protected _shader: Shader;\n\n    /**\n     * A flush may occur multiple times in a single\n     * frame. On iOS devices or when\n     * `settings.CAN_UPLOAD_SAME_BUFFER` is false, the\n     * batch renderer does not upload data to the same\n     * `WebGLBuffer` for performance reasons.\n     *\n     * This is the index into `packedGeometries` that points to\n     * geometry holding the most recent buffers.\n     */\n    protected _flushId: number;\n\n    /**\n     * Pool of `ViewableBuffer` objects that are sorted in\n     * order of increasing size. The flush method uses\n     * the buffer with the least size above the amount\n     * it requires. These are used for passing attributes.\n     *\n     * The first buffer has a size of 8; each subsequent\n     * buffer has double capacity of its previous.\n     * @member {PIXI.ViewableBuffer[]}\n     * @see PIXI.AbstractBatchRenderer#getAttributeBuffer\n     */\n    protected _aBuffers: Array<ViewableBuffer>;\n\n    /**\n     * Pool of `Uint16Array` objects that are sorted in\n     * order of increasing size. The flush method uses\n     * the buffer with the least size above the amount\n     * it requires. These are used for passing indices.\n     *\n     * The first buffer has a size of 12; each subsequent\n     * buffer has double capacity of its previous.\n     * @member {Uint16Array[]}\n     * @see PIXI.AbstractBatchRenderer#getIndexBuffer\n     */\n    protected _iBuffers: Array<Uint16Array>;\n    protected _dcIndex: number;\n    protected _aIndex: number;\n    protected _iIndex: number;\n    protected _attributeBuffer: ViewableBuffer;\n    protected _indexBuffer: Uint16Array;\n    protected _tempBoundTextures: BaseTexture[];\n\n    /**\n     * Pool of `this.geometryClass` geometry objects\n     * that store buffers. They are used to pass data\n     * to the shader on each draw call.\n     *\n     * These are never re-allocated again, unless a\n     * context change occurs; however, the pool may\n     * be expanded if required.\n     * @member {PIXI.Geometry[]}\n     * @see PIXI.AbstractBatchRenderer.contextChange\n     */\n    private _packedGeometries: Array<BatchGeometry>;\n\n    /**\n     * Size of `this._packedGeometries`. It can be expanded\n     * if more than `this._packedGeometryPoolSize` flushes\n     * occur in a single frame.\n     */\n    private _packedGeometryPoolSize: number;\n\n    /**\n     * This will hook onto the renderer's `contextChange`\n     * and `prerender` signals.\n     * @param {PIXI.Renderer} renderer - The renderer this works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        super(renderer);\n\n        this.shaderGenerator = null;\n        this.geometryClass = null;\n        this.vertexSize = null;\n        this.state = State.for2d();\n        this.size = settings.SPRITE_BATCH_SIZE * 4;\n        this._vertexCount = 0;\n        this._indexCount = 0;\n        this._bufferedElements = [];\n        this._bufferedTextures = [];\n        this._bufferSize = 0;\n        this._shader = null;\n        this._packedGeometries = [];\n        this._packedGeometryPoolSize = 2;\n        this._flushId = 0;\n        this._aBuffers = {} as any;\n        this._iBuffers = {} as any;\n\n        this.MAX_TEXTURES = 1;\n\n        this.renderer.on('prerender', this.onPrerender, this);\n        renderer.runners.contextChange.add(this);\n\n        this._dcIndex = 0;\n        this._aIndex = 0;\n        this._iIndex = 0;\n        this._attributeBuffer = null;\n        this._indexBuffer = null;\n        this._tempBoundTextures = [];\n    }\n\n    /**\n     * Handles the `contextChange` signal.\n     *\n     * It calculates `this.MAX_TEXTURES` and allocating the packed-geometry object pool.\n     */\n    contextChange(): void\n    {\n        const gl = this.renderer.gl;\n\n        if (settings.PREFER_ENV === ENV.WEBGL_LEGACY)\n        {\n            this.MAX_TEXTURES = 1;\n        }\n        else\n        {\n            // step 1: first check max textures the GPU can handle.\n            this.MAX_TEXTURES = Math.min(\n                gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS),\n                settings.SPRITE_MAX_TEXTURES);\n\n            // step 2: check the maximum number of if statements the shader can have too..\n            this.MAX_TEXTURES = checkMaxIfStatementsInShader(\n                this.MAX_TEXTURES, gl);\n        }\n\n        this._shader = this.shaderGenerator.generateShader(this.MAX_TEXTURES);\n\n        // we use the second shader as the first one depending on your browser\n        // may omit aTextureId as it is not used by the shader so is optimized out.\n        for (let i = 0; i < this._packedGeometryPoolSize; i++)\n        {\n            /* eslint-disable max-len */\n            this._packedGeometries[i] = new (this.geometryClass)();\n        }\n\n        this.initFlushBuffers();\n    }\n\n    /** Makes sure that static and dynamic flush pooled objects have correct dimensions. */\n    initFlushBuffers(): void\n    {\n        const {\n            _drawCallPool,\n            _textureArrayPool,\n        } = AbstractBatchRenderer;\n        // max draw calls\n        const MAX_SPRITES = this.size / 4;\n        // max texture arrays\n        const MAX_TA = Math.floor(MAX_SPRITES / this.MAX_TEXTURES) + 1;\n\n        while (_drawCallPool.length < MAX_SPRITES)\n        {\n            _drawCallPool.push(new BatchDrawCall());\n        }\n        while (_textureArrayPool.length < MAX_TA)\n        {\n            _textureArrayPool.push(new BatchTextureArray());\n        }\n        for (let i = 0; i < this.MAX_TEXTURES; i++)\n        {\n            this._tempBoundTextures[i] = null;\n        }\n    }\n\n    /** Handles the `prerender` signal. It ensures that flushes start from the first geometry object again. */\n    onPrerender(): void\n    {\n        this._flushId = 0;\n    }\n\n    /**\n     * Buffers the \"batchable\" object. It need not be rendered immediately.\n     * @param {PIXI.DisplayObject} element - the element to render when\n     *    using this renderer\n     */\n    render(element: IBatchableElement): void\n    {\n        if (!element._texture.valid)\n        {\n            return;\n        }\n\n        if (this._vertexCount + (element.vertexData.length / 2) > this.size)\n        {\n            this.flush();\n        }\n\n        this._vertexCount += element.vertexData.length / 2;\n        this._indexCount += element.indices.length;\n        this._bufferedTextures[this._bufferSize] = element._texture.baseTexture;\n        this._bufferedElements[this._bufferSize++] = element;\n    }\n\n    buildTexturesAndDrawCalls(): void\n    {\n        const {\n            _bufferedTextures: textures,\n            MAX_TEXTURES,\n        } = this;\n        const textureArrays = AbstractBatchRenderer._textureArrayPool;\n        const batch = this.renderer.batch;\n        const boundTextures = this._tempBoundTextures;\n        const touch = this.renderer.textureGC.count;\n\n        let TICK = ++BaseTexture._globalBatch;\n        let countTexArrays = 0;\n        let texArray = textureArrays[0];\n        let start = 0;\n\n        batch.copyBoundTextures(boundTextures, MAX_TEXTURES);\n\n        for (let i = 0; i < this._bufferSize; ++i)\n        {\n            const tex = textures[i];\n\n            textures[i] = null;\n            if (tex._batchEnabled === TICK)\n            {\n                continue;\n            }\n\n            if (texArray.count >= MAX_TEXTURES)\n            {\n                batch.boundArray(texArray, boundTextures, TICK, MAX_TEXTURES);\n                this.buildDrawCalls(texArray, start, i);\n                start = i;\n                texArray = textureArrays[++countTexArrays];\n                ++TICK;\n            }\n\n            tex._batchEnabled = TICK;\n            tex.touched = touch;\n            texArray.elements[texArray.count++] = tex;\n        }\n\n        if (texArray.count > 0)\n        {\n            batch.boundArray(texArray, boundTextures, TICK, MAX_TEXTURES);\n            this.buildDrawCalls(texArray, start, this._bufferSize);\n            ++countTexArrays;\n            ++TICK;\n        }\n\n        // Clean-up\n\n        for (let i = 0; i < boundTextures.length; i++)\n        {\n            boundTextures[i] = null;\n        }\n        BaseTexture._globalBatch = TICK;\n    }\n\n    /**\n     * Populating drawcalls for rendering\n     * @param texArray\n     * @param start\n     * @param finish\n     */\n    buildDrawCalls(texArray: BatchTextureArray, start: number, finish: number): void\n    {\n        const {\n            _bufferedElements: elements,\n            _attributeBuffer,\n            _indexBuffer,\n            vertexSize,\n        } = this;\n        const drawCalls = AbstractBatchRenderer._drawCallPool;\n\n        let dcIndex = this._dcIndex;\n        let aIndex = this._aIndex;\n        let iIndex = this._iIndex;\n\n        let drawCall = drawCalls[dcIndex];\n\n        drawCall.start = this._iIndex;\n        drawCall.texArray = texArray;\n\n        for (let i = start; i < finish; ++i)\n        {\n            const sprite = elements[i];\n            const tex = sprite._texture.baseTexture;\n            const spriteBlendMode = premultiplyBlendMode[\n                tex.alphaMode ? 1 : 0][sprite.blendMode];\n\n            elements[i] = null;\n\n            if (start < i && drawCall.blend !== spriteBlendMode)\n            {\n                drawCall.size = iIndex - drawCall.start;\n                start = i;\n                drawCall = drawCalls[++dcIndex];\n                drawCall.texArray = texArray;\n                drawCall.start = iIndex;\n            }\n\n            this.packInterleavedGeometry(sprite, _attributeBuffer, _indexBuffer, aIndex, iIndex);\n            aIndex += sprite.vertexData.length / 2 * vertexSize;\n            iIndex += sprite.indices.length;\n\n            drawCall.blend = spriteBlendMode;\n        }\n\n        if (start < finish)\n        {\n            drawCall.size = iIndex - drawCall.start;\n            ++dcIndex;\n        }\n\n        this._dcIndex = dcIndex;\n        this._aIndex = aIndex;\n        this._iIndex = iIndex;\n    }\n\n    /**\n     * Bind textures for current rendering\n     * @param texArray\n     */\n    bindAndClearTexArray(texArray: BatchTextureArray): void\n    {\n        const textureSystem = this.renderer.texture;\n\n        for (let j = 0; j < texArray.count; j++)\n        {\n            textureSystem.bind(texArray.elements[j], texArray.ids[j]);\n            texArray.elements[j] = null;\n        }\n        texArray.count = 0;\n    }\n\n    updateGeometry(): void\n    {\n        const {\n            _packedGeometries: packedGeometries,\n            _attributeBuffer: attributeBuffer,\n            _indexBuffer: indexBuffer,\n        } = this;\n\n        if (!settings.CAN_UPLOAD_SAME_BUFFER)\n        { /* Usually on iOS devices, where the browser doesn't\n            like uploads to the same buffer in a single frame. */\n            if (this._packedGeometryPoolSize <= this._flushId)\n            {\n                this._packedGeometryPoolSize++;\n                packedGeometries[this._flushId] = new (this.geometryClass)();\n            }\n\n            packedGeometries[this._flushId]._buffer.update(attributeBuffer.rawBinaryData);\n            packedGeometries[this._flushId]._indexBuffer.update(indexBuffer);\n\n            this.renderer.geometry.bind(packedGeometries[this._flushId]);\n            this.renderer.geometry.updateBuffers();\n            this._flushId++;\n        }\n        else\n        {\n            // lets use the faster option, always use buffer number 0\n            packedGeometries[this._flushId]._buffer.update(attributeBuffer.rawBinaryData);\n            packedGeometries[this._flushId]._indexBuffer.update(indexBuffer);\n\n            this.renderer.geometry.updateBuffers();\n        }\n    }\n\n    drawBatches(): void\n    {\n        const dcCount = this._dcIndex;\n        const { gl, state: stateSystem } = this.renderer;\n        const drawCalls = AbstractBatchRenderer._drawCallPool;\n\n        let curTexArray = null;\n\n        // Upload textures and do the draw calls\n        for (let i = 0; i < dcCount; i++)\n        {\n            const { texArray, type, size, start, blend } = drawCalls[i];\n\n            if (curTexArray !== texArray)\n            {\n                curTexArray = texArray;\n                this.bindAndClearTexArray(texArray);\n            }\n\n            this.state.blendMode = blend;\n            stateSystem.set(this.state);\n            gl.drawElements(type, size, gl.UNSIGNED_SHORT, start * 2);\n        }\n    }\n\n    /** Renders the content _now_ and empties the current batch. */\n    flush(): void\n    {\n        if (this._vertexCount === 0)\n        {\n            return;\n        }\n\n        this._attributeBuffer = this.getAttributeBuffer(this._vertexCount);\n        this._indexBuffer = this.getIndexBuffer(this._indexCount);\n        this._aIndex = 0;\n        this._iIndex = 0;\n        this._dcIndex = 0;\n\n        this.buildTexturesAndDrawCalls();\n        this.updateGeometry();\n        this.drawBatches();\n\n        // reset elements buffer for the next flush\n        this._bufferSize = 0;\n        this._vertexCount = 0;\n        this._indexCount = 0;\n    }\n\n    /** Starts a new sprite batch. */\n    start(): void\n    {\n        this.renderer.state.set(this.state);\n\n        this.renderer.texture.ensureSamplerType(this.MAX_TEXTURES);\n\n        this.renderer.shader.bind(this._shader);\n\n        if (settings.CAN_UPLOAD_SAME_BUFFER)\n        {\n            // bind buffer #0, we don't need others\n            this.renderer.geometry.bind(this._packedGeometries[this._flushId]);\n        }\n    }\n\n    /** Stops and flushes the current batch. */\n    stop(): void\n    {\n        this.flush();\n    }\n\n    /** Destroys this `AbstractBatchRenderer`. It cannot be used again. */\n    destroy(): void\n    {\n        for (let i = 0; i < this._packedGeometryPoolSize; i++)\n        {\n            if (this._packedGeometries[i])\n            {\n                this._packedGeometries[i].destroy();\n            }\n        }\n\n        this.renderer.off('prerender', this.onPrerender, this);\n\n        this._aBuffers = null;\n        this._iBuffers = null;\n        this._packedGeometries = null;\n        this._attributeBuffer = null;\n        this._indexBuffer = null;\n\n        if (this._shader)\n        {\n            this._shader.destroy();\n            this._shader = null;\n        }\n\n        super.destroy();\n    }\n\n    /**\n     * Fetches an attribute buffer from `this._aBuffers` that can hold atleast `size` floats.\n     * @param size - minimum capacity required\n     * @returns - buffer than can hold atleast `size` floats\n     */\n    getAttributeBuffer(size: number): ViewableBuffer\n    {\n        // 8 vertices is enough for 2 quads\n        const roundedP2 = nextPow2(Math.ceil(size / 8));\n        const roundedSizeIndex = log2(roundedP2);\n        const roundedSize = roundedP2 * 8;\n\n        if (this._aBuffers.length <= roundedSizeIndex)\n        {\n            this._iBuffers.length = roundedSizeIndex + 1;\n        }\n\n        let buffer = this._aBuffers[roundedSize];\n\n        if (!buffer)\n        {\n            this._aBuffers[roundedSize] = buffer = new ViewableBuffer(roundedSize * this.vertexSize * 4);\n        }\n\n        return buffer;\n    }\n\n    /**\n     * Fetches an index buffer from `this._iBuffers` that can\n     * have at least `size` capacity.\n     * @param size - minimum required capacity\n     * @returns - buffer that can fit `size` indices.\n     */\n    getIndexBuffer(size: number): Uint16Array\n    {\n        // 12 indices is enough for 2 quads\n        const roundedP2 = nextPow2(Math.ceil(size / 12));\n        const roundedSizeIndex = log2(roundedP2);\n        const roundedSize = roundedP2 * 12;\n\n        if (this._iBuffers.length <= roundedSizeIndex)\n        {\n            this._iBuffers.length = roundedSizeIndex + 1;\n        }\n\n        let buffer = this._iBuffers[roundedSizeIndex];\n\n        if (!buffer)\n        {\n            this._iBuffers[roundedSizeIndex] = buffer = new Uint16Array(roundedSize);\n        }\n\n        return buffer;\n    }\n\n    /**\n     * Takes the four batching parameters of `element`, interleaves\n     * and pushes them into the batching attribute/index buffers given.\n     *\n     * It uses these properties: `vertexData` `uvs`, `textureId` and\n     * `indicies`. It also uses the \"tint\" of the base-texture, if\n     * present.\n     * @param {PIXI.DisplayObject} element - element being rendered\n     * @param attributeBuffer - attribute buffer.\n     * @param indexBuffer - index buffer\n     * @param aIndex - number of floats already in the attribute buffer\n     * @param iIndex - number of indices already in `indexBuffer`\n     */\n    packInterleavedGeometry(element: IBatchableElement, attributeBuffer: ViewableBuffer, indexBuffer: Uint16Array,\n        aIndex: number, iIndex: number): void\n    {\n        const {\n            uint32View,\n            float32View,\n        } = attributeBuffer;\n\n        const packedVertices = aIndex / this.vertexSize;\n        const uvs = element.uvs;\n        const indicies = element.indices;\n        const vertexData = element.vertexData;\n        const textureId = element._texture.baseTexture._batchLocation;\n\n        const alpha = Math.min(element.worldAlpha, 1.0);\n        const argb = (alpha < 1.0\n            && element._texture.baseTexture.alphaMode)\n            ? premultiplyTint(element._tintRGB, alpha)\n            : element._tintRGB + (alpha * 255 << 24);\n\n        // lets not worry about tint! for now..\n        for (let i = 0; i < vertexData.length; i += 2)\n        {\n            float32View[aIndex++] = vertexData[i];\n            float32View[aIndex++] = vertexData[i + 1];\n            float32View[aIndex++] = uvs[i];\n            float32View[aIndex++] = uvs[i + 1];\n            uint32View[aIndex++] = argb;\n            float32View[aIndex++] = textureId;\n        }\n\n        for (let i = 0; i < indicies.length; i++)\n        {\n            indexBuffer[iIndex++] = packedVertices + indicies[i];\n        }\n    }\n\n    /**\n     * Pool of `BatchDrawCall` objects that `flush` used\n     * to create \"batches\" of the objects being rendered.\n     *\n     * These are never re-allocated again.\n     * Shared between all batch renderers because it can be only one \"flush\" working at the moment.\n     * @member {PIXI.BatchDrawCall[]}\n     */\n    static _drawCallPool: Array<BatchDrawCall> = [];\n\n    /**\n     * Pool of `BatchDrawCall` objects that `flush` used\n     * to create \"batches\" of the objects being rendered.\n     *\n     * These are never re-allocated again.\n     * Shared between all batch renderers because it can be only one \"flush\" working at the moment.\n     * @member {PIXI.BatchTextureArray[]}\n     */\n    static _textureArrayPool: Array<BatchTextureArray> = [];\n}\n", "import { Shader } from '../shader/Shader';\nimport { Program } from '../shader/Program';\nimport { UniformGroup } from '../shader/UniformGroup';\nimport { Matrix } from '@pixi/math';\n\n/**\n * Helper that generates batching multi-texture shader. Use it with your new BatchRenderer\n * @memberof PIXI\n */\nexport class BatchShaderGenerator\n{\n    /** Reference to the vertex shader source. */\n    public vertexSrc: string;\n\n    /** Reference to the fragment shader template. Must contain \"%count%\" and \"%forloop%\". */\n    public fragTemplate: string;\n\n    programCache: {[key: number]: Program};\n    defaultGroupCache: {[key: number]: UniformGroup};\n\n    /**\n     * @param vertexSrc - Vertex shader\n     * @param fragTemplate - Fragment shader template\n     */\n    constructor(vertexSrc: string, fragTemplate: string)\n    {\n        this.vertexSrc = vertexSrc;\n        this.fragTemplate = fragTemplate;\n\n        this.programCache = {};\n        this.defaultGroupCache = {};\n\n        if (fragTemplate.indexOf('%count%') < 0)\n        {\n            throw new Error('Fragment template must contain \"%count%\".');\n        }\n\n        if (fragTemplate.indexOf('%forloop%') < 0)\n        {\n            throw new Error('Fragment template must contain \"%forloop%\".');\n        }\n    }\n\n    generateShader(maxTextures: number): Shader\n    {\n        if (!this.programCache[maxTextures])\n        {\n            const sampleValues = new Int32Array(maxTextures);\n\n            for (let i = 0; i < maxTextures; i++)\n            {\n                sampleValues[i] = i;\n            }\n\n            this.defaultGroupCache[maxTextures] = UniformGroup.from({ uSamplers: sampleValues }, true);\n\n            let fragmentSrc = this.fragTemplate;\n\n            fragmentSrc = fragmentSrc.replace(/%count%/gi, `${maxTextures}`);\n            fragmentSrc = fragmentSrc.replace(/%forloop%/gi, this.generateSampleSrc(maxTextures));\n\n            this.programCache[maxTextures] = new Program(this.vertexSrc, fragmentSrc);\n        }\n\n        const uniforms = {\n            tint: new Float32Array([1, 1, 1, 1]),\n            translationMatrix: new Matrix(),\n            default: this.defaultGroupCache[maxTextures],\n        };\n\n        return new Shader(this.programCache[maxTextures], uniforms);\n    }\n\n    generateSampleSrc(maxTextures: number): string\n    {\n        let src = '';\n\n        src += '\\n';\n        src += '\\n';\n\n        for (let i = 0; i < maxTextures; i++)\n        {\n            if (i > 0)\n            {\n                src += '\\nelse ';\n            }\n\n            if (i < maxTextures - 1)\n            {\n                src += `if(vTextureId < ${i}.5)`;\n            }\n\n            src += '\\n{';\n            src += `\\n\\tcolor = texture2D(uSamplers[${i}], vTextureCoord);`;\n            src += '\\n}';\n        }\n\n        src += '\\n';\n        src += '\\n';\n\n        return src;\n    }\n}\n", "import { TYPES } from '@pixi/constants';\nimport { Geometry } from '../geometry/Geometry';\nimport { Buffer } from '../geometry/Buffer';\n\n/**\n * Geometry used to batch standard PIXI content (e.g. Mesh, Sprite, Graphics objects).\n * @memberof PIXI\n */\nexport class BatchGeometry extends Geometry\n{\n    /**\n     * Buffer used for position, color, texture IDs\n     * @protected\n     */\n    _buffer: Buffer;\n\n    /**\n     * Index buffer data\n     * @protected\n     */\n    _indexBuffer: Buffer;\n\n    /**\n     * @param {boolean} [_static=false] - Optimization flag, where `false`\n     *        is updated every frame, `true` doesn't change frame-to-frame.\n     */\n    constructor(_static = false)\n    {\n        super();\n\n        this._buffer = new Buffer(null, _static, false);\n\n        this._indexBuffer = new Buffer(null, _static, true);\n\n        this.addAttribute('aVertexPosition', this._buffer, 2, false, TYPES.FLOAT)\n            .addAttribute('aTextureCoord', this._buffer, 2, false, TYPES.FLOAT)\n            .addAttribute('aColor', this._buffer, 4, true, TYPES.UNSIGNED_BYTE)\n            .addAttribute('aTextureId', this._buffer, 1, true, TYPES.FLOAT)\n            .addIndex(this._indexBuffer);\n    }\n}\n", "import { BatchShaderGenerator } from './BatchShaderGenerator';\nimport { BatchGeometry } from './BatchGeometry';\nimport { AbstractBatchRenderer } from './AbstractBatchRenderer';\n\nimport defaultVertex from './texture.vert';\nimport defaultFragment from './texture.frag';\n\nimport type { Renderer } from '../Renderer';\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport { ExtensionType } from '@pixi/extensions';\n\nexport interface IBatchFactoryOptions\n{\n    vertex?: string;\n    fragment?: string;\n    geometryClass?: typeof BatchGeometry;\n    vertexSize?: number;\n}\n\n/** @memberof PIXI */\nexport class BatchPluginFactory\n{\n    /**\n     * Create a new BatchRenderer plugin for Renderer. this convenience can provide an easy way\n     * to extend BatchRenderer with all the necessary pieces.\n     * @example\n     * const fragment = `\n     * varying vec2 vTextureCoord;\n     * varying vec4 vColor;\n     * varying float vTextureId;\n     * uniform sampler2D uSamplers[%count%];\n     *\n     * void main(void){\n     *     vec4 color;\n     *     %forloop%\n     *     gl_FragColor = vColor * vec4(color.a - color.rgb, color.a);\n     * }\n     * `;\n     * const InvertBatchRenderer = PIXI.BatchPluginFactory.create({ fragment });\n     * PIXI.extensions.add({\n     *  name: 'invert',\n     *  ref: InvertBatchRenderer,\n     *  type: PIXI.ExtensionType.RendererPlugin,\n     * });\n     * const sprite = new PIXI.Sprite();\n     * sprite.pluginName = 'invert';\n     * @param {object} [options]\n     * @param {string} [options.vertex=PIXI.BatchPluginFactory.defaultVertexSrc] - Vertex shader source\n     * @param {string} [options.fragment=PIXI.BatchPluginFactory.defaultFragmentTemplate] - Fragment shader template\n     * @param {number} [options.vertexSize=6] - Vertex size\n     * @param {object} [options.geometryClass=PIXI.BatchGeometry]\n     * @returns {*} New batch renderer plugin\n     */\n    static create(options?: IBatchFactoryOptions): typeof AbstractBatchRenderer\n    {\n        const { vertex, fragment, vertexSize, geometryClass } = Object.assign({\n            vertex: defaultVertex,\n            fragment: defaultFragment,\n            geometryClass: BatchGeometry,\n            vertexSize: 6,\n        }, options);\n\n        return class BatchPlugin extends AbstractBatchRenderer\n        {\n            constructor(renderer: Renderer)\n            {\n                super(renderer);\n\n                this.shaderGenerator = new BatchShaderGenerator(vertex, fragment);\n                this.geometryClass = geometryClass;\n                this.vertexSize = vertexSize;\n            }\n        };\n    }\n\n    /**\n     * The default vertex shader source\n     * @readonly\n     */\n    static get defaultVertexSrc(): string\n    {\n        return defaultVertex;\n    }\n\n    /**\n     * The default fragment shader source\n     * @readonly\n     */\n    static get defaultFragmentTemplate(): string\n    {\n        return defaultFragment;\n    }\n}\n\n// Setup the default BatchRenderer plugin, this is what\n// we'll actually export at the root level\nexport const BatchRenderer = BatchPluginFactory.create();\n\nObject.assign(BatchRenderer, {\n    extension: {\n        name: 'batch',\n        type: ExtensionType.RendererPlugin,\n    } as ExtensionMetadata,\n});\n", "import { deprecation } from '@pixi/utils';\nimport * as _systems from './systems';\nimport * as _resources from './textures/resources';\n\n/**\n * @memberof PIXI\n * @namespace resources\n * @see PIXI\n * @deprecated since 6.0.0\n */\nconst resources = {};\n\nfor (const name in _resources)\n{\n    Object.defineProperty(resources, name,\n        {\n            get()\n            {\n                // #if _DEBUG\n                deprecation('6.0.0', `PIXI.systems.${name} has moved to PIXI.${name}`);\n                // #endif\n\n                return (_resources as any)[name];\n            },\n        });\n}\n\n/**\n * @memberof PIXI\n * @namespace systems\n * @see PIXI\n * @deprecated since 6.0.0\n */\nconst systems = {};\n\nfor (const name in _systems)\n{\n    Object.defineProperty(systems, name,\n        {\n            get()\n            {\n                // #if _DEBUG\n                deprecation('6.0.0', `PIXI.resources.${name} has moved to PIXI.${name}`);\n                // #endif\n\n                return (_systems as any)[name];\n            },\n        });\n}\n\nexport { resources, systems };\n", "import './settings';\n\n/**\n * @namespace PIXI\n */\n\n/**\n * String of the current PIXI version.\n * @memberof PIXI\n */\nexport const VERSION = '$_VERSION';\n\nexport * from '@pixi/extensions';\nexport * from './textures/resources';\nexport * from './systems';\nexport * from './IRenderingContext';\nexport * from './IRenderableObject';\nexport * from './autoDetectRenderer';\nexport * from './fragments';\nexport * from './ISystem';\nexport * from './Renderer';\nexport * from './AbstractRenderer';\nexport * from './framebuffer/Framebuffer';\nexport * from './framebuffer/GLFramebuffer';\nexport * from './textures/Texture';\nexport * from './textures/BaseTexture';\nexport * from './textures/GLTexture';\nexport * from './textures/TextureMatrix';\nexport * from './renderTexture/RenderTexture';\nexport * from './renderTexture/RenderTexturePool';\nexport * from './renderTexture/BaseRenderTexture';\nexport * from './textures/TextureUvs';\nexport * from './state/State';\nexport * from './batch/ObjectRenderer';\nexport * from './batch/AbstractBatchRenderer';\nexport * from './batch/BatchPluginFactory';\nexport * from './batch/BatchShaderGenerator';\nexport * from './batch/BatchGeometry';\nexport * from './batch/BatchDrawCall';\nexport * from './batch/BatchTextureArray';\nexport * from './utils/Quad';\nexport * from './utils/QuadUv';\nexport * from './shader/utils/checkMaxIfStatementsInShader';\nexport * from './shader/utils/uniformParsers';\nexport * from './shader/utils/generateUniformBufferSync';\nexport * from './shader/utils/getTestContext';\nexport * from './shader/utils/generateProgram';\nexport * from './shader/Shader';\nexport * from './shader/Program';\nexport * from './shader/GLProgram';\nexport * from './shader/UniformGroup';\nexport * from './mask/MaskData';\nexport * from './filters/spriteMask/SpriteMaskFilter';\nexport * from './filters/Filter';\nexport * from './filters/FilterState';\nexport * from './filters/IFilterTarget';\nexport * from './geometry/Attribute';\nexport * from './geometry/Buffer';\nexport * from './geometry/Geometry';\nexport * from './geometry/ViewableBuffer';\nexport * from './deprecations';\n"],
  "mappings": "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",
  "names": ["Runner", "d", "b", "__assign", "arguments", "Resource", "BufferResource", "BaseTexture", "AbstractMultiResource", "resources", "ArrayResource", "BaseImageResource", "CanvasResource", "CubeResource", "ImageResource", "SVGResource", "VideoResource", "ImageBitmapResource", "DepthResource", "Framebuffer", "BaseRenderTexture", "TextureUvs", "Texture", "context", "RenderTexture", "RenderTexturePool", "Attribute", "UID", "Buffer", "map", "byteSizeMap", "Geometry", "Quad", "QuadUv", "UniformGroup", "FilterState", "tempMatrix", "FilterSystem", "ObjectRenderer", "BatchSystem", "ContextSystem", "GLFramebuffer", "FramebufferSystem", "GeometrySystem", "MaskData", "Program", "defaultVertex", "defaultFragment", "Shader", "BLEND", "OFFSET", "CULLING", "DEPTH_TEST", "WINDING", "DEPTH_MASK", "State", "Filter", "TextureMatrix", "SpriteMaskFilter", "MaskSystem", "AbstractMaskSystem", "ScissorSystem", "StencilSystem", "ProjectionSystem", "RenderTextureSystem", "IGLUniformData", "GLProgram", "ShaderSystem", "StateSystem", "TextureGCSystem", "GLTexture", "TextureSystem", "AbstractRenderer", "GLBuffer", "BufferSystem", "Renderer", "extensions", "System", "BatchDrawCall", "BatchTextureArray", "ViewableBuffer", "AbstractBatchRenderer", "BatchShaderGenerator", "fragTemplate", "BatchGeometry", "BatchPluginFactory", "vertex", "fragment"]
}
