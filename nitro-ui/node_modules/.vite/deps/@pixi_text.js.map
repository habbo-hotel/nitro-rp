{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/@pixi+text@6.5.10_@pixi+core@6.5.10_@pixi+math@6.5.10_@pixi+settings@6.5.10_@pixi+sprite@6.5.10_@pixi+utils@6.5.10/node_modules/node_modules/tslib/tslib.es6.js", "../../../../node_modules/.pnpm/@pixi+text@6.5.10_@pixi+core@6.5.10_@pixi+math@6.5.10_@pixi+settings@6.5.10_@pixi+sprite@6.5.10_@pixi+utils@6.5.10/node_modules/@pixi/text/src/const.ts", "../../../../node_modules/.pnpm/@pixi+text@6.5.10_@pixi+core@6.5.10_@pixi+math@6.5.10_@pixi+settings@6.5.10_@pixi+sprite@6.5.10_@pixi+utils@6.5.10/node_modules/@pixi/text/src/TextStyle.ts", "../../../../node_modules/.pnpm/@pixi+text@6.5.10_@pixi+core@6.5.10_@pixi+math@6.5.10_@pixi+settings@6.5.10_@pixi+sprite@6.5.10_@pixi+utils@6.5.10/node_modules/@pixi/text/src/TextMetrics.ts", "../../../../node_modules/.pnpm/@pixi+text@6.5.10_@pixi+core@6.5.10_@pixi+math@6.5.10_@pixi+settings@6.5.10_@pixi+sprite@6.5.10_@pixi+utils@6.5.10/node_modules/@pixi/text/src/Text.ts"],
  "sourcesContent": ["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n", "/**\n * Constants that define the type of gradient on text.\n * @static\n * @constant\n * @name TEXT_GRADIENT\n * @memberof PIXI\n * @type {object}\n * @property {number} LINEAR_VERTICAL Vertical gradient\n * @property {number} LINEAR_HORIZONTAL Linear gradient\n */\nexport enum TEXT_GRADIENT\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    LINEAR_VERTICAL = 0,\n    LINEAR_HORIZONTAL = 1\n}\n", "// disabling eslint for now, going to rewrite this in v5\n/* eslint-disable */\n\nimport { TEXT_GRADIENT } from './const';\nimport { hex2string } from '@pixi/utils';\n\nexport type TextStyleAlign = 'left'|'center'|'right'|'justify';\nexport type TextStyleFill = string|string[]|number|number[]|CanvasGradient|CanvasPattern;\nexport type TextStyleFontStyle = 'normal'|'italic'|'oblique';\nexport type TextStyleFontVariant = 'normal'|'small-caps';\nexport type TextStyleFontWeight = 'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900';\nexport type TextStyleLineJoin = 'miter'|'round'|'bevel';\nexport type TextStyleTextBaseline = 'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom';\nexport type TextStyleWhiteSpace = 'normal'|'pre'|'pre-line';\n\nexport interface ITextStyle {\n    align: TextStyleAlign;\n    breakWords: boolean;\n    dropShadow: boolean;\n    dropShadowAlpha: number;\n    dropShadowAngle: number;\n    dropShadowBlur: number;\n    dropShadowColor: string|number;\n    dropShadowDistance: number;\n    fill: TextStyleFill;\n    fillGradientType: TEXT_GRADIENT;\n    fillGradientStops: number[];\n    fontFamily: string | string[];\n    fontSize: number | string;\n    fontStyle: TextStyleFontStyle;\n    fontVariant: TextStyleFontVariant;\n    fontWeight: TextStyleFontWeight;\n    letterSpacing: number;\n    lineHeight: number;\n    lineJoin: TextStyleLineJoin;\n    miterLimit: number;\n    padding: number;\n    stroke: string|number;\n    strokeThickness: number;\n    textBaseline: TextStyleTextBaseline;\n    trim: boolean;\n    whiteSpace: TextStyleWhiteSpace;\n    wordWrap: boolean;\n    wordWrapWidth: number;\n    leading: number;\n}\n\nconst defaultStyle: ITextStyle = {\n    align: 'left',\n    breakWords: false,\n    dropShadow: false,\n    dropShadowAlpha: 1,\n    dropShadowAngle: Math.PI / 6,\n    dropShadowBlur: 0,\n    dropShadowColor: 'black',\n    dropShadowDistance: 5,\n    fill: 'black',\n    fillGradientType: TEXT_GRADIENT.LINEAR_VERTICAL,\n    fillGradientStops: [],\n    fontFamily: 'Arial',\n    fontSize: 26,\n    fontStyle: 'normal',\n    fontVariant: 'normal',\n    fontWeight: 'normal',\n    letterSpacing: 0,\n    lineHeight: 0,\n    lineJoin: 'miter',\n    miterLimit: 10,\n    padding: 0,\n    stroke: 'black',\n    strokeThickness: 0,\n    textBaseline: 'alphabetic',\n    trim: false,\n    whiteSpace: 'pre',\n    wordWrap: false,\n    wordWrapWidth: 100,\n    leading: 0,\n};\n\nconst genericFontFamilies = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui',\n];\n\n/**\n * A TextStyle Object contains information to decorate a Text objects.\n *\n * An instance can be shared between multiple Text objects; then changing the style will update all text objects using it.\n *\n * A tool can be used to generate a text style [here](https://pixijs.io/pixi-text-style).\n *\n * @memberof PIXI\n */\nexport class TextStyle implements ITextStyle\n{\n    public styleID: number;\n\n    protected _align: TextStyleAlign;\n    protected _breakWords: boolean;\n    protected _dropShadow: boolean;\n    protected _dropShadowAlpha: number;\n    protected _dropShadowAngle: number;\n    protected _dropShadowBlur: number;\n    protected _dropShadowColor: string|number;\n    protected _dropShadowDistance: number;\n    protected _fill: TextStyleFill;\n    protected _fillGradientType: TEXT_GRADIENT;\n    protected _fillGradientStops: number[];\n    protected _fontFamily: string|string[];\n    protected _fontSize: number|string;\n    protected _fontStyle: TextStyleFontStyle;\n    protected _fontVariant: TextStyleFontVariant;\n    protected _fontWeight: TextStyleFontWeight;\n    protected _letterSpacing: number;\n    protected _lineHeight: number;\n    protected _lineJoin: TextStyleLineJoin;\n    protected _miterLimit: number;\n    protected _padding: number;\n    protected _stroke: string|number;\n    protected _strokeThickness: number;\n    protected _textBaseline: TextStyleTextBaseline;\n    protected _trim: boolean;\n    protected _whiteSpace: TextStyleWhiteSpace;\n    protected _wordWrap: boolean;\n    protected _wordWrapWidth: number;\n    protected _leading: number;\n\n    /**\n     * @param {object} [style] - The style parameters\n     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center' or 'right'),\n     *  does not affect single line text\n     * @param {boolean} [style.breakWords=false] - Indicates if lines can be wrapped within words, it\n     *  needs wordWrap to be set to true\n     * @param {boolean} [style.dropShadow=false] - Set a drop shadow for the text\n     * @param {number} [style.dropShadowAlpha=1] - Set alpha for the drop shadow\n     * @param {number} [style.dropShadowAngle=Math.PI/6] - Set a angle of the drop shadow\n     * @param {number} [style.dropShadowBlur=0] - Set a shadow blur radius\n     * @param {string|number} [style.dropShadowColor='black'] - A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n     * @param {number} [style.dropShadowDistance=5] - Set a distance of the drop shadow\n     * @param {string|string[]|number|number[]|CanvasGradient|CanvasPattern} [style.fill='black'] - A canvas\n     *  fillstyle that will be used on the text e.g 'red', '#00FF00'. Can be an array to create a gradient\n     *  eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     * @param {number} [style.fillGradientType=PIXI.TEXT_GRADIENT.LINEAR_VERTICAL] - If fill is an array of colours\n     *  to create a gradient, this can change the type/direction of the gradient. See {@link PIXI.TEXT_GRADIENT}\n     * @param {number[]} [style.fillGradientStops] - If fill is an array of colours to create a gradient, this array can set\n     * the stop points (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     * @param {string|string[]} [style.fontFamily='Arial'] - The font family\n     * @param {number|string} [style.fontSize=26] - The font size (as a number it converts to px, but as a string,\n     *  equivalents are '26px','20pt','160%' or '1.6em')\n     * @param {string} [style.fontStyle='normal'] - The font style ('normal', 'italic' or 'oblique')\n     * @param {string} [style.fontVariant='normal'] - The font variant ('normal' or 'small-caps')\n     * @param {string} [style.fontWeight='normal'] - The font weight ('normal', 'bold', 'bolder', 'lighter' and '100',\n     *  '200', '300', '400', '500', '600', '700', '800' or '900')\n     * @param {number} [style.leading=0] - The space between lines\n     * @param {number} [style.letterSpacing=0] - The amount of spacing between letters, default is 0\n     * @param {number} [style.lineHeight] - The line height, a number that represents the vertical space that a letter uses\n     * @param {string} [style.lineJoin='miter'] - The lineJoin property sets the type of corner created, it can resolve\n     *      spiked text issues. Possible values \"miter\" (creates a sharp corner), \"round\" (creates a round corner) or \"bevel\"\n     *      (creates a squared corner).\n     * @param {number} [style.miterLimit=10] - The miter limit to use when using the 'miter' lineJoin mode. This can reduce\n     *      or increase the spikiness of rendered text.\n     * @param {number} [style.padding=0] - Occasionally some fonts are cropped. Adding some padding will prevent this from\n     *     happening by adding padding to all sides of the text.\n     * @param {string|number} [style.stroke='black'] - A canvas fillstyle that will be used on the text stroke\n     *  e.g 'blue', '#FCFF00'\n     * @param {number} [style.strokeThickness=0] - A number that represents the thickness of the stroke.\n     *  Default is 0 (no stroke)\n     * @param {boolean} [style.trim=false] - Trim transparent borders\n     * @param {string} [style.textBaseline='alphabetic'] - The baseline of the text that is rendered.\n     * @param {string} [style.whiteSpace='pre'] - Determines whether newlines & spaces are collapsed or preserved \"normal\"\n     *      (collapse, collapse), \"pre\" (preserve, preserve) | \"pre-line\" (preserve, collapse). It needs wordWrap to be set to true\n     * @param {boolean} [style.wordWrap=false] - Indicates if word wrap should be used\n     * @param {number} [style.wordWrapWidth=100] - The width at which text will wrap, it needs wordWrap to be set to true\n     */\n    constructor(style?: Partial<ITextStyle>)\n    {\n        this.styleID = 0;\n\n        this.reset();\n\n        deepCopyProperties(this, style, style);\n    }\n\n    /**\n     * Creates a new TextStyle object with the same values as this one.\n     * Note that the only the properties of the object are cloned.\n     *\n     * @return New cloned TextStyle object\n     */\n    public clone(): TextStyle\n    {\n        const clonedProperties: Partial<ITextStyle> = {};\n\n        deepCopyProperties(clonedProperties, this, defaultStyle);\n\n        return new TextStyle(clonedProperties);\n    }\n\n    /** Resets all properties to the defaults specified in TextStyle.prototype._default */\n    public reset(): void\n    {\n        deepCopyProperties(this, defaultStyle, defaultStyle);\n    }\n\n    /**\n     * Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text\n     *\n     * @member {string}\n     */\n    get align(): TextStyleAlign\n    {\n        return this._align;\n    }\n    set align(align: TextStyleAlign)\n    {\n        if (this._align !== align)\n        {\n            this._align = align;\n            this.styleID++;\n        }\n    }\n\n    /** Indicates if lines can be wrapped within words, it needs wordWrap to be set to true. */\n    get breakWords(): boolean\n    {\n        return this._breakWords;\n    }\n    set breakWords(breakWords: boolean)\n    {\n        if (this._breakWords !== breakWords)\n        {\n            this._breakWords = breakWords;\n            this.styleID++;\n        }\n    }\n\n    /** Set a drop shadow for the text. */\n    get dropShadow(): boolean\n    {\n        return this._dropShadow;\n    }\n    set dropShadow(dropShadow: boolean)\n    {\n        if (this._dropShadow !== dropShadow)\n        {\n            this._dropShadow = dropShadow;\n            this.styleID++;\n        }\n    }\n\n    /** Set alpha for the drop shadow. */\n    get dropShadowAlpha(): number\n    {\n        return this._dropShadowAlpha;\n    }\n    set dropShadowAlpha(dropShadowAlpha: number)\n    {\n        if (this._dropShadowAlpha !== dropShadowAlpha)\n        {\n            this._dropShadowAlpha = dropShadowAlpha;\n            this.styleID++;\n        }\n    }\n\n    /** Set a angle of the drop shadow. */\n    get dropShadowAngle(): number\n    {\n        return this._dropShadowAngle;\n    }\n    set dropShadowAngle(dropShadowAngle: number)\n    {\n        if (this._dropShadowAngle !== dropShadowAngle)\n        {\n            this._dropShadowAngle = dropShadowAngle;\n            this.styleID++;\n        }\n    }\n\n    /** Set a shadow blur radius. */\n    get dropShadowBlur(): number\n    {\n        return this._dropShadowBlur;\n    }\n    set dropShadowBlur(dropShadowBlur: number)\n    {\n        if (this._dropShadowBlur !== dropShadowBlur)\n        {\n            this._dropShadowBlur = dropShadowBlur;\n            this.styleID++;\n        }\n    }\n\n    /** A fill style to be used on the dropshadow e.g 'red', '#00FF00'. */\n    get dropShadowColor(): number | string\n    {\n        return this._dropShadowColor;\n    }\n    set dropShadowColor(dropShadowColor: number | string)\n    {\n        const outputColor = getColor(dropShadowColor);\n        if (this._dropShadowColor !== outputColor)\n        {\n            this._dropShadowColor = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /** Set a distance of the drop shadow. */\n    get dropShadowDistance(): number\n    {\n        return this._dropShadowDistance;\n    }\n    set dropShadowDistance(dropShadowDistance: number)\n    {\n        if (this._dropShadowDistance !== dropShadowDistance)\n        {\n            this._dropShadowDistance = dropShadowDistance;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text e.g 'red', '#00FF00'.\n     *\n     * Can be an array to create a gradient eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     *\n     * @member {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n     */\n    get fill(): TextStyleFill\n    {\n        return this._fill;\n    }\n    set fill(fill: TextStyleFill)\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        // TODO: Not sure if getColor works properly with CanvasGradient and/or CanvasPattern, can't pass in\n        //       without casting here.\n        const outputColor = getColor(fill as any);\n        if (this._fill !== outputColor)\n        {\n            this._fill = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this can change the type/direction of the gradient.\n     *\n     * @see PIXI.TEXT_GRADIENT\n     */\n    get fillGradientType(): TEXT_GRADIENT\n    {\n        return this._fillGradientType;\n    }\n    set fillGradientType(fillGradientType: TEXT_GRADIENT)\n    {\n        if (this._fillGradientType !== fillGradientType)\n        {\n            this._fillGradientType = fillGradientType;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this array can set the stop points\n     * (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     */\n    get fillGradientStops(): number[]\n    {\n        return this._fillGradientStops;\n    }\n    set fillGradientStops(fillGradientStops: number[])\n    {\n        if (!areArraysEqual(this._fillGradientStops,fillGradientStops))\n        {\n            this._fillGradientStops = fillGradientStops;\n            this.styleID++;\n        }\n    }\n\n    /** The font family. */\n    get fontFamily(): string | string[]\n    {\n        return this._fontFamily;\n    }\n    set fontFamily(fontFamily: string | string[])\n    {\n        if (this.fontFamily !== fontFamily)\n        {\n            this._fontFamily = fontFamily;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font size\n     * (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em')\n     */\n    get fontSize(): number | string\n    {\n        return this._fontSize;\n    }\n    set fontSize(fontSize: number | string)\n    {\n        if (this._fontSize !== fontSize)\n        {\n            this._fontSize = fontSize;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font style\n     * ('normal', 'italic' or 'oblique')\n     *\n     * @member {string}\n     */\n    get fontStyle(): TextStyleFontStyle\n    {\n        return this._fontStyle;\n    }\n    set fontStyle(fontStyle: TextStyleFontStyle)\n    {\n        if (this._fontStyle !== fontStyle)\n        {\n            this._fontStyle = fontStyle;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font variant\n     * ('normal' or 'small-caps')\n     *\n     * @member {string}\n     */\n    get fontVariant(): TextStyleFontVariant\n    {\n        return this._fontVariant;\n    }\n    set fontVariant(fontVariant: TextStyleFontVariant)\n    {\n        if (this._fontVariant !== fontVariant)\n        {\n            this._fontVariant = fontVariant;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font weight\n     * ('normal', 'bold', 'bolder', 'lighter' and '100', '200', '300', '400', '500', '600', '700', 800' or '900')\n     *\n     * @member {string}\n     */\n    get fontWeight(): TextStyleFontWeight\n    {\n        return this._fontWeight;\n    }\n    set fontWeight(fontWeight: TextStyleFontWeight)\n    {\n        if (this._fontWeight !== fontWeight)\n        {\n            this._fontWeight = fontWeight;\n            this.styleID++;\n        }\n    }\n\n    /** The amount of spacing between letters, default is 0. */\n    get letterSpacing(): number\n    {\n        return this._letterSpacing;\n    }\n    set letterSpacing(letterSpacing: number)\n    {\n        if (this._letterSpacing !== letterSpacing)\n        {\n            this._letterSpacing = letterSpacing;\n            this.styleID++;\n        }\n    }\n\n    /** The line height, a number that represents the vertical space that a letter uses. */\n    get lineHeight(): number\n    {\n        return this._lineHeight;\n    }\n    set lineHeight(lineHeight: number)\n    {\n        if (this._lineHeight !== lineHeight)\n        {\n            this._lineHeight = lineHeight;\n            this.styleID++;\n        }\n    }\n\n    /** The space between lines. */\n    get leading(): number\n    {\n        return this._leading;\n    }\n    set leading(leading: number)\n    {\n        if (this._leading !== leading)\n        {\n            this._leading = leading;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The lineJoin property sets the type of corner created, it can resolve spiked text issues.\n     * Default is 'miter' (creates a sharp corner).\n     *\n     * @member {string}\n     */\n    get lineJoin(): TextStyleLineJoin\n    {\n        return this._lineJoin;\n    }\n    set lineJoin(lineJoin: TextStyleLineJoin)\n    {\n        if (this._lineJoin !== lineJoin)\n        {\n            this._lineJoin = lineJoin;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The miter limit to use when using the 'miter' lineJoin mode.\n     *\n     * This can reduce or increase the spikiness of rendered text.\n     */\n    get miterLimit(): number\n    {\n        return this._miterLimit;\n    }\n    set miterLimit(miterLimit: number)\n    {\n        if (this._miterLimit !== miterLimit)\n        {\n            this._miterLimit = miterLimit;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n     * by adding padding to all sides of the text.\n     */\n    get padding(): number\n    {\n        return this._padding;\n    }\n    set padding(padding: number)\n    {\n        if (this._padding !== padding)\n        {\n            this._padding = padding;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text stroke\n     * e.g 'blue', '#FCFF00'\n     */\n    get stroke(): string | number\n    {\n        return this._stroke;\n    }\n    set stroke(stroke: string | number)\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        const outputColor = getColor(stroke);\n        if (this._stroke !== outputColor)\n        {\n            this._stroke = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A number that represents the thickness of the stroke.\n     *\n     * @default 0\n     */\n    get strokeThickness(): number\n    {\n        return this._strokeThickness;\n    }\n    set strokeThickness(strokeThickness: number)\n    {\n        if (this._strokeThickness !== strokeThickness)\n        {\n            this._strokeThickness = strokeThickness;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The baseline of the text that is rendered.\n     *\n     * @member {string}\n     */\n    get textBaseline(): TextStyleTextBaseline\n    {\n        return this._textBaseline;\n    }\n    set textBaseline(textBaseline: TextStyleTextBaseline)\n    {\n        if (this._textBaseline !== textBaseline)\n        {\n            this._textBaseline = textBaseline;\n            this.styleID++;\n        }\n    }\n\n    /** Trim transparent borders. */\n    get trim(): boolean\n    {\n        return this._trim;\n    }\n    set trim(trim: boolean)\n    {\n        if (this._trim !== trim)\n        {\n            this._trim = trim;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * How newlines and spaces should be handled.\n     * Default is 'pre' (preserve, preserve).\n     *\n     *  value       | New lines     |   Spaces\n     *  ---         | ---           |   ---\n     * 'normal'     | Collapse      |   Collapse\n     * 'pre'        | Preserve      |   Preserve\n     * 'pre-line'   | Preserve      |   Collapse\n     *\n     * @member {string}\n     */\n    get whiteSpace(): TextStyleWhiteSpace\n    {\n        return this._whiteSpace;\n    }\n    set whiteSpace(whiteSpace: TextStyleWhiteSpace)\n    {\n        if (this._whiteSpace !== whiteSpace)\n        {\n            this._whiteSpace = whiteSpace;\n            this.styleID++;\n        }\n    }\n\n    /** Indicates if word wrap should be used. */\n    get wordWrap(): boolean\n    {\n        return this._wordWrap;\n    }\n    set wordWrap(wordWrap: boolean)\n    {\n        if (this._wordWrap !== wordWrap)\n        {\n            this._wordWrap = wordWrap;\n            this.styleID++;\n        }\n    }\n\n    /** The width at which text will wrap, it needs wordWrap to be set to true. */\n    get wordWrapWidth(): number\n    {\n        return this._wordWrapWidth;\n    }\n    set wordWrapWidth(wordWrapWidth: number)\n    {\n        if (this._wordWrapWidth !== wordWrapWidth)\n        {\n            this._wordWrapWidth = wordWrapWidth;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Generates a font style string to use for `TextMetrics.measureFont()`.\n     *\n     * @return Font style string, for passing to `TextMetrics.measureFont()`\n     */\n    public toFontString(): string\n    {\n        // build canvas api font setting from individual components. Convert a numeric this.fontSize to px\n        const fontSizeString = (typeof this.fontSize === 'number') ? `${this.fontSize}px` : this.fontSize;\n\n        // Clean-up fontFamily property by quoting each font name\n        // this will support font names with spaces\n        let fontFamilies: string|string[] = this.fontFamily;\n\n        if (!Array.isArray(this.fontFamily))\n        {\n            fontFamilies = this.fontFamily.split(',');\n        }\n\n        for (let i = fontFamilies.length - 1; i >= 0; i--)\n        {\n            // Trim any extra white-space\n            let fontFamily = fontFamilies[i].trim();\n\n            // Check if font already contains strings\n            if (!(/([\\\"\\'])[^\\'\\\"]+\\1/).test(fontFamily) && genericFontFamilies.indexOf(fontFamily) < 0)\n            {\n                fontFamily = `\"${fontFamily}\"`;\n            }\n            (fontFamilies as string[])[i] = fontFamily;\n        }\n\n        return `${this.fontStyle} ${this.fontVariant} ${this.fontWeight} ${fontSizeString} ${(fontFamilies as string[]).join(',')}`;\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * @private\n * @param color\n * @return The color as a string.\n */\nfunction getSingleColor(color: string|number): string\n{\n    if (typeof color === 'number')\n    {\n        return hex2string(color);\n    }\n    else if (typeof color === 'string')\n    {\n        if ( color.indexOf('0x') === 0 )\n        {\n            color = color.replace('0x', '#');\n        }\n    }\n\n    return color;\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param color\n * @return The color as a string.\n */\nfunction getColor(color: (string|number)[]): string[];\nfunction getColor(color: string|number): string;\nfunction getColor(color: string|number|(string|number)[]): string|string[]\n{\n    if (!Array.isArray(color))\n    {\n        return getSingleColor(color);\n    }\n    else\n    {\n        for (let i = 0; i < color.length; ++i)\n        {\n            color[i] = getSingleColor(color[i]);\n        }\n\n        return color as string[];\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param array1 - First array to compare\n * @param array2 - Second array to compare\n * @return Do the arrays contain the same values in the same order\n */\nfunction areArraysEqual<T>(array1: T[], array2: T[]): boolean\n{\n    if (!Array.isArray(array1) || !Array.isArray(array2))\n    {\n        return false;\n    }\n\n    if (array1.length !== array2.length)\n    {\n        return false;\n    }\n\n    for (let i = 0; i < array1.length; ++i)\n    {\n        if (array1[i] !== array2[i])\n        {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * Utility function to ensure that object properties are copied by value, and not by reference\n * @private\n * @param target - Target object to copy properties into\n * @param source - Source object for the properties to copy\n * @param propertyObj - Object containing properties names we want to loop over\n */\nfunction deepCopyProperties(target: Record<string, any>, source: Record<string, any>, propertyObj: Record<string, any>): void {\n    for (const prop in propertyObj) {\n        if (Array.isArray(source[prop])) {\n            target[prop] = source[prop].slice();\n        } else {\n            target[prop] = source[prop];\n        }\n    }\n}\n", "import { settings } from '@pixi/settings';\n\nimport type { TextStyle, TextStyleWhiteSpace } from './TextStyle';\n\ninterface IFontMetrics\n{\n    ascent: number;\n    descent: number;\n    fontSize: number;\n}\n\ntype CharacterWidthCache = { [key: string]: number };\n\n// Default settings used for all getContext calls\nconst contextSettings = {\n    // TextMetrics requires getImageData readback for measuring fonts.\n    willReadFrequently: true,\n} as CanvasRenderingContext2DSettings;\n\n/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n *\n * ```js\n * let style = new PIXI.TextStyle({fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'})\n * let textMetrics = PIXI.TextMetrics.measureText('Your text', style)\n * ```\n * @memberof PIXI\n */\nexport class TextMetrics\n{\n    /** The text that was measured. */\n    public text: string;\n\n    /** The style that was measured. */\n    public style: TextStyle;\n\n    /** The measured width of the text. */\n    public width: number;\n\n    /** The measured height of the text. */\n    public height: number;\n\n    /** An array of lines of the text broken by new lines and wrapping is specified in style. */\n    public lines: string[];\n\n    /** An array of the line widths for each line matched to `lines`. */\n    public lineWidths: number[];\n\n    /** The measured line height for this style. */\n    public lineHeight: number;\n\n    /** The maximum line width for all measured lines. */\n    public maxLineWidth: number;\n\n    /**\n     * The font properties object from TextMetrics.measureFont.\n     * @type {PIXI.IFontMetrics}\n     */\n    public fontProperties: IFontMetrics;\n\n    public static METRICS_STRING: string;\n    public static BASELINE_SYMBOL: string;\n    public static BASELINE_MULTIPLIER: number;\n    public static HEIGHT_MULTIPLIER: number;\n\n    private static __canvas: HTMLCanvasElement | OffscreenCanvas;\n    private static __context: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D;\n\n    // TODO: These should be protected but they're initialized outside of the class.\n    public static _fonts: { [font: string]: IFontMetrics };\n    public static _newlines: number[];\n    public static _breakingSpaces: number[];\n\n    /**\n     * @param text - the text that was measured\n     * @param style - the style that was measured\n     * @param width - the measured width of the text\n     * @param height - the measured height of the text\n     * @param lines - an array of the lines of text broken by new lines and wrapping if specified in style\n     * @param lineWidths - an array of the line widths for each line matched to `lines`\n     * @param lineHeight - the measured line height for this style\n     * @param maxLineWidth - the maximum line width for all measured lines\n     * @param {PIXI.IFontMetrics} fontProperties - the font properties object from TextMetrics.measureFont\n     */\n    constructor(text: string, style: TextStyle, width: number, height: number, lines: string[], lineWidths: number[],\n        lineHeight: number, maxLineWidth: number, fontProperties: IFontMetrics)\n    {\n        this.text = text;\n        this.style = style;\n        this.width = width;\n        this.height = height;\n        this.lines = lines;\n        this.lineWidths = lineWidths;\n        this.lineHeight = lineHeight;\n        this.maxLineWidth = maxLineWidth;\n        this.fontProperties = fontProperties;\n    }\n\n    /**\n     * Measures the supplied string of text and returns a Rectangle.\n     * @param text - The text to measure.\n     * @param style - The text style to use for measuring\n     * @param wordWrap - Override for if word-wrap should be applied to the text.\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @returns Measured width and height of the text.\n     */\n    public static measureText(\n        text: string,\n        style: TextStyle,\n        wordWrap?: boolean,\n        canvas: HTMLCanvasElement | OffscreenCanvas = TextMetrics._canvas\n    ): TextMetrics\n    {\n        wordWrap = (wordWrap === undefined || wordWrap === null) ? style.wordWrap : wordWrap;\n        const font = style.toFontString();\n        const fontProperties = TextMetrics.measureFont(font);\n\n        // fallback in case UA disallow canvas data extraction\n        // (toDataURI, getImageData functions)\n        if (fontProperties.fontSize === 0)\n        {\n            fontProperties.fontSize = style.fontSize as number;\n            fontProperties.ascent = style.fontSize as number;\n        }\n\n        const context = canvas.getContext('2d', contextSettings);\n\n        context.font = font;\n\n        const outputText = wordWrap ? TextMetrics.wordWrap(text, style, canvas) : text;\n        const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n        const lineWidths = new Array<number>(lines.length);\n        let maxLineWidth = 0;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const lineWidth = context.measureText(lines[i]).width + ((lines[i].length - 1) * style.letterSpacing);\n\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n        let width = maxLineWidth + style.strokeThickness;\n\n        if (style.dropShadow)\n        {\n            width += style.dropShadowDistance;\n        }\n\n        const lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n        let height = Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness)\n            + ((lines.length - 1) * (lineHeight + style.leading));\n\n        if (style.dropShadow)\n        {\n            height += style.dropShadowDistance;\n        }\n\n        return new TextMetrics(\n            text,\n            style,\n            width,\n            height,\n            lines,\n            lineWidths,\n            lineHeight + style.leading,\n            maxLineWidth,\n            fontProperties\n        );\n    }\n\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     * @param text - String to apply word wrapping to\n     * @param style - the style to use when wrapping\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @returns New string with new lines applied where required\n     */\n    private static wordWrap(\n        text: string,\n        style: TextStyle,\n        canvas: HTMLCanvasElement | OffscreenCanvas = TextMetrics._canvas\n    ): string\n    {\n        const context = canvas.getContext('2d', contextSettings);\n\n        let width = 0;\n        let line = '';\n        let lines = '';\n\n        const cache: CharacterWidthCache = Object.create(null);\n        const { letterSpacing, whiteSpace } = style;\n\n        // How to handle whitespaces\n        const collapseSpaces = TextMetrics.collapseSpaces(whiteSpace);\n        const collapseNewlines = TextMetrics.collapseNewlines(whiteSpace);\n\n        // whether or not spaces may be added to the beginning of lines\n        let canPrependSpaces = !collapseSpaces;\n\n        // There is letterSpacing after every char except the last one\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n        // so for convenience the above needs to be compared to width + 1 extra letterSpace\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n        // ________________________________________________\n        // And then the final space is simply no appended to each line\n        const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n\n        // break text into words, spaces and newline chars\n        const tokens = TextMetrics.tokenize(text);\n\n        for (let i = 0; i < tokens.length; i++)\n        {\n            // get the word, space or newlineChar\n            let token = tokens[i];\n\n            // if word is a new line\n            if (TextMetrics.isNewline(token))\n            {\n                // keep the new line\n                if (!collapseNewlines)\n                {\n                    lines += TextMetrics.addLine(line);\n                    canPrependSpaces = !collapseSpaces;\n                    line = '';\n                    width = 0;\n                    continue;\n                }\n\n                // if we should collapse new lines\n                // we simply convert it into a space\n                token = ' ';\n            }\n\n            // if we should collapse repeated whitespaces\n            if (collapseSpaces)\n            {\n                // check both this and the last tokens for spaces\n                const currIsBreakingSpace = TextMetrics.isBreakingSpace(token);\n                const lastIsBreakingSpace = TextMetrics.isBreakingSpace(line[line.length - 1]);\n\n                if (currIsBreakingSpace && lastIsBreakingSpace)\n                {\n                    continue;\n                }\n            }\n\n            // get word width from cache if possible\n            const tokenWidth = TextMetrics.getFromCache(token, letterSpacing, cache, context);\n\n            // word is longer than desired bounds\n            if (tokenWidth > wordWrapWidth)\n            {\n                // if we are not already at the beginning of a line\n                if (line !== '')\n                {\n                    // start newlines for overflow words\n                    lines += TextMetrics.addLine(line);\n                    line = '';\n                    width = 0;\n                }\n\n                // break large word over multiple lines\n                if (TextMetrics.canBreakWords(token, style.breakWords))\n                {\n                    // break word into characters\n                    const characters = TextMetrics.wordWrapSplit(token);\n\n                    // loop the characters\n                    for (let j = 0; j < characters.length; j++)\n                    {\n                        let char = characters[j];\n\n                        let k = 1;\n                        // we are not at the end of the token\n\n                        while (characters[j + k])\n                        {\n                            const nextChar = characters[j + k];\n                            const lastChar = char[char.length - 1];\n\n                            // should not split chars\n                            if (!TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords))\n                            {\n                                // combine chars & move forward one\n                                char += nextChar;\n                            }\n                            else\n                            {\n                                break;\n                            }\n\n                            k++;\n                        }\n\n                        j += char.length - 1;\n\n                        const characterWidth = TextMetrics.getFromCache(char, letterSpacing, cache, context);\n\n                        if (characterWidth + width > wordWrapWidth)\n                        {\n                            lines += TextMetrics.addLine(line);\n                            canPrependSpaces = false;\n                            line = '';\n                            width = 0;\n                        }\n\n                        line += char;\n                        width += characterWidth;\n                    }\n                }\n\n                // run word out of the bounds\n                else\n                {\n                    // if there are words in this line already\n                    // finish that line and start a new one\n                    if (line.length > 0)\n                    {\n                        lines += TextMetrics.addLine(line);\n                        line = '';\n                        width = 0;\n                    }\n\n                    const isLastToken = i === tokens.length - 1;\n\n                    // give it its own line if it's not the end\n                    lines += TextMetrics.addLine(token, !isLastToken);\n                    canPrependSpaces = false;\n                    line = '';\n                    width = 0;\n                }\n            }\n\n            // word could fit\n            else\n            {\n                // word won't fit because of existing words\n                // start a new line\n                if (tokenWidth + width > wordWrapWidth)\n                {\n                    // if its a space we don't want it\n                    canPrependSpaces = false;\n\n                    // add a new line\n                    lines += TextMetrics.addLine(line);\n\n                    // start a new line\n                    line = '';\n                    width = 0;\n                }\n\n                // don't add spaces to the beginning of lines\n                if (line.length > 0 || !TextMetrics.isBreakingSpace(token) || canPrependSpaces)\n                {\n                    // add the word to the current line\n                    line += token;\n\n                    // update width counter\n                    width += tokenWidth;\n                }\n            }\n        }\n\n        lines += TextMetrics.addLine(line, false);\n\n        return lines;\n    }\n\n    /**\n     * Convienience function for logging each line added during the wordWrap method.\n     * @param line    - The line of text to add\n     * @param newLine - Add new line character to end\n     * @returns A formatted line\n     */\n    private static addLine(line: string, newLine = true): string\n    {\n        line = TextMetrics.trimRight(line);\n\n        line = (newLine) ? `${line}\\n` : line;\n\n        return line;\n    }\n\n    /**\n     * Gets & sets the widths of calculated characters in a cache object\n     * @param key            - The key\n     * @param letterSpacing  - The letter spacing\n     * @param cache          - The cache\n     * @param context        - The canvas context\n     * @returns The from cache.\n     */\n    private static getFromCache(key: string, letterSpacing: number, cache: CharacterWidthCache,\n        context: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D): number\n    {\n        let width = cache[key];\n\n        if (typeof width !== 'number')\n        {\n            const spacing = ((key.length) * letterSpacing);\n\n            width = context.measureText(key).width + spacing;\n            cache[key] = width;\n        }\n\n        return width;\n    }\n\n    /**\n     * Determines whether we should collapse breaking spaces.\n     * @param whiteSpace - The TextStyle property whiteSpace\n     * @returns Should collapse\n     */\n    private static collapseSpaces(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal' || whiteSpace === 'pre-line');\n    }\n\n    /**\n     * Determines whether we should collapse newLine chars.\n     * @param whiteSpace - The white space\n     * @returns  should collapse\n     */\n    private static collapseNewlines(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal');\n    }\n\n    /**\n     * Trims breaking whitespaces from string.\n     * @param  text - The text\n     * @returns Trimmed string\n     */\n    private static trimRight(text: string): string\n    {\n        if (typeof text !== 'string')\n        {\n            return '';\n        }\n\n        for (let i = text.length - 1; i >= 0; i--)\n        {\n            const char = text[i];\n\n            if (!TextMetrics.isBreakingSpace(char))\n            {\n                break;\n            }\n\n            text = text.slice(0, -1);\n        }\n\n        return text;\n    }\n\n    /**\n     * Determines if char is a newline.\n     * @param  char - The character\n     * @returns True if newline, False otherwise.\n     */\n    private static isNewline(char: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return (TextMetrics._newlines.indexOf(char.charCodeAt(0)) >= 0);\n    }\n\n    /**\n     * Determines if char is a breaking whitespace.\n     *\n     * It allows one to determine whether char should be a breaking whitespace\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param char - The character\n     * @param [_nextChar] - The next character\n     * @returns True if whitespace, False otherwise.\n     */\n    static isBreakingSpace(char: string, _nextChar?: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return (TextMetrics._breakingSpaces.indexOf(char.charCodeAt(0)) >= 0);\n    }\n\n    /**\n     * Splits a string into words, breaking-spaces and newLine characters\n     * @param  text - The text\n     * @returns  A tokenized array\n     */\n    private static tokenize(text: string): string[]\n    {\n        const tokens: string[] = [];\n        let token = '';\n\n        if (typeof text !== 'string')\n        {\n            return tokens;\n        }\n\n        for (let i = 0; i < text.length; i++)\n        {\n            const char = text[i];\n            const nextChar = text[i + 1];\n\n            if (TextMetrics.isBreakingSpace(char, nextChar) || TextMetrics.isNewline(char))\n            {\n                if (token !== '')\n                {\n                    tokens.push(token);\n                    token = '';\n                }\n\n                tokens.push(char);\n\n                continue;\n            }\n\n            token += char;\n        }\n\n        if (token !== '')\n        {\n            tokens.push(token);\n        }\n\n        return tokens;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to customise which words should break\n     * Examples are if the token is CJK or numbers.\n     * It must return a boolean.\n     * @param _token - The token\n     * @param  breakWords - The style attr break words\n     * @returns Whether to break word or not\n     */\n    static canBreakWords(_token: string, breakWords: boolean): boolean\n    {\n        return breakWords;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to determine whether a pair of characters\n     * should be broken by newlines\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param _char - The character\n     * @param _nextChar - The next character\n     * @param _token - The token/word the characters are from\n     * @param _index - The index in the token of the char\n     * @param _breakWords - The style attr break words\n     * @returns whether to break word or not\n     */\n    static canBreakChars(_char: string, _nextChar: string, _token: string, _index: number,\n        _breakWords: boolean): boolean\n    {\n        return true;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It is called when a token (usually a word) has to be split into separate pieces\n     * in order to determine the point to break a word.\n     * It must return an array of characters.\n     * @example\n     * // Correctly splits emojis, eg \"🤪🤪\" will result in two element array, each with one emoji.\n     * TextMetrics.wordWrapSplit = (token) => [...token];\n     * @param  token - The token to split\n     * @returns The characters of the token\n     */\n    static wordWrapSplit(token: string): string[]\n    {\n        return token.split('');\n    }\n\n    /**\n     * Calculates the ascent, descent and fontSize of a given font-style\n     * @param font - String representing the style of the font\n     * @returns Font properties object\n     */\n    public static measureFont(font: string): IFontMetrics\n    {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (TextMetrics._fonts[font])\n        {\n            return TextMetrics._fonts[font];\n        }\n\n        const properties: IFontMetrics = {\n            ascent: 0,\n            descent: 0,\n            fontSize: 0,\n        };\n\n        const canvas = TextMetrics._canvas;\n        const context = TextMetrics._context;\n\n        context.font = font;\n\n        const metricsString = TextMetrics.METRICS_STRING + TextMetrics.BASELINE_SYMBOL;\n        const width = Math.ceil(context.measureText(metricsString).width);\n        let baseline = Math.ceil(context.measureText(TextMetrics.BASELINE_SYMBOL).width);\n        const height = Math.ceil(TextMetrics.HEIGHT_MULTIPLIER * baseline);\n\n        baseline = baseline * TextMetrics.BASELINE_MULTIPLIER | 0;\n\n        canvas.width = width;\n        canvas.height = height;\n\n        context.fillStyle = '#f00';\n        context.fillRect(0, 0, width, height);\n\n        context.font = font;\n\n        context.textBaseline = 'alphabetic';\n        context.fillStyle = '#000';\n        context.fillText(metricsString, 0, baseline);\n\n        const imagedata = context.getImageData(0, 0, width, height).data;\n        const pixels = imagedata.length;\n        const line = width * 4;\n\n        let i = 0;\n        let idx = 0;\n        let stop = false;\n\n        // ascent. scan from top to bottom until we find a non red pixel\n        for (i = 0; i < baseline; ++i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n            if (!stop)\n            {\n                idx += line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.ascent = baseline - i;\n\n        idx = pixels - line;\n        stop = false;\n\n        // descent. scan from bottom to top until we find a non red pixel\n        for (i = height; i > baseline; --i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n\n            if (!stop)\n            {\n                idx -= line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.descent = i - baseline;\n        properties.fontSize = properties.ascent + properties.descent;\n\n        TextMetrics._fonts[font] = properties;\n\n        return properties;\n    }\n\n    /**\n     * Clear font metrics in metrics cache.\n     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n     */\n    public static clearMetrics(font = ''): void\n    {\n        if (font)\n        {\n            delete TextMetrics._fonts[font];\n        }\n        else\n        {\n            TextMetrics._fonts = {};\n        }\n    }\n\n    /**\n     * Cached canvas element for measuring text\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _canvas(): HTMLCanvasElement | OffscreenCanvas\n    {\n        if (!TextMetrics.__canvas)\n        {\n            let canvas: HTMLCanvasElement | OffscreenCanvas;\n\n            try\n            {\n                // OffscreenCanvas2D measureText can be up to 40% faster.\n                const c = new OffscreenCanvas(0, 0);\n                const context = c.getContext('2d', contextSettings);\n\n                if (context && context.measureText)\n                {\n                    TextMetrics.__canvas = c;\n\n                    return c;\n                }\n\n                canvas = settings.ADAPTER.createCanvas();\n            }\n            catch (ex)\n            {\n                canvas = settings.ADAPTER.createCanvas();\n            }\n            canvas.width = canvas.height = 10;\n            TextMetrics.__canvas = canvas;\n        }\n\n        return TextMetrics.__canvas;\n    }\n\n    /**\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _context(): CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D\n    {\n        if (!TextMetrics.__context)\n        {\n            TextMetrics.__context = TextMetrics._canvas.getContext('2d', contextSettings);\n        }\n\n        return TextMetrics.__context;\n    }\n}\n\n/**\n * Internal return object for {@link PIXI.TextMetrics.measureFont `TextMetrics.measureFont`}.\n * @typedef {object} FontMetrics\n * @property {number} ascent - The ascent distance\n * @property {number} descent - The descent distance\n * @property {number} fontSize - Font size from ascent to descent\n * @memberof PIXI.TextMetrics\n * @private\n */\n\n/**\n * Cache of {@see PIXI.TextMetrics.FontMetrics} objects.\n * @memberof PIXI.TextMetrics\n * @type {object}\n * @private\n */\nTextMetrics._fonts = {};\n\n/**\n * String used for calculate font metrics.\n * These characters are all tall to help calculate the height required for text.\n * @static\n * @memberof PIXI.TextMetrics\n * @name METRICS_STRING\n * @type {string}\n * @default |ÉqÅ\n */\nTextMetrics.METRICS_STRING = '|ÉqÅ';\n\n/**\n * Baseline symbol for calculate font metrics.\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_SYMBOL\n * @type {string}\n * @default M\n */\nTextMetrics.BASELINE_SYMBOL = 'M';\n\n/**\n * Baseline multiplier for calculate font metrics.\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_MULTIPLIER\n * @type {number}\n * @default 1.4\n */\nTextMetrics.BASELINE_MULTIPLIER = 1.4;\n\n/**\n * Height multiplier for setting height of canvas to calculate font metrics.\n * @static\n * @memberof PIXI.TextMetrics\n * @name HEIGHT_MULTIPLIER\n * @type {number}\n * @default 2.00\n */\nTextMetrics.HEIGHT_MULTIPLIER = 2.0;\n\n/**\n * Cache of new line chars.\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._newlines = [\n    0x000A, // line feed\n    0x000D, // carriage return\n];\n\n/**\n * Cache of breaking spaces.\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._breakingSpaces = [\n    0x0009, // character tabulation\n    0x0020, // space\n    0x2000, // en quad\n    0x2001, // em quad\n    0x2002, // en space\n    0x2003, // em space\n    0x2004, // three-per-em space\n    0x2005, // four-per-em space\n    0x2006, // six-per-em space\n    0x2008, // punctuation space\n    0x2009, // thin space\n    0x200A, // hair space\n    0x205F, // medium mathematical space\n    0x3000, // ideographic space\n];\n\n/**\n * A number, or a string containing a number.\n * @memberof PIXI\n * @typedef {object} IFontMetrics\n * @property {number} ascent - Font ascent\n * @property {number} descent - Font descent\n * @property {number} fontSize - Font size\n */\n", "/* eslint max-depth: [2, 8] */\nimport { Sprite } from '@pixi/sprite';\nimport { Texture  } from '@pixi/core';\nimport { settings } from '@pixi/settings';\nimport { Rectangle } from '@pixi/math';\nimport { sign, trimCanvas, hex2rgb, string2hex } from '@pixi/utils';\nimport { TEXT_GRADIENT } from './const';\nimport { TextStyle } from './TextStyle';\nimport { TextMetrics } from './TextMetrics';\n\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { Renderer } from '@pixi/core';\nimport type { ITextStyle } from './TextStyle';\n\nconst defaultDestroyOptions: IDestroyOptions = {\n    texture: true,\n    children: false,\n    baseTexture: true,\n};\n\ninterface ModernContext2D extends CanvasRenderingContext2D\n{\n    // for chrome less 94\n    textLetterSpacing?: number;\n    // for chrome greater 94\n    letterSpacing?: number;\n}\n\n/**\n * A Text Object will create a line or multiple lines of text.\n *\n * The text is created using the [Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API).\n *\n * The primary advantage of this class over BitmapText is that you have great control over the style of the text,\n * which you can change at runtime.\n *\n * The primary disadvantages is that each piece of text has it's own texture, which can use more memory.\n * When text changes, this texture has to be re-generated and re-uploaded to the GPU, taking up time.\n *\n * To split a line you can use '\\n' in your text string, or, on the `style` object,\n * change its `wordWrap` property to true and and give the `wordWrapWidth` property a value.\n *\n * A Text can be created directly from a string and a style object,\n * which can be generated [here](https://pixijs.io/pixi-text-style).\n *\n * ```js\n * let text = new PIXI.Text('This is a PixiJS text',{fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'});\n * ```\n * @memberof PIXI\n */\nexport class Text extends Sprite\n{\n    /**\n     * New behavior for `lineHeight` that's meant to mimic HTML text. A value of `true` will\n     * make sure the first baseline is offset by the `lineHeight` value if it is greater than `fontSize`.\n     * A value of `false` will use the legacy behavior and not change the baseline of the first line.\n     * In the next major release, we'll enable this by default.\n     */\n    public static nextLineHeightBehavior = false;\n\n    /**\n     * New rendering behavior for letter-spacing which uses Chrome's new native API. This will\n     * lead to more accurate letter-spacing results because it does not try to manually draw\n     * each character. However, this Chrome API is experimental and may not serve all cases yet.\n     */\n    public static experimentalLetterSpacing = false;\n\n    /** The canvas element that everything is drawn to. */\n    public canvas: HTMLCanvasElement;\n    /** The canvas 2d context that everything is drawn with. */\n    public context: ModernContext2D;\n    public localStyleID: number;\n    public dirty: boolean;\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     *\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @default PIXI.settings.RESOLUTION\n     */\n    _resolution: number;\n    _autoResolution: boolean;\n\n    /**\n     * Private tracker for the current text.\n     * @private\n     */\n    protected _text: string;\n\n    /**\n     * Private tracker for the current font.\n     * @private\n     */\n    protected _font: string;\n\n    /**\n     * Private tracker for the current style.\n     * @private\n     */\n    protected _style: TextStyle;\n\n    /**\n     * Private listener to track style changes.\n     * @private\n     */\n    protected _styleListener: () => void;\n\n    /**\n     * Keep track if this Text object created it's own canvas\n     * element (`true`) or uses the constructor argument (`false`).\n     * Used to workaround a GC issues with Safari < 13 when\n     * destroying Text. See `destroy` for more info.\n     */\n    private _ownCanvas: boolean;\n\n    /**\n     * @param text - The string that you would like the text to display\n     * @param {object|PIXI.TextStyle} [style] - The style parameters\n     * @param canvas - The canvas element for drawing text\n     */\n    constructor(text?: string | number, style?: Partial<ITextStyle> | TextStyle, canvas?: HTMLCanvasElement)\n    {\n        let ownCanvas = false;\n\n        if (!canvas)\n        {\n            canvas = settings.ADAPTER.createCanvas();\n            ownCanvas = true;\n        }\n\n        canvas.width = 3;\n        canvas.height = 3;\n\n        const texture = Texture.from(canvas);\n\n        texture.orig = new Rectangle();\n        texture.trim = new Rectangle();\n\n        super(texture);\n\n        this._ownCanvas = ownCanvas;\n        this.canvas = canvas;\n        this.context = canvas.getContext('2d', {\n            // required for trimming to work without warnings\n            willReadFrequently: true,\n        }) as CanvasRenderingContext2D;\n\n        this._resolution = settings.RESOLUTION;\n        this._autoResolution = true;\n        this._text = null;\n        this._style = null;\n        this._styleListener = null;\n        this._font = '';\n\n        this.text = text;\n        this.style = style;\n\n        this.localStyleID = -1;\n    }\n\n    /**\n     * Renders text to its canvas, and updates its texture.\n     *\n     * By default this is used internally to ensure the texture is correct before rendering,\n     * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n     * and then shared across multiple Sprites.\n     * @param respectDirty - Whether to abort updating the text if the Text isn't dirty and the function is called.\n     */\n    public updateText(respectDirty: boolean): void\n    {\n        const style = this._style;\n\n        // check if style has changed..\n        if (this.localStyleID !== style.styleID)\n        {\n            this.dirty = true;\n            this.localStyleID = style.styleID;\n        }\n\n        if (!this.dirty && respectDirty)\n        {\n            return;\n        }\n\n        this._font = this._style.toFontString();\n\n        const context = this.context;\n        const measured = TextMetrics.measureText(this._text || ' ', this._style, this._style.wordWrap, this.canvas);\n        const width = measured.width;\n        const height = measured.height;\n        const lines = measured.lines;\n        const lineHeight = measured.lineHeight;\n        const lineWidths = measured.lineWidths;\n        const maxLineWidth = measured.maxLineWidth;\n        const fontProperties = measured.fontProperties;\n\n        this.canvas.width = Math.ceil(Math.ceil((Math.max(1, width) + (style.padding * 2))) * this._resolution);\n        this.canvas.height = Math.ceil(Math.ceil((Math.max(1, height) + (style.padding * 2))) * this._resolution);\n\n        context.scale(this._resolution, this._resolution);\n\n        context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n        context.font = this._font;\n        context.lineWidth = style.strokeThickness;\n        context.textBaseline = style.textBaseline;\n        context.lineJoin = style.lineJoin;\n        context.miterLimit = style.miterLimit;\n\n        let linePositionX: number;\n        let linePositionY: number;\n\n        // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n        const passesCount = style.dropShadow ? 2 : 1;\n\n        // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n        // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n        //\n        // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n        // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n        // and the stroke; and fill drop shadows would appear over the top of the stroke.\n        //\n        // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n        // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n        // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n        // beneath the text, whilst also having the proper text shadow styling.\n        for (let i = 0; i < passesCount; ++i)\n        {\n            const isShadowPass = style.dropShadow && i === 0;\n            // we only want the drop shadow, so put text way off-screen\n            const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + (style.padding * 2)) : 0;\n            const dsOffsetShadow = dsOffsetText * this._resolution;\n\n            if (isShadowPass)\n            {\n                // On Safari, text with gradient and drop shadows together do not position correctly\n                // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n                // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n                context.fillStyle = 'black';\n                context.strokeStyle = 'black';\n\n                const dropShadowColor = style.dropShadowColor;\n                const rgb = hex2rgb(typeof dropShadowColor === 'number' ? dropShadowColor : string2hex(dropShadowColor));\n                const dropShadowBlur = style.dropShadowBlur * this._resolution;\n                const dropShadowDistance = style.dropShadowDistance * this._resolution;\n\n                context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${style.dropShadowAlpha})`;\n                context.shadowBlur = dropShadowBlur;\n                context.shadowOffsetX = Math.cos(style.dropShadowAngle) * dropShadowDistance;\n                context.shadowOffsetY = (Math.sin(style.dropShadowAngle) * dropShadowDistance) + dsOffsetShadow;\n            }\n            else\n            {\n                // set canvas text styles\n                context.fillStyle = this._generateFillStyle(style, lines, measured);\n                // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n                //       the setter converts to string. See this thread for more details:\n                //       https://github.com/microsoft/TypeScript/issues/2521\n                context.strokeStyle = style.stroke as string;\n\n                context.shadowColor = 'black';\n                context.shadowBlur = 0;\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n            }\n\n            let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n\n            if (!Text.nextLineHeightBehavior || lineHeight - fontProperties.fontSize < 0)\n            {\n                linePositionYShift = 0;\n            }\n\n            // draw lines line by line\n            for (let i = 0; i < lines.length; i++)\n            {\n                linePositionX = style.strokeThickness / 2;\n                linePositionY = ((style.strokeThickness / 2) + (i * lineHeight)) + fontProperties.ascent\n                    + linePositionYShift;\n\n                if (style.align === 'right')\n                {\n                    linePositionX += maxLineWidth - lineWidths[i];\n                }\n                else if (style.align === 'center')\n                {\n                    linePositionX += (maxLineWidth - lineWidths[i]) / 2;\n                }\n\n                if (style.stroke && style.strokeThickness)\n                {\n                    this.drawLetterSpacing(\n                        lines[i],\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText,\n                        true\n                    );\n                }\n\n                if (style.fill)\n                {\n                    this.drawLetterSpacing(\n                        lines[i],\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText\n                    );\n                }\n            }\n        }\n\n        this.updateTexture();\n    }\n\n    /**\n     * Render the text with letter-spacing.\n     * @param text - The text to draw\n     * @param x - Horizontal position to draw the text\n     * @param y - Vertical position to draw the text\n     * @param isStroke - Is this drawing for the outside stroke of the\n     *  text? If not, it's for the inside fill\n     */\n    private drawLetterSpacing(text: string, x: number, y: number, isStroke = false): void\n    {\n        const style = this._style;\n\n        // letterSpacing of 0 means normal\n        const letterSpacing = style.letterSpacing;\n\n        // Checking that we can use moddern canvas2D api\n        // https://developer.chrome.com/origintrials/#/view_trial/3585991203293757441\n        // note: this is unstable API, Chrome less 94 use a `textLetterSpacing`, newest use a letterSpacing\n        // eslint-disable-next-line max-len\n        const supportLetterSpacing = Text.experimentalLetterSpacing\n            && ('letterSpacing' in CanvasRenderingContext2D.prototype\n                || 'textLetterSpacing' in CanvasRenderingContext2D.prototype);\n\n        if (letterSpacing === 0 || supportLetterSpacing)\n        {\n            if (supportLetterSpacing)\n            {\n                this.context.letterSpacing = letterSpacing;\n                this.context.textLetterSpacing = letterSpacing;\n            }\n\n            if (isStroke)\n            {\n                this.context.strokeText(text, x, y);\n            }\n            else\n            {\n                this.context.fillText(text, x, y);\n            }\n\n            return;\n        }\n\n        let currentPosition = x;\n\n        // Using Array.from correctly splits characters whilst keeping emoji together.\n        // This is not supported on IE as it requires ES6, so regular text splitting occurs.\n        // This also doesn't account for emoji that are multiple emoji put together to make something else.\n        // Handling all of this would require a big library itself.\n        // https://medium.com/@giltayar/iterating-over-emoji-characters-the-es6-way-f06e4589516\n        // https://github.com/orling/grapheme-splitter\n        const stringArray = Array.from ? Array.from(text) : text.split('');\n        let previousWidth = this.context.measureText(text).width;\n        let currentWidth = 0;\n\n        for (let i = 0; i < stringArray.length; ++i)\n        {\n            const currentChar = stringArray[i];\n\n            if (isStroke)\n            {\n                this.context.strokeText(currentChar, currentPosition, y);\n            }\n            else\n            {\n                this.context.fillText(currentChar, currentPosition, y);\n            }\n            let textStr = '';\n\n            for (let j = i + 1; j < stringArray.length; ++j)\n            {\n                textStr += stringArray[j];\n            }\n            currentWidth = this.context.measureText(textStr).width;\n            currentPosition += previousWidth - currentWidth + letterSpacing;\n            previousWidth = currentWidth;\n        }\n    }\n\n    /** Updates texture size based on canvas size. */\n    private updateTexture(): void\n    {\n        const canvas = this.canvas;\n\n        if (this._style.trim)\n        {\n            const trimmed = trimCanvas(canvas);\n\n            if (trimmed.data)\n            {\n                canvas.width = trimmed.width;\n                canvas.height = trimmed.height;\n                this.context.putImageData(trimmed.data, 0, 0);\n            }\n        }\n\n        const texture = this._texture;\n        const style = this._style;\n        const padding = style.trim ? 0 : style.padding;\n        const baseTexture = texture.baseTexture;\n\n        texture.trim.width = texture._frame.width = canvas.width / this._resolution;\n        texture.trim.height = texture._frame.height = canvas.height / this._resolution;\n        texture.trim.x = -padding;\n        texture.trim.y = -padding;\n\n        texture.orig.width = texture._frame.width - (padding * 2);\n        texture.orig.height = texture._frame.height - (padding * 2);\n\n        // call sprite onTextureUpdate to update scale if _width or _height were set\n        this._onTextureUpdate();\n\n        baseTexture.setRealSize(canvas.width, canvas.height, this._resolution);\n\n        texture.updateUvs();\n\n        this.dirty = false;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     * @param renderer - The renderer\n     */\n    protected _render(renderer: Renderer): void\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        this.updateText(true);\n\n        super._render(renderer);\n    }\n\n    /** Updates the transform on all children of this container for rendering. */\n    public updateTransform(): void\n    {\n        this.updateText(true);\n\n        super.updateTransform();\n    }\n\n    public getBounds(skipUpdate?: boolean, rect?: Rectangle): Rectangle\n    {\n        this.updateText(true);\n\n        if (this._textureID === -1)\n        {\n            // texture was updated: recalculate transforms\n            skipUpdate = false;\n        }\n\n        return super.getBounds(skipUpdate, rect);\n    }\n\n    /**\n     * Gets the local bounds of the text object.\n     * @param rect - The output rectangle.\n     * @returns The bounds.\n     */\n    public getLocalBounds(rect?: Rectangle): Rectangle\n    {\n        this.updateText(true);\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /** Calculates the bounds of the Text as a rectangle. The bounds calculation takes the worldTransform into account. */\n    protected _calculateBounds(): void\n    {\n        this.calculateVertices();\n        // if we have already done this on THIS frame.\n        this._bounds.addQuad(this.vertexData);\n    }\n\n    /**\n     * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n     * @param style - The style.\n     * @param lines - The lines of text.\n     * @param metrics\n     * @returns The fill style\n     */\n    private _generateFillStyle(\n        style: TextStyle, lines: string[], metrics: TextMetrics\n    ): string | CanvasGradient | CanvasPattern\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        const fillStyle: string | string[] | CanvasGradient | CanvasPattern = style.fill as any;\n\n        if (!Array.isArray(fillStyle))\n        {\n            return fillStyle;\n        }\n        else if (fillStyle.length === 1)\n        {\n            return fillStyle[0];\n        }\n\n        // the gradient will be evenly spaced out according to how large the array is.\n        // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n        let gradient: string[] | CanvasGradient;\n\n        // a dropshadow will enlarge the canvas and result in the gradient being\n        // generated with the incorrect dimensions\n        const dropShadowCorrection = (style.dropShadow) ? style.dropShadowDistance : 0;\n\n        // should also take padding into account, padding can offset the gradient\n        const padding = style.padding || 0;\n\n        const width = (this.canvas.width / this._resolution) - dropShadowCorrection - (padding * 2);\n        const height = (this.canvas.height / this._resolution) - dropShadowCorrection - (padding * 2);\n\n        // make a copy of the style settings, so we can manipulate them later\n        const fill = fillStyle.slice();\n        const fillGradientStops = style.fillGradientStops.slice();\n\n        // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n        if (!fillGradientStops.length)\n        {\n            const lengthPlus1 = fill.length + 1;\n\n            for (let i = 1; i < lengthPlus1; ++i)\n            {\n                fillGradientStops.push(i / lengthPlus1);\n            }\n        }\n\n        // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n        // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n        fill.unshift(fillStyle[0]);\n        fillGradientStops.unshift(0);\n\n        fill.push(fillStyle[fillStyle.length - 1]);\n        fillGradientStops.push(1);\n\n        if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL)\n        {\n            // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n            gradient = this.context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n\n            // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n            // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n\n            // Actual height of the text itself, not counting spacing for lineHeight/leading/dropShadow etc\n            const textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n\n            for (let i = 0; i < lines.length; i++)\n            {\n                const lastLineBottom = (metrics.lineHeight * (i - 1)) + textHeight;\n                const thisLineTop = metrics.lineHeight * i;\n                let thisLineGradientStart = thisLineTop;\n\n                // Handle case where last & this line overlap\n                if (i > 0 && lastLineBottom > thisLineTop)\n                {\n                    thisLineGradientStart = (thisLineTop + lastLineBottom) / 2;\n                }\n\n                const thisLineBottom = thisLineTop + textHeight;\n                const nextLineTop = metrics.lineHeight * (i + 1);\n                let thisLineGradientEnd = thisLineBottom;\n\n                // Handle case where this & next line overlap\n                if (i + 1 < lines.length && nextLineTop < thisLineBottom)\n                {\n                    thisLineGradientEnd = (thisLineBottom + nextLineTop) / 2;\n                }\n\n                // textHeight, but as a 0-1 size in global gradient stop space\n                const gradStopLineHeight = (thisLineGradientEnd - thisLineGradientStart) / height;\n\n                for (let j = 0; j < fill.length; j++)\n                {\n                    // 0-1 stop point for the current line, multiplied to global space afterwards\n                    let lineStop = 0;\n\n                    if (typeof fillGradientStops[j] === 'number')\n                    {\n                        lineStop = fillGradientStops[j];\n                    }\n                    else\n                    {\n                        lineStop = j / fill.length;\n                    }\n\n                    let globalStop = Math.min(1, Math.max(0,\n                        (thisLineGradientStart / height) + (lineStop * gradStopLineHeight)));\n\n                    // There's potential for floating point precision issues at the seams between gradient repeats.\n                    globalStop = Number(globalStop.toFixed(5));\n                    gradient.addColorStop(globalStop, fill[j]);\n                }\n            }\n        }\n        else\n        {\n            // start the gradient at the center left of the canvas, and end at the center right of the canvas\n            gradient = this.context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n\n            // can just evenly space out the gradients in this case, as multiple lines makes no difference\n            // to an even left to right gradient\n            const totalIterations = fill.length + 1;\n            let currentIteration = 1;\n\n            for (let i = 0; i < fill.length; i++)\n            {\n                let stop: number;\n\n                if (typeof fillGradientStops[i] === 'number')\n                {\n                    stop = fillGradientStops[i];\n                }\n                else\n                {\n                    stop = currentIteration / totalIterations;\n                }\n                gradient.addColorStop(stop, fill[i]);\n                currentIteration++;\n            }\n        }\n\n        return gradient;\n    }\n\n    /**\n     * Destroys this text object.\n     *\n     * Note* Unlike a Sprite, a Text object will automatically destroy its baseTexture and texture as\n     * the majority of the time the texture will not be shared with any other Sprites.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their\n     *  destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=true] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=true] - Should it destroy the base texture of the sprite as well\n     */\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        if (typeof options === 'boolean')\n        {\n            options = { children: options };\n        }\n\n        options = Object.assign({}, defaultDestroyOptions, options);\n\n        super.destroy(options);\n\n        // set canvas width and height to 0 to workaround memory leak in Safari < 13\n        // https://stackoverflow.com/questions/52532614/total-canvas-memory-use-exceeds-the-maximum-limit-safari-12\n        if (this._ownCanvas)\n        {\n            this.canvas.height = this.canvas.width = 0;\n        }\n\n        // make sure to reset the context and canvas.. dont want this hanging around in memory!\n        this.context = null;\n        this.canvas = null;\n\n        this._style = null;\n    }\n\n    /** The width of the Text, setting this will actually modify the scale to achieve the value set. */\n    get width(): number\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    set width(value: number)\n    {\n        this.updateText(true);\n\n        const s = sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._texture.orig.width;\n        this._width = value;\n    }\n\n    /** The height of the Text, setting this will actually modify the scale to achieve the value set. */\n    get height(): number\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    set height(value: number)\n    {\n        this.updateText(true);\n\n        const s = sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * Set the style of the text.\n     *\n     * Set up an event listener to listen for changes on the style object and mark the text as dirty.\n     */\n    get style(): TextStyle | Partial<ITextStyle>\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the ITextStyle\n        //       since the setter creates the TextStyle. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        return this._style;\n    }\n\n    set style(style: TextStyle | Partial<ITextStyle>)\n    {\n        style = style || {};\n\n        if (style instanceof TextStyle)\n        {\n            this._style = style;\n        }\n        else\n        {\n            this._style = new TextStyle(style);\n        }\n\n        this.localStyleID = -1;\n        this.dirty = true;\n    }\n\n    /** Set the copy for the text object. To split a line you can use '\\n'. */\n    get text(): string\n    {\n        return this._text;\n    }\n\n    set text(text: string | number)\n    {\n        text = String(text === null || text === undefined ? '' : text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     *\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @default 1\n     */\n    get resolution(): number\n    {\n        return this._resolution;\n    }\n\n    set resolution(value: number)\n    {\n        this._autoResolution = false;\n\n        if (this._resolution === value)\n        {\n            return;\n        }\n\n        this._resolution = value;\n        this.dirty = true;\n    }\n}\n"],
  "mappings": "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",
  "names": ["d", "b", "TEXT_GRADIENT", "TextStyle", "TextMetrics", "Text"]
}
