export declare class UserMessageData {
    static M: string;
    static F: string;
    private _roomIndex;
    private _x;
    private _y;
    private _z;
    private _dir;
    private _name;
    private _userType;
    private _sex;
    private _figure;
    private _custom;
    private _activityPoints;
    private _webID;
    private _groupID;
    private _groupStatus;
    private _groupName;
    private _subType;
    private _ownerId;
    private _ownerName;
    private _rarityLevel;
    private _hasSaddle;
    private _isRiding;
    private _canBreed;
    private _canHarvest;
    private _canRevive;
    private _hasBreedingPermission;
    private _petLevel;
    private _petPosture;
    private _botSkills;
    private _isModerator;
    private _isReadOnly;
    constructor(k: number);
    setReadOnly(): void;
    get roomIndex(): number;
    get x(): number;
    set x(k: number);
    get y(): number;
    set y(k: number);
    get z(): number;
    set z(k: number);
    get dir(): number;
    set dir(k: number);
    get name(): string;
    set name(k: string);
    get userType(): number;
    set userType(k: number);
    get sex(): string;
    set sex(k: string);
    get figure(): string;
    set figure(k: string);
    get custom(): string;
    set custom(k: string);
    get activityPoints(): number;
    set activityPoints(k: number);
    get webID(): number;
    set webID(k: number);
    get groupID(): number;
    set groupID(groupId: number);
    get groupName(): string;
    set groupName(k: string);
    get groupStatus(): number;
    set groupStatus(k: number);
    get subType(): string;
    set subType(k: string);
    get ownerId(): number;
    set ownerId(k: number);
    get ownerName(): string;
    set ownerName(k: string);
    get rarityLevel(): number;
    set rarityLevel(k: number);
    get hasSaddle(): boolean;
    set hasSaddle(k: boolean);
    get isRiding(): boolean;
    set isRiding(k: boolean);
    get canBreed(): boolean;
    set canBreed(k: boolean);
    get canHarvest(): boolean;
    set canHarvest(k: boolean);
    get canRevive(): boolean;
    set canRevive(k: boolean);
    get hasBreedingPermission(): boolean;
    set hasBreedingPermission(k: boolean);
    get petLevel(): number;
    set petLevel(k: number);
    get petPosture(): string;
    set petPosture(k: string);
    get botSkills(): number[];
    set botSkills(k: number[]);
    get isModerator(): boolean;
    set isModerator(k: boolean);
}
