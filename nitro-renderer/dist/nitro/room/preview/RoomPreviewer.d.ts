import { RenderTexture } from '@pixi/core';
import { DisplayObject } from '@pixi/display';
import { Point } from '@pixi/math';
import { IGetImageListener, IImageResult, IObjectData, IRoomEngine, IRoomObjectController, IRoomRenderingCanvas, IVector3D } from '../../../api';
export declare class RoomPreviewer {
    static SCALE_NORMAL: number;
    static SCALE_SMALL: number;
    static PREVIEW_COUNTER: number;
    static PREVIEW_CANVAS_ID: number;
    static PREVIEW_OBJECT_ID: number;
    static PREVIEW_OBJECT_LOCATION_X: number;
    static PREVIEW_OBJECT_LOCATION_Y: number;
    private static ALLOWED_IMAGE_CUT;
    private static AUTOMATIC_STATE_CHANGE_INTERVAL;
    private static ZOOM_ENABLED;
    private _roomEngine;
    private _planeParser;
    private _previewRoomId;
    private _currentPreviewObjectType;
    private _currentPreviewObjectCategory;
    private _currentPreviewObjectData;
    private _currentPreviewRectangle;
    private _currentPreviewCanvasWidth;
    private _currentPreviewCanvasHeight;
    private _currentPreviewScale;
    private _currentPreviewNeedsZoomOut;
    private _automaticStateChange;
    private _previousAutomaticStateChangeTime;
    private _addViewOffset;
    private _backgroundColor;
    private _backgroundSprite;
    private _disableUpdate;
    constructor(roomEngine: IRoomEngine, roomId?: number);
    dispose(): void;
    private createRoomForPreview;
    reset(k: boolean): void;
    updatePreviewModel(model: string, wallHeight: number, scale?: boolean): void;
    addFurnitureIntoRoom(classId: number, direction: IVector3D, objectData?: IObjectData, extra?: string): number;
    addWallItemIntoRoom(classId: number, direction: IVector3D, objectData: string): number;
    addAvatarIntoRoom(figure: string, effect: number): number;
    addPetIntoRoom(figure: string): number;
    updateUserPosture(type: string, parameter?: string): void;
    updateUserGesture(gestureId: number): void;
    updateUserEffect(effectId: number): void;
    updateObjectUserFigure(figure: string, gender?: string, subType?: string, isRiding?: boolean): boolean;
    updateObjectUserAction(action: string, value: number, parameter?: string): void;
    updateObjectStuffData(stuffData: IObjectData): void;
    changeRoomObjectState(): void;
    changeRoomObjectDirection(): void;
    private checkAutomaticRoomObjectStateChange;
    getRoomCanvas(width: number, height: number): DisplayObject;
    modifyRoomCanvas(width: number, height: number): void;
    set addViewOffset(point: Point);
    get addViewOffset(): Point;
    updatePreviewObjectBoundingRectangle(point: Point): void;
    private validatePreviewSize;
    zoomIn(): void;
    zoomOut(): void;
    updateAvatarDirection(direction: number, headDirection: number): void;
    updateObjectRoom(floorType?: string, wallType?: string, landscapeType?: string, _arg_4?: boolean): boolean;
    updateRoomWallsAndFloorVisibility(wallsVisible: boolean, floorsVisible?: boolean): void;
    private getCanvasOffset;
    updatePreviewRoomView(k?: boolean): void;
    set disableUpdate(flag: boolean);
    set disableRoomEngineUpdate(flag: boolean);
    private onRoomInitializedonRoomInitialized;
    private onRoomObjectAdded;
    updateRoomEngine(): void;
    getRenderingCanvas(): IRoomRenderingCanvas;
    getGenericRoomObjectImage(type: string, value: string, direction: IVector3D, scale: number, listener: IGetImageListener, bgColor?: number, extras?: string, objectData?: IObjectData, state?: number, frame?: number, posture?: string): IImageResult;
    getRoomObjectImage(direction: IVector3D, scale: number, listener: IGetImageListener, bgColor?: number): IImageResult;
    getRoomObjectCurrentImage(): RenderTexture;
    getRoomPreviewObject(): IRoomObjectController;
    getRoomPreviewOwnRoomObject(): IRoomObjectController;
    get isRoomEngineReady(): boolean;
    get roomId(): number;
    get backgroundColor(): number;
    set backgroundColor(color: number);
    get width(): number;
    get height(): number;
}
