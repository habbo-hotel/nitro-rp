import { IVector3D } from '../../../api';
import { RoomMapData } from './RoomMapData';
export declare class RoomPlaneParser {
    private static FLOOR_THICKNESS;
    private static WALL_THICKNESS;
    private static MAX_WALL_ADDITIONAL_HEIGHT;
    static TILE_BLOCKED: number;
    static TILE_HOLE: number;
    private _tileMatrix;
    private _tileMatrixOriginal;
    private _width;
    private _height;
    private _minX;
    private _maxX;
    private _minY;
    private _maxY;
    private _planes;
    private _wallHeight;
    private _wallThicknessMultiplier;
    private _floorThicknessMultiplier;
    private _fixedWallHeight;
    private _floorHeight;
    private _floorHoles;
    private _floorHoleMatrix;
    private _restrictsDragging;
    private _restrictsScaling;
    private _restrictedScale;
    constructor();
    private static getFloorHeight;
    private static findEntranceTile;
    private static expandFloorTiles;
    private static addTileTypes;
    private static unpadHeightMap;
    private static padHeightMap;
    get minX(): number;
    get maxX(): number;
    get minY(): number;
    get maxY(): number;
    get tileMapWidth(): number;
    get tileMapHeight(): number;
    get planeCount(): number;
    get floorHeight(): number;
    get wallHeight(): number;
    set wallHeight(k: number);
    get wallThicknessMultiplier(): number;
    set wallThicknessMultiplier(k: number);
    get floorThicknessMultiplier(): number;
    set floorThicknessMultiplier(k: number);
    dispose(): void;
    reset(): void;
    initializeTileMap(width: number, height: number): boolean;
    setTileHeight(k: number, _arg_2: number, _arg_3: number): boolean;
    getTileHeight(k: number, _arg_2: number): number;
    private getTileHeightOriginal;
    private getTileHeightInternal;
    initializeFromTileData(k?: number): boolean;
    private initialize;
    private generateWallData;
    private hidePeninsulaWallChains;
    private updateWallsNextToHoles;
    private resolveOriginalWallIndex;
    private hideOriginallyHiddenWalls;
    private checkWallHiding;
    private addWalls;
    private createWallPlanes;
    private extractTopWall;
    private extractRightWall;
    private extractBottomWall;
    private extractLeftWall;
    private addWall;
    private addFloor;
    initializeFromMapData(data: RoomMapData): boolean;
    private addPlane;
    getMapData(): RoomMapData;
    getPlaneLocation(k: number): IVector3D;
    getPlaneNormal(k: number): IVector3D;
    getPlaneLeftSide(k: number): IVector3D;
    getPlaneRightSide(k: number): IVector3D;
    getPlaneNormalDirection(k: number): IVector3D;
    getPlaneSecondaryNormals(k: number): IVector3D[];
    getPlaneType(k: number): number;
    getPlaneMaskCount(k: number): number;
    getPlaneMaskLeftSideLoc(k: number, _arg_2: number): number;
    getPlaneMaskRightSideLoc(k: number, _arg_2: number): number;
    getPlaneMaskLeftSideLength(k: number, _arg_2: number): number;
    getPlaneMaskRightSideLength(k: number, _arg_2: number): number;
    addFloorHole(k: number, _arg_2: number, _arg_3: number, _arg_4: number, _arg_5: number): void;
    removeFloorHole(k: number): void;
    resetFloorHoles(): void;
    private initializeHoleMap;
    private extractPlanes;
    get restrictsDragging(): boolean;
    set restrictsDragging(flag: boolean);
    get restrictsScaling(): boolean;
    set restrictsScaling(flag: boolean);
    get restrictedScale(): number;
    set restrictedScale(scale: number);
}
