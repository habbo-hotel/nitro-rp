import { IGraphicAsset } from '../../../../../api';
import { Vector3D } from '../../../../avatar';
import { FurnitureParticleSystemParticle } from './FurnitureParticleSystemParticle';
export declare class FurnitureParticleSystemEmitter extends FurnitureParticleSystemParticle {
    static CONE: string;
    static PLANE: string;
    static SPHERE: string;
    private _name;
    private _roomObjectSpriteId;
    private _force;
    private _timeStep;
    private _gravity;
    private _airFriction;
    private _explosionShape;
    private _particleConfigurations;
    private _particles;
    private _maxNumberOfParticles;
    private _particlesPerFrame;
    private _emittedParticles;
    private _fuseTime;
    private _energy;
    private _hasIgnited;
    private _burstPulse;
    private _emitterDirection;
    constructor(name?: string, spriteId?: number);
    dispose(): void;
    setup(maxNumOfParticles: number, particlesPerFrame: number, force: number, direction: Vector3D, gravity: number, airFriction: number, explosionShape: string, energy: number, fuseTime: number, burstPulse: number): void;
    reset(): void;
    copyStateFrom(emitter: FurnitureParticleSystemEmitter, scale: number): void;
    configureParticle(lifeTIme: number, isEmitter: boolean, frames: IGraphicAsset[], fade: boolean): void;
    protected ignite(): void;
    private releaseParticles;
    private getRandomParticleConfiguration;
    update(): void;
    verlet(): void;
    private satisfyConstraints;
    private accumulateForces;
    get particles(): FurnitureParticleSystemParticle[];
    get hasIgnited(): boolean;
    private randomBoolean;
    get roomObjectSpriteId(): number;
}
