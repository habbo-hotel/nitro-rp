import { RenderTexture } from '@pixi/core';
import { IAssetPlaneVisualization, IAssetPlaneVisualizationData, IGraphicAssetCollection, IRoomGeometry, IVector3D } from '../../../../../../../api';
import { PlaneTextureCache } from '../../../../../../../pixi-proxy';
import { PlaneBitmapData } from '../../utils';
import { IPlaneRasterizer } from '../IPlaneRasterizer';
import { Plane } from './Plane';
import { PlaneMaterial } from './PlaneMaterial';
import { PlaneTexture } from './PlaneTexture';
import { PlaneVisualizationLayer } from './PlaneVisualizationLayer';
export declare class PlaneRasterizer implements IPlaneRasterizer {
    protected static DEFAULT: string;
    private _assetCollection;
    private _materials;
    private _textures;
    private _planes;
    private _geometries;
    private _data;
    constructor();
    protected get data(): IAssetPlaneVisualizationData;
    protected get assetCollection(): IGraphicAssetCollection;
    initializeDimensions(k: number, _arg_2: number): boolean;
    dispose(): void;
    clearCache(): void;
    initialize(data: IAssetPlaneVisualizationData): void;
    reinitialize(): void;
    private resetMaterials;
    private resetTextures;
    protected getTexture(textureId: string): PlaneTexture;
    protected getMaterial(materialId: string): PlaneMaterial;
    protected getPlane(planeId: string): Plane;
    protected addPlane(id: string, plane: Plane): boolean;
    initializeAssetCollection(collection: IGraphicAssetCollection): void;
    private initializeAll;
    private initializeTexturesAndMaterials;
    protected initializePlanes(): void;
    private parseTextures;
    private parsePlaneMaterials;
    private parsePlaneMaterialCellColumn;
    private parsePlaneMaterialCells;
    private parseExtraItemTypes;
    private parseExtraItemOffsets;
    protected getGeometry(size: number, horizontalAngle: number, verticalAngle: number): IRoomGeometry;
    protected parseVisualizations(plane: Plane, visualizations: IAssetPlaneVisualization[]): void;
    render(planeId: string, textureCache: PlaneTextureCache, canvas: RenderTexture, id: string, width: number, height: number, size: number, normal: IVector3D, useTexture: boolean, offsetX?: number, offsetY?: number, maxX?: number, maxY?: number, timeSinceStartMs?: number): PlaneBitmapData;
    getTextureIdentifier(k: number, normal: IVector3D): string;
    getLayers(id: string): PlaneVisualizationLayer[];
}
