import { Rectangle } from '@pixi/math';
import { IObjectVisualizationData, IPlaneVisualization, IRoomGeometry, IRoomPlane } from '../../../../../api';
import { RoomObjectSpriteVisualization } from '../../../../../room';
import { RoomMapMaskData } from '../../RoomMapMaskData';
import { RoomVisualizationData } from './RoomVisualizationData';
export declare class RoomVisualization extends RoomObjectSpriteVisualization implements IPlaneVisualization {
    static FLOOR_COLOR: number;
    static FLOOR_COLOR_LEFT: number;
    static FLOOR_COLOR_RIGHT: number;
    private static WALL_COLOR_TOP;
    private static WALL_COLOR_SIDE;
    private static WALL_COLOR_BOTTOM;
    private static WALL_COLOR_BORDER;
    static LANDSCAPE_COLOR_TOP: number;
    static LANDSCAPE_COLOR_SIDE: number;
    static LANDSCAPE_COLOR_BOTTOM: number;
    private static ROOM_DEPTH_OFFSET;
    protected _data: RoomVisualizationData;
    private _roomPlaneParser;
    private _roomPlaneBitmapMaskParser;
    private _geometryUpdateId;
    private _boundingRectangle;
    private _directionX;
    private _directionY;
    private _directionZ;
    private _floorThickness;
    private _wallThickness;
    private _holeUpdateTime;
    private _planes;
    private _visiblePlanes;
    private _visiblePlaneSpriteNumbers;
    private _roomScale;
    private _lastUpdateTime;
    private _updateIntervalTime;
    private _wallType;
    private _floorType;
    private _landscapeType;
    private _colorBackgroundOnly;
    private _color;
    private _redColor;
    private _greenColor;
    private _blueColor;
    private _typeVisibility;
    private _assetUpdateCounter;
    private _maskData;
    private _isPlaneSet;
    private _textureCache;
    constructor();
    initialize(data: IObjectVisualizationData): boolean;
    dispose(): void;
    protected reset(): void;
    update(geometry: IRoomGeometry, time: number, update: boolean, skipUpdate: boolean): void;
    private updateGeometry;
    private updateThickness;
    private updateHole;
    private updateMasks;
    private updatePlaneTexturesAndVisibilities;
    private clearPlanes;
    protected initializeRoomPlanes(): void;
    protected defineSprites(): void;
    private getLandscapeWidth;
    private getLandscapeHeight;
    protected updatePlaneTypes(floorType: string, wallType: string, landscapeType: string): boolean;
    private updatePlaneVisibility;
    protected updatePlanes(geometry: IRoomGeometry, geometryUpdate: boolean, timeSinceStartMs: number): boolean;
    protected updatePlaneMasks(k: RoomMapMaskData): void;
    private updateSprite;
    getBoundingRectangle(): Rectangle;
    get planes(): IRoomPlane[];
    get floorRelativeDepth(): number;
    get wallRelativeDepth(): number;
}
