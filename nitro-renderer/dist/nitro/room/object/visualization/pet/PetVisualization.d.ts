import { Resource, Texture } from '@pixi/core';
import { IGraphicAsset, IObjectVisualizationData, IRoomGeometry } from '../../../../../api';
import { AnimationStateData } from '../data';
import { FurnitureAnimatedVisualization } from '../furniture';
import { PetVisualizationData } from './PetVisualizationData';
export declare class PetVisualization extends FurnitureAnimatedVisualization {
    static TYPE: string;
    private static HEAD;
    private static SADDLE;
    private static HAIR;
    private static ADDITIONAL_SPRITE_COUNT;
    private static EXPERIENCE_BUBBLE_VISIBLE_IN_MS;
    private static PET_EXPERIENCE_BUBBLE;
    private static POSTURE_ANIMATION_INDEX;
    private static GESTURE_ANIMATION_INDEX;
    private static ANIMATION_INDEX_COUNT;
    private _posture;
    private _gesture;
    private _isSleeping;
    private _headDirection;
    private _headOnly;
    private _nonHeadSprites;
    private _headSprites;
    private _saddleSprites;
    private _animationOver;
    private _paletteIndex;
    private _paletteName;
    private _customLayerIds;
    private _customPartIds;
    private _customPaletteIds;
    private _isRiding;
    private _color;
    private _experience;
    private _experienceTimestamp;
    private _experienceData;
    private _previousAnimationDirection;
    private _animationStates;
    constructor();
    initialize(data: IObjectVisualizationData): boolean;
    dispose(): void;
    protected getAnimationId(animationData: AnimationStateData): number;
    update(geometry: IRoomGeometry, time: number, update: boolean, skipUpdate: boolean): void;
    protected updateExperienceBubble(time: number): void;
    protected updateModel(scale: number): boolean;
    protected updateAnimation(scale: number): number;
    protected setPostureAndGesture(posture: string, gesture: string): void;
    private getAnimationStateData;
    private setAnimationForIndex;
    protected resetAllAnimationFrames(): void;
    protected updateAnimations(scale: number): number;
    protected getSpriteAssetName(scale: number, layerId: number): string;
    protected getLayerColor(scale: number, layerId: number, colorId: number): number;
    protected getLayerXOffset(scale: number, direction: number, layerId: number): number;
    protected getLayerYOffset(scale: number, direction: number, layerId: number): number;
    protected getLayerZOffset(scale: number, direction: number, layerId: number): number;
    private getDirection;
    protected getFrameNumber(scale: number, layerId: number): number;
    private isHeadSprite;
    private isNonHeadSprite;
    private _parser3;
    getAsset(name: string, layerId?: number): IGraphicAsset;
    protected getAdditionalLayerCount(): number;
    protected setLayerCount(count: number): void;
    protected getPostureForAsset(scale: number, name: string): string;
    getPetAdditionAsset(name: string): Texture<Resource>;
    protected get data(): PetVisualizationData;
}
