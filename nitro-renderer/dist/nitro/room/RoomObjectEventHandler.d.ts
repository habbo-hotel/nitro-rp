import { IObjectData, IRoomCanvasMouseListener, IRoomEngineServices, IRoomGeometry, IRoomObject, IRoomObjectController, IRoomObjectEventManager } from '../../api';
import { Disposable } from '../../core';
import { RoomObjectEvent, RoomSpriteMouseEvent } from '../../events';
export declare class RoomObjectEventHandler extends Disposable implements IRoomCanvasMouseListener, IRoomObjectEventManager {
    private _roomEngine;
    private _eventIds;
    private _selectedAvatarId;
    private _selectedObjectId;
    private _selectedObjectCategory;
    private _whereYouClickIsWhereYouGo;
    private _objectPlacementSource;
    constructor(roomEngine: IRoomEngineServices);
    dispose(): void;
    private onRoomEngineObjectEvent;
    processRoomCanvasMouseEvent(event: RoomSpriteMouseEvent, object: IRoomObject, geometry: IRoomGeometry): void;
    processRoomObjectPlacement(placementSource: string, roomId: number, id: number, category: number, typeId: number, extra?: string, stuffData?: IObjectData, state?: number, frameNumber?: number, posture?: string): boolean;
    cancelRoomObjectInsert(k: number): boolean;
    private getMouseEventId;
    private setMouseEventId;
    handleRoomObjectEvent(event: RoomObjectEvent, roomId: number): void;
    private handleRoomObjectMouseEvent;
    private handleRoomObjectMouseClickEvent;
    private handleRoomObjectMouseDoubleClickEvent;
    private handleRoomObjectMouseMoveEvent;
    private handleRoomObjectMouseDownEvent;
    private handleRoomObjectMouseDownLongEvent;
    private handleRoomObjectMouseEnterEvent;
    private handleRoomObjectMouseLeaveEvent;
    private onRoomObjectStateChangedEvent;
    private onRoomObjectDimmerStateUpdateEvent;
    private handleSelectedObjectRemove;
    private onRoomObjectWidgetRequestEvent;
    private onRoomObjectFurnitureActionEvent;
    private handleObjectSoundMachineEvent;
    private handleObjectJukeboxEvent;
    private onRoomObjectFloorHoleEvent;
    private onRoomObjectRoomAdEvent;
    private onRoomObjectBadgeAssetEvent;
    private handleMousePointer;
    private handleRoomObjectPlaySoundEvent;
    private handleRoomObjectSamplePlaybackEvent;
    private onHSLColorEnableEvent;
    private onRoomObjectDataRequestEvent;
    private onRoomObjectTileMouseEvent;
    private handleObjectMove;
    private handleObjectPlace;
    private handleFurnitureMove;
    private handleWallItemMove;
    private validateFurnitureLocation;
    private validateWallItemLocation;
    private changeObjectState;
    private useObject;
    private changeRoomObjectState;
    private sendWalkUpdate;
    private handleMouseOverObject;
    private handleMoveTargetFurni;
    private getActiveSurfaceLocation;
    private handleMouseOverTile;
    private placeObject;
    modifyRoomObject(roomId: number, objectId: number, category: number, operation: string): boolean;
    modifyRoomObjectDataWithMap(roomId: number, objectId: number, category: number, operation: string, data: Map<string, string>): boolean;
    modifyWallItemData(roomId: number, objectId: number, colorHex: string, text: string): boolean;
    deleteWallItem(roomId: number, itemId: number): boolean;
    getValidRoomObjectDirection(k: IRoomObjectController, _arg_2: boolean): number;
    private isValidLocation;
    private placeObjectOnUser;
    setSelectedObject(roomId: number, objectId: number, category: number): void;
    private deselectObject;
    setSelectedAvatar(k: number, _arg_2: number, _arg_3: boolean): void;
    private resetSelectedObjectData;
    private getSelectedRoomObjectData;
    private setFurnitureAlphaMultiplier;
    private decorateModeMove;
    cancelRoomObjectPlacement(roomId: number): boolean;
    private setSelectedRoomObjectData;
    private updateSelectedObjectData;
    private handleUserPlace;
    get engine(): IRoomEngineServices;
    get selectedAvatarId(): number;
}
