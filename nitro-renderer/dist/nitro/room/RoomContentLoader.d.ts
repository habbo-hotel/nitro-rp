import { Resource, Texture } from '@pixi/core';
import { GraphicAssetGifCollection, IEventDispatcher, IFurnitureDataListener, IGraphicAssetCollection, IGraphicAssetGifCollection, IPetColorResult, IRoomContentListener, IRoomContentLoader, IRoomObject, ISessionDataManager } from '../../api';
export declare class RoomContentLoader implements IFurnitureDataListener, IRoomContentLoader {
    private static PLACE_HOLDER;
    private static PLACE_HOLDER_WALL;
    private static PLACE_HOLDER_PET;
    private static PLACE_HOLDER_DEFAULT;
    private static ROOM;
    private static TILE_CURSOR;
    private static SELECTION_ARROW;
    static LOADER_READY: string;
    static MANDATORY_LIBRARIES: string[];
    private _stateEvents;
    private _sessionDataManager;
    private _waitingForSessionDataManager;
    private _iconListener;
    private _collections;
    private _gifCollections;
    private _images;
    private _events;
    private _activeObjects;
    private _activeObjectTypes;
    private _activeObjectTypeIds;
    private _objectTypeAdUrls;
    private _wallItems;
    private _wallItemTypes;
    private _wallItemTypeIds;
    private _furniRevisions;
    private _pets;
    private _petColors;
    private _objectAliases;
    private _objectOriginalNames;
    private _pendingContentTypes;
    private _dataInitialized;
    constructor();
    initialize(events: IEventDispatcher): void;
    dispose(): void;
    setSessionDataManager(sessionData: ISessionDataManager): void;
    loadFurnitureData(): void;
    private setFurnitureData;
    private processFurnitureData;
    getFurnitureFloorNameForTypeId(typeId: number): string;
    getFurnitureWallNameForTypeId(typeId: number, extra?: string): string;
    getFurnitureFloorColorIndex(typeId: number): number;
    getFurnitureWallColorIndex(typeId: number): number;
    private getColorIndexFromName;
    private removeColorIndex;
    getRoomObjectAdUrl(type: string): string;
    getPetColorResult(petIndex: number, paletteIndex: number): IPetColorResult;
    getPetColorResultsForTag(petIndex: number, tagName: string): IPetColorResult[];
    getCollection(name: string): IGraphicAssetCollection;
    getGifCollection(name: string): IGraphicAssetGifCollection;
    getImage(name: string): HTMLImageElement;
    addAssetToCollection(collectionName: string, assetName: string, texture: Texture<Resource>, override?: boolean): boolean;
    createGifCollection(collectionName: string, textures: Texture<Resource>[], durations: number[]): GraphicAssetGifCollection;
    private createCollection;
    getPlaceholderName(type: string): string;
    getCategoryForType(type: string): number;
    getPetNameForType(type: number): string;
    isLoaderType(type: string): boolean;
    downloadImage(id: number, type: string, param: string, events?: IEventDispatcher): boolean;
    downloadAsset(type: string, events: IEventDispatcher): Promise<void>;
    private processAsset;
    setAssetAliasName(name: string, originalName: string): void;
    private getAssetAliasName;
    private getAssetOriginalName;
    getAssetUrls(type: string, param?: string, icon?: boolean): string[];
    getAssetIconUrl(type: string, colorIndex: string): string;
    private getAssetUrlWithGenericBase;
    getAssetUrlWithFurniBase(assetName: string): string;
    getAssetUrlWithFurniIconBase(assetName: string): string;
    getAssetUrlWithPetBase(assetName: string): string;
    setRoomObjectRoomId(object: IRoomObject, roomId: string): void;
    private getOrRemoveEventDispatcher;
    setIconListener(listener: IRoomContentListener): void;
}
