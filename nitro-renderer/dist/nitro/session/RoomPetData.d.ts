import { IRoomPetData } from '../../api';
export declare class RoomPetData implements IRoomPetData {
    private _id;
    private _level;
    private _maximumLevel;
    private _experience;
    private _levelExperienceGoal;
    private _energy;
    private _maximumEnergy;
    private _happyness;
    private _maximumHappyness;
    private _ownerId;
    private _ownerName;
    private _respect;
    private _age;
    private _unknownRarity;
    private _saddle;
    private _rider;
    private _breedable;
    private _skillThresholds;
    private _publiclyRideable;
    private _fullyGrown;
    private _dead;
    private _maximumTimeToLive;
    private _remainingTimeToLive;
    private _remainingGrowTime;
    private _rarityLevel;
    private _publiclyBreedable;
    private _adultLevel;
    get id(): number;
    set id(k: number);
    get level(): number;
    set level(level: number);
    get maximumLevel(): number;
    set maximumLevel(k: number);
    get experience(): number;
    set experience(experience: number);
    get levelExperienceGoal(): number;
    set levelExperienceGoal(k: number);
    get energy(): number;
    set energy(energy: number);
    get maximumEnergy(): number;
    set maximumEnergy(k: number);
    get happyness(): number;
    set happyness(k: number);
    get maximumHappyness(): number;
    set maximumHappyness(k: number);
    get ownerId(): number;
    set ownerId(k: number);
    get ownerName(): string;
    set ownerName(ownerName: string);
    get respect(): number;
    set respect(k: number);
    get age(): number;
    set age(age: number);
    get unknownRarity(): number;
    set unknownRarity(k: number);
    get saddle(): boolean;
    set saddle(k: boolean);
    get rider(): boolean;
    set rider(k: boolean);
    get skillTresholds(): number[];
    set skillTresholds(k: number[]);
    get publiclyRideable(): number;
    set publiclyRideable(k: number);
    get breedable(): boolean;
    set breedable(k: boolean);
    get fullyGrown(): boolean;
    set fullyGrown(k: boolean);
    get dead(): boolean;
    set dead(k: boolean);
    get rarityLevel(): number;
    set rarityLevel(rarityLevel: number);
    get maximumTimeToLive(): number;
    set maximumTimeToLive(k: number);
    get remainingTimeToLive(): number;
    set remainingTimeToLive(k: number);
    get remainingGrowTime(): number;
    set remainingGrowTime(k: number);
    get publiclyBreedable(): boolean;
    set publiclyBreedable(k: boolean);
    get adultLevel(): number;
}
