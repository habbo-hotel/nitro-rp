import { Resource, Texture } from '@pixi/core';
import { IFurnitureData, IFurnitureDataListener, IGroupInformationManager, IMessageComposer, INitroCommunicationManager, IProductData, IProductDataListener, ISessionDataManager } from '../../api';
import { NitroManager } from '../../core';
import { IgnoredUsersManager } from './IgnoredUsersManager';
export declare class SessionDataManager extends NitroManager implements ISessionDataManager {
    private _communication;
    private _userId;
    private _name;
    private _figure;
    private _gender;
    private _realName;
    private _respectsReceived;
    private _respectsLeft;
    private _respectsPetLeft;
    private _canChangeName;
    private _safetyLocked;
    private _ignoredUsersManager;
    private _groupInformationManager;
    private _clubLevel;
    private _securityLevel;
    private _isAmbassador;
    private _noobnessLevel;
    private _isEmailVerified;
    private _systemOpen;
    private _systemShutdown;
    private _isAuthenticHabbo;
    private _isRoomCameraFollowDisabled;
    private _uiFlags;
    private _floorItems;
    private _wallItems;
    private _products;
    private _furnitureData;
    private _productData;
    private _furnitureReady;
    private _productsReady;
    private _furnitureListenersNotified;
    private _pendingFurnitureListeners;
    private _pendingProductListeners;
    private _tags;
    private _badgeImageManager;
    constructor(communication: INitroCommunicationManager);
    protected onInit(): void;
    protected onDispose(): void;
    private resetUserInfo;
    private loadFurnitureData;
    private loadProductData;
    private loadBadgeImageManager;
    hasProductData(listener: IProductDataListener): boolean;
    getAllFurnitureData(listener: IFurnitureDataListener): IFurnitureData[];
    removePendingFurniDataListener(listener: IFurnitureDataListener): void;
    private onUserFigureEvent;
    private onUserInfoEvent;
    private onUserPermissionsEvent;
    private onAvailabilityStatusMessageEvent;
    private onPetRespectFailed;
    private onChangeNameUpdateEvent;
    private onUserNameChangeMessageEvent;
    private onUserTags;
    private onRoomModelNameEvent;
    private onFurnitureDataReadyEvent;
    private onProductDataReadyEvent;
    private onInClientLinkEvent;
    private onMysteryBoxKeysEvent;
    private onNoobnessLevelMessageEvent;
    private onAccountSafetyLockStatusChangeMessageEvent;
    private onEmailStatus;
    private onNitroSettingsEvent;
    private destroyFurnitureData;
    private destroyProductData;
    getFloorItemData(id: number): IFurnitureData;
    getFloorItemDataByName(name: string): IFurnitureData;
    getWallItemData(id: number): IFurnitureData;
    getWallItemDataByName(name: string): IFurnitureData;
    getProductData(type: string): IProductData;
    getBadgeUrl(name: string): string;
    getGroupBadgeUrl(name: string): string;
    getBadgeImage(name: string): Texture<Resource>;
    getGroupBadgeImage(name: string): Texture<Resource>;
    getUserTags(roomUnitId: number): string[];
    loadBadgeImage(name: string): string;
    loadGroupBadgeImage(name: string): string;
    hasSecurity(level: number): boolean;
    giveRespect(userId: number): void;
    givePetRespect(petId: number): void;
    sendSpecialCommandMessage(text: string, styleId?: number): void;
    ignoreUser(name: string): void;
    unignoreUser(name: string): void;
    isUserIgnored(name: string): boolean;
    getGroupBadge(groupId: number): string;
    send(composer: IMessageComposer<unknown[]>): void;
    get communication(): INitroCommunicationManager;
    get userId(): number;
    get userName(): string;
    get figure(): string;
    get gender(): string;
    get realName(): string;
    get ignoredUsersManager(): IgnoredUsersManager;
    get groupInformationManager(): IGroupInformationManager;
    get respectsReceived(): number;
    get respectsLeft(): number;
    get respectsPetLeft(): number;
    get canChangeName(): boolean;
    get clubLevel(): number;
    get securityLevel(): number;
    get isAmbassador(): boolean;
    get isEmailVerified(): boolean;
    get isNoob(): boolean;
    get isRealNoob(): boolean;
    get isSystemOpen(): boolean;
    get isSystemShutdown(): boolean;
    get isAuthenticHabbo(): boolean;
    get isModerator(): boolean;
    get isCameraFollowDisabled(): boolean;
    get uiFlags(): number;
    get tags(): string[];
}
