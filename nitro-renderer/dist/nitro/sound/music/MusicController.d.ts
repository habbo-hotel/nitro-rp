import { IAdvancedMap, IMusicController, IPlaylistController, ISongInfo } from '../../../api';
import { SoundManagerEvent } from '../events';
export declare class MusicController implements IMusicController {
    static readonly SKIP_POSITION_SET: number;
    private static readonly MAXIMUM_NOTIFY_PRIORITY;
    private _timerInstance;
    private _songRequestList;
    private _requestedSongs;
    private _availableSongs;
    private _songRequestsPerPriority;
    private _songRequestCountsPerPriority;
    private _diskInventoryMissingData;
    private _songDiskInventory;
    private _priorityPlaying;
    private _requestNumberPlaying;
    private _messageEvents;
    private _roomItemPlaylist;
    private _musicPlayer;
    private _songIdPlaying;
    private _previousNotifiedSongId;
    private _previousNotificationTime;
    constructor();
    init(): void;
    getRoomItemPlaylist(_arg_1?: number): IPlaylistController;
    get songDiskInventory(): IAdvancedMap<number, number>;
    getSongDiskInventorySize(): number;
    getSongDiskInventoryDiskId(k: number): number;
    getSongDiskInventorySongId(k: number): number;
    getSongInfo(k: number): ISongInfo;
    getSongIdPlayingAtPriority(priority: number): number;
    stop(priority: number): void;
    addSongInfoRequest(k: number): void;
    requestSongInfoWithoutSamples(k: number): void;
    requestUserSongDisks(): void;
    updateVolume(_arg_1: number): void;
    dispose(): void;
    get samplesIdsInUse(): number[];
    onSongLoaded(songId: number): void;
    samplesUnloaded(_arg_1: number[]): void;
    protected onTraxSongComplete(k: SoundManagerEvent): void;
    private onTraxSongInfoMessageEvent;
    private onSongDiskInventoryMessage;
    private onTick;
    private requestSong;
    private areSamplesRequested;
    private processSongEntryForPlaying;
    playSong(songId: number, priority: number, startPos?: number, playLength?: number, fadeInSeconds?: number, fadeOutSeconds?: number): boolean;
    private playSongObject;
    private notifySongPlaying;
    private addSongStartRequest;
    private getSongDataEntry;
    private getSongStartRequest;
    private getTopRequestPriority;
    private getSongIdRequestedAtPriority;
    private getSongRequestCountAtPriority;
    private playSongWithHighestPriority;
    private resetSongStartRequest;
    private reRequestSongAtPriority;
    private stopSongAtPriority;
    private onSoundMachineInit;
    private onSoundMachineDispose;
    private onJukeboxInit;
    private onJukeboxDispose;
    private disposeRoomPlaylist;
}
