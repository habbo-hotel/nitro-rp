import { Point } from '@pixi/math';
import { IActiveActionData, IAssetAnimation, IAssetManager, IAvatarFigureContainer, IAvatarImage, IAvatarRenderManager, IFigureData, IFigurePartSet, IPartColor, IStructureData } from '../../api';
import { EventDispatcher } from '../../core';
import { ActionDefinition } from './actions';
import { Animation, AnimationManager, AvatarAnimationLayerData } from './animation';
import { AvatarImagePartContainer } from './AvatarImagePartContainer';
import { AvatarRenderManager } from './AvatarRenderManager';
import { AvatarCanvas, PartSetsData } from './structure';
export declare class AvatarStructure extends EventDispatcher {
    private _renderManager;
    private _geometry;
    private _figureData;
    private _partSetsData;
    private _animationData;
    private _animationManager;
    private _mandatorySetTypeIds;
    private _actionManager;
    private _defaultAction;
    constructor(renderManager: AvatarRenderManager);
    init(): void;
    dispose(): void;
    initGeometry(k: any): void;
    initActions(k: IAssetManager, _arg_2: any): void;
    updateActions(data: any): void;
    initPartSets(k: any): boolean;
    initAnimation(k: any): boolean;
    initFigureData(k: IFigureData): boolean;
    injectFigureData(data: IFigureData): void;
    registerAnimations(k: IAssetManager, _arg_2?: string, _arg_3?: number): void;
    registerAnimation(data: {
        [index: string]: IAssetAnimation;
    }): void;
    getPartColor(k: IAvatarFigureContainer, _arg_2: string, _arg_3?: number): IPartColor;
    getBodyPartData(animation: string, frameCount: number, spriteId: string): AvatarAnimationLayerData;
    getAnimation(k: string): Animation;
    getActionDefinition(k: string): ActionDefinition;
    getActionDefinitionWithState(k: string): ActionDefinition;
    isMainAvatarSet(k: string): boolean;
    sortActions(k: IActiveActionData[]): IActiveActionData[];
    maxFrames(k: IActiveActionData[]): number;
    getMandatorySetTypeIds(k: string, _arg_2: number): string[];
    getDefaultPartSet(k: string, _arg_2: string): IFigurePartSet;
    getCanvasOffsets(k: IActiveActionData[], _arg_2: string, _arg_3: number): number[];
    getCanvas(k: string, _arg_2: string): AvatarCanvas;
    removeDynamicItems(k: IAvatarImage): void;
    getActiveBodyPartIds(k: IActiveActionData, _arg_2: IAvatarImage): string[];
    getBodyPartsUnordered(k: string): string[];
    getBodyParts(k: string, _arg_2: string, _arg_3: number): string[];
    getFrameBodyPartOffset(k: IActiveActionData, _arg_2: number, _arg_3: number, _arg_4: string): Point;
    getParts(k: string, _arg_2: IAvatarFigureContainer, _arg_3: IActiveActionData, _arg_4: string, _arg_5: number, removes: string[], _arg_7: IAvatarImage, _arg_8?: Map<string, string>): AvatarImagePartContainer[];
    private getPopulatedArray;
    getItemIds(): string[];
    get renderManager(): IAvatarRenderManager;
    get figureData(): IStructureData;
    get partData(): PartSetsData;
    get animationManager(): AnimationManager;
}
