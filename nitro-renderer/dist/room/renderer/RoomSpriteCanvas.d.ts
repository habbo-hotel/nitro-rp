import { RenderTexture } from '@pixi/core';
import { DisplayObject } from '@pixi/display';
import { Point } from '@pixi/math';
import { IRoomCanvasMouseListener, IRoomGeometry, IRoomRenderingCanvas, IRoomSpriteCanvasContainer, IRoomSpriteMouseEvent, RoomObjectSpriteData } from '../../api';
import { ExtendedSprite, SortableSprite } from './utils';
export declare class RoomSpriteCanvas implements IRoomRenderingCanvas {
    private _id;
    private _container;
    private _geometry;
    private _animationFPS;
    private _renderTimestamp;
    private _totalTimeRunning;
    private _lastFrame;
    private _master;
    private _display;
    private _mask;
    private _sortableSprites;
    private _spriteCount;
    private _activeSpriteCount;
    private _spritePool;
    private _skipObjectUpdate;
    private _runningSlow;
    private _width;
    private _height;
    private _renderedWidth;
    private _renderedHeight;
    private _screenOffsetX;
    private _screenOffsetY;
    private _mouseLocation;
    private _mouseOldX;
    private _mouseOldY;
    private _mouseCheckCount;
    private _mouseSpriteWasHit;
    private _mouseActiveObjects;
    private _eventCache;
    private _eventId;
    private _scale;
    private _SafeStr_4507;
    private _rotation;
    private _rotationOrigin;
    private _rotationRodLength;
    private _effectDirection;
    private _effectLocation;
    private _SafeStr_795;
    private _restrictsScaling;
    private _noSpriteVisibilityChecking;
    private _usesExclusionRectangles;
    private _usesMask;
    private _canvasUpdated;
    private _objectCache;
    private _mouseListener;
    constructor(container: IRoomSpriteCanvasContainer, id: number, width: number, height: number, scale: number);
    private setupCanvas;
    dispose(): void;
    initialize(width: number, height: number): void;
    setMask(flag: boolean): void;
    setScale(scale: number, point?: Point, offsetPoint?: Point, override?: boolean, asDelta?: boolean): void;
    render(time: number, update?: boolean): void;
    skipSpriteVisibilityChecking(): void;
    resumeSpriteVisibilityChecking(): void;
    getSortableSpriteList(): RoomObjectSpriteData[];
    getPlaneSortableSprites(): SortableSprite[];
    removeFromCache(identifier: string): void;
    private renderObject;
    private getExtendedSprite;
    protected getExtendedSpriteIdentifier(sprite: ExtendedSprite): string;
    private renderSprite;
    private createAndAddSprite;
    private cleanSprites;
    private updateEnterRoomEffect;
    private cleanSprite;
    update(): void;
    setMouseListener(listener: IRoomCanvasMouseListener): void;
    private getCacheItem;
    private isSpriteVisible;
    handleMouseEvent(x: number, y: number, type: string, altKey: boolean, ctrlKey: boolean, shiftKey: boolean, buttonDown: boolean): boolean;
    private checkMouseHits;
    protected createMouseEvent(x: number, y: number, localX: number, localY: number, type: string, tag: string, altKey: boolean, ctrlKey: boolean, shiftKey: boolean, buttonDown: boolean): IRoomSpriteMouseEvent;
    protected bufferMouseEvent(k: IRoomSpriteMouseEvent, _arg_2: string): void;
    protected processMouseEvents(): void;
    getDisplayAsTexture(): RenderTexture;
    private doMagic;
    private changeShaking;
    private changeRotation;
    moveLeft(): void;
    moveRight(): void;
    moveUp(): void;
    moveDown(): void;
    get id(): number;
    get geometry(): IRoomGeometry;
    get master(): DisplayObject;
    get display(): DisplayObject;
    get screenOffsetX(): number;
    set screenOffsetX(x: number);
    get screenOffsetY(): number;
    set screenOffsetY(y: number);
    get scale(): number;
    get width(): number;
    get height(): number;
    get restrictsScaling(): boolean;
    set restrictsScaling(flag: boolean);
    get canvasUpdated(): boolean;
    set canvasUpdated(flag: boolean);
}
