import { Point } from '@pixi/math';
import { IRoomGeometry, IVector3D } from '../../api';
export declare class RoomGeometry implements IRoomGeometry {
    static SCALE_ZOOMED_IN: number;
    static SCALE_ZOOMED_OUT: number;
    private _updateId;
    private _x;
    private _y;
    private _z;
    private _directionAxis;
    private _location;
    private _direction;
    private _depth;
    private _scale;
    private _x_scale;
    private _y_scale;
    private _z_scale;
    private _x_scale_internal;
    private _y_scale_internal;
    private _z_scale_internal;
    private _loc;
    private _dir;
    private _clipNear;
    private _clipFar;
    private _displacements;
    constructor(scale: number, direction: IVector3D, location: IVector3D, _arg_4?: IVector3D);
    static getIntersectionVector(k: IVector3D, _arg_2: IVector3D, _arg_3: IVector3D, _arg_4: IVector3D): IVector3D;
    get updateId(): number;
    get scale(): number;
    set scale(scale: number);
    get directionAxis(): IVector3D;
    get location(): IVector3D;
    set location(location: IVector3D);
    get direction(): IVector3D;
    set direction(direction: IVector3D);
    set x_scale(xScale: number);
    set y_scale(yScale: number);
    set z_scale(zScale: number);
    dispose(): void;
    setDisplacement(k: IVector3D, _arg_2: IVector3D): void;
    private getDisplacenent;
    setDepthVector(k: IVector3D): void;
    adjustLocation(k: IVector3D, _arg_2: number): void;
    getCoordinatePosition(k: IVector3D): IVector3D;
    getScreenPosition(k: IVector3D): IVector3D;
    getScreenPoint(k: IVector3D): Point;
    getPlanePosition(k: Point, _arg_2: IVector3D, _arg_3: IVector3D, _arg_4: IVector3D): Point;
    performZoom(): void;
    isZoomedIn(): boolean;
    performZoomOut(): void;
    performZoomIn(): void;
}
