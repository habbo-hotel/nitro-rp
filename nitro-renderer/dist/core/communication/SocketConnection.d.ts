import { ICommunicationManager, IConnection, IConnectionStateListener, IMessageComposer, IMessageConfiguration, IMessageEvent } from '../../api';
import { EventDispatcher } from '../common';
export declare class SocketConnection extends EventDispatcher implements IConnection {
    private _communicationManager;
    private _stateListener;
    private _socket;
    private _messages;
    private _codec;
    private _dataBuffer;
    private _isReady;
    private _pendingClientMessages;
    private _pendingServerMessages;
    private _isAuthenticated;
    constructor(communicationManager: ICommunicationManager, stateListener: IConnectionStateListener);
    init(socketUrl: string): void;
    protected onDispose(): void;
    onReady(): void;
    private createSocket;
    private destroySocket;
    private onOpen;
    private onClose;
    private onError;
    private onMessage;
    private dispatchConnectionEvent;
    authenticated(): void;
    send(...composers: IMessageComposer<unknown[]>[]): boolean;
    private write;
    processReceivedData(): void;
    private processData;
    private processWrappers;
    private splitReceivedMessages;
    private concatArrayBuffers;
    private getMessagesForWrapper;
    private handleMessages;
    registerMessages(configuration: IMessageConfiguration): void;
    addMessageEvent(event: IMessageEvent): void;
    removeMessageEvent(event: IMessageEvent): void;
    get isAuthenticated(): boolean;
    get dataBuffer(): ArrayBuffer;
    set dataBuffer(buffer: ArrayBuffer);
}
