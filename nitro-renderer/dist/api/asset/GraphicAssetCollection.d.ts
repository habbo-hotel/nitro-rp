import { BaseTexture, Resource, Texture } from '@pixi/core';
import { Spritesheet } from '@pixi/spritesheet';
import { GraphicAsset } from './GraphicAsset';
import { GraphicAssetPalette } from './GraphicAssetPalette';
import { IAssetData } from './IAssetData';
import { IGraphicAsset } from './IGraphicAsset';
import { IGraphicAssetCollection } from './IGraphicAssetCollection';
export declare class GraphicAssetCollection implements IGraphicAssetCollection {
    private static PALETTE_ASSET_DISPOSE_THRESHOLD;
    private _referenceCount;
    private _referenceTimestamp;
    private _name;
    private _baseTexture;
    private _data;
    private _textures;
    private _assets;
    private _palettes;
    private _paletteAssetNames;
    constructor(data: IAssetData, spritesheet: Spritesheet);
    static removeFileExtension(name: string): string;
    dispose(): void;
    addReference(): void;
    removeReference(): void;
    define(data: IAssetData): void;
    private defineAssets;
    private definePalettes;
    private createAsset;
    private replaceAsset;
    getAsset(name: string): IGraphicAsset;
    getAssetWithPalette(name: string, paletteName: string): IGraphicAsset;
    getTexture(name: string): Texture<Resource>;
    getPaletteNames(): string[];
    getPaletteColors(paletteName: string): number[];
    getPalette(name: string): GraphicAssetPalette;
    addAsset(name: string, texture: Texture<Resource>, override: boolean, x?: number, y?: number, flipH?: boolean, flipV?: boolean): boolean;
    disposeAsset(name: string): void;
    getLibraryAsset(name: string): Texture<Resource>;
    private addLibraryAsset;
    private disposePaletteAssets;
    get referenceCount(): number;
    get referenceTimestamp(): number;
    get name(): string;
    get baseTexture(): BaseTexture;
    get data(): IAssetData;
    get textures(): Map<string, Texture>;
    get assets(): Map<string, GraphicAsset>;
}
